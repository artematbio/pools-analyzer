#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å Range Proximity Warning –¥–ª—è Ethereum/Base
"""

import asyncio
import sys
import os
sys.path.append('..')

async def check_range_proximity_issue():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á–µ–º—É Range Proximity Warning –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ Solana"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê RANGE PROXIMITY WARNING")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ alerting.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ Solana –¥–∞–Ω–Ω—ã–µ
    print("\nüìã –ê–ù–ê–õ–ò–ó –ö–û–î–ê ALERTING.PY:")
    
    try:
        from alerting import AlertingSystem
        print("   ‚úÖ AlertingSystem –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ check_range_proximity_positions
        import inspect
        source = inspect.getsource(AlertingSystem.check_range_proximity_positions)
        
        if "pool_analyzer" in source:
            print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: alerting.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ pool_analyzer (SOLANA)")
            print("      - pool_analyzer.py –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ Solana –ø–æ–∑–∏—Ü–∏–∏")
            print("      - –ù–ï–¢ –∏–º–ø–æ—Ä—Ç–∞ unified_positions_analyzer –¥–ª—è Ethereum/Base")
        
        if "get_positions_from_multiple_wallets" in source:
            print("   üìå –§—É–Ω–∫—Ü–∏—è get_positions_from_multiple_wallets –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            print("      - –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¢–û–õ–¨–ö–û –¥–ª—è Solana (–∏–∑ pool_analyzer.py)")
        
        print("\nüéØ –†–ï–®–ï–ù–ò–ï:")
        print("   –ù—É–∂–Ω–æ –ò–ó–ú–ï–ù–ò–¢–¨ alerting.py —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏–∑:")
        print("   1. Solana (pool_analyzer.py)")
        print("   2. Ethereum (unified_positions_analyzer.py)")
        print("   3. Base (unified_positions_analyzer.py)")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ alerting.py: {e}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ Supabase –¥–ª—è range proximity
    print("\nüìä –î–ê–ù–ù–´–ï –í SUPABASE –î–õ–Ø RANGE PROXIMITY:")
    
    try:
        from database_handler import supabase_handler
        
        if not supabase_handler or not supabase_handler.is_connected():
            print("   ‚ùå Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ethereum –ø–æ–∑–∏—Ü–∏–∏ —Å tick –¥–∞–Ω–Ω—ã–º–∏
        eth_positions = supabase_handler.client.table('lp_position_snapshots').select(
            'position_mint, pool_name, tick_lower, tick_upper, position_value_usd'
        ).eq('network', 'ethereum').gt('position_value_usd', 100).order(
            'created_at', desc=True
        ).limit(5).execute()
        
        print(f"\n   üî∑ ETHEREUM –ø–æ–∑–∏—Ü–∏–∏ (>${100}+):")
        if eth_positions.data:
            for pos in eth_positions.data:
                tick_lower = pos.get('tick_lower')
                tick_upper = pos.get('tick_upper')
                has_ticks = tick_lower is not None and tick_upper is not None
                print(f"   ‚Ä¢ {pos['pool_name']}: ${pos['position_value_usd']:.0f}")
                print(f"     Ticks: {tick_lower} ‚Üí {tick_upper} {'‚úÖ' if has_ticks else '‚ùå'}")
        else:
            print("   ‚ùå –ù–µ—Ç Ethereum –ø–æ–∑–∏—Ü–∏–π!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Base –ø–æ–∑–∏—Ü–∏–∏ —Å tick –¥–∞–Ω–Ω—ã–º–∏
        base_positions = supabase_handler.client.table('lp_position_snapshots').select(
            'position_mint, pool_name, tick_lower, tick_upper, position_value_usd'
        ).eq('network', 'base').gt('position_value_usd', 100).order(
            'created_at', desc=True
        ).limit(5).execute()
        
        print(f"\n   üî∂ BASE –ø–æ–∑–∏—Ü–∏–∏ (>${100}+):")
        if base_positions.data:
            for pos in base_positions.data:
                tick_lower = pos.get('tick_lower')
                tick_upper = pos.get('tick_upper')
                has_ticks = tick_lower is not None and tick_upper is not None
                print(f"   ‚Ä¢ {pos['pool_name']}: ${pos['position_value_usd']:.0f}")
                print(f"     Ticks: {tick_lower} ‚Üí {tick_upper} {'‚úÖ' if has_ticks else '‚ùå'}")
        else:
            print("   ‚ùå –ù–µ—Ç Base –ø–æ–∑–∏—Ü–∏–π!")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    print("\n" + "=" * 50)
    print("üîß –ù–ï–û–ë–•–û–î–ò–ú–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("1. –ò–∑–º–µ–Ω–∏—Ç—å alerting.py - –¥–æ–±–∞–≤–∏—Ç—å Ethereum/Base –ø–æ–∑–∏—Ü–∏–∏")
    print("2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ tick_lower/tick_upper —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å range proximity –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ç–µ–π")

if __name__ == "__main__":
    asyncio.run(check_range_proximity_issue()) 