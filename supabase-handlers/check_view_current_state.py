#!/usr/bin/env python3
from database_handler import SupabaseHandler

def check_view_current_state():
    supabase_handler = SupabaseHandler()
    
    if not supabase_handler.is_connected():
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        return
    
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ')
    print('=' * 60)
    print('üìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï VIEW bio_dao_lp_support')
    print('=' * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ–π—á–∞—Å –≤ view
    result = supabase_handler.client.table('bio_dao_lp_support').select('*').order('our_position_value_usd', desc=True).execute()
    
    print(f'–ó–∞–ø–∏—Å–µ–π –≤ view: {len(result.data)}')
    
    if len(result.data) == 0:
        print('‚ùå VIEW –ü–£–°–¢–û–ô! –õ–∏–±–æ SQL –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, –ª–∏–±–æ –ª–æ–≥–∏–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è')
        return
    
    print(f'\nüí∞ –í–°–ï –ó–ê–ü–ò–°–ò –í VIEW:')
    for i, record in enumerate(result.data, 1):
        pos_value = record['our_position_value_usd']
        fdv = record['token_fdv_usd']
        symbol = record['token_symbol']
        pool_name = record['pool_name']
        network = record['network_display']
        
        marker = 'üí∞' if pos_value > 0 else '  '
        print(f'{marker} [{i:2d}] {pool_name} ({network}): ${pos_value:,.2f}')
        print(f'        {symbol} FDV: ${fdv:,.0f}')
    
    print(f'\nüîç –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú:')
    
    # QBIO/SOL
    qbio_sol_view = [r for r in result.data if 'QBIO/SOL' in r['pool_name']]
    if qbio_sol_view:
        print(f'‚ùå QBIO/SOL –í–°–ï –ï–©–ï –≤–æ view: {len(qbio_sol_view)} –∑–∞–ø–∏—Å–µ–π')
    else:
        print('‚úÖ QBIO/SOL –∏—Å–∫–ª—é—á–µ–Ω')
    
    # BIO/SPINE –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    spine_view = [r for r in result.data if 'BIO/SPINE' in r['pool_name']]
    if len(spine_view) > 1:
        print(f'‚ùå BIO/SPINE –í–°–ï –ï–©–ï –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è: {len(spine_view)} –∑–∞–ø–∏—Å–µ–π')
    else:
        print(f'‚úÖ BIO/SPINE –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {len(spine_view)} –∑–∞–ø–∏—Å—å')
    
    # ATH FDV
    ath_view = [r for r in result.data if r['token_symbol'] == 'ATH']
    if ath_view:
        for record in ath_view:
            fdv = record['token_fdv_usd']
            if fdv > 10000000:
                print(f'‚úÖ ATH FDV –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: ${fdv:,.0f}')
            else:
                print(f'‚ùå ATH FDV –í–°–ï –ï–©–ï –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: ${fdv:,.0f}')
    else:
        print('‚ùå ATH –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ view')
    
    # –ö—Ä—É–ø–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    large_positions = [r for r in result.data if r['our_position_value_usd'] > 100000]
    print(f'\nüí∞ –ö–†–£–ü–ù–´–ï –ü–û–ó–ò–¶–ò–ò (>$100k): {len(large_positions)}')
    for record in large_positions:
        value = record['our_position_value_usd']
        pool_name = record['pool_name']
        network = record['network_display']
        print(f'    {pool_name} ({network}): ${value:,.2f}')
    
    # –ü–æ–∑–∏—Ü–∏–∏ —Å $0
    zero_positions = [r for r in result.data if r['our_position_value_usd'] == 0]
    print(f'\nüí∏ –ü–û–ó–ò–¶–ò–ò –° $0: {len(zero_positions)}')
    
    print(f'\nüìä –ò–¢–û–ì–û –ü–†–û–ë–õ–ï–ú:')
    problems = 0
    if qbio_sol_view:
        problems += 1
        print('‚ùå QBIO/SOL –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω')
    if len(spine_view) > 1:
        problems += 1
        print('‚ùå BIO/SPINE –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è')
    if ath_view and ath_view[0]['token_fdv_usd'] < 10000000:
        problems += 1
        print('‚ùå ATH FDV –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π')
    if len(large_positions) < 3:
        problems += 1
        print('‚ùå –ú–∞–ª–æ –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π')
    
    if problems == 0:
        print('‚úÖ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –†–ï–®–ï–ù–´!')
    else:
        print(f'‚ùå –û–°–¢–ê–õ–û–°–¨ –ü–†–û–ë–õ–ï–ú: {problems}')
        print('\nü§î –í–´–í–û–î: –Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–µ–±–∏–ª, –µ—Å–ª–∏ SQL –Ω–µ –∏—Å–ø—Ä–∞–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã')

if __name__ == '__main__':
    check_view_current_state() 