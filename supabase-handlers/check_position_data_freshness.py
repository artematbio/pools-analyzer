#!/usr/bin/env python3
from database_handler import SupabaseHandler
from datetime import datetime, timedelta

def check_position_data_freshness():
    supabase_handler = SupabaseHandler()
    
    if not supabase_handler.is_connected():
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        return
    
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ')
    print('üîç –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–ò –î–ê–ù–ù–´–• –í lp_position_snapshots...\n')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π
    positions_result = supabase_handler.client.table('lp_position_snapshots').select(
        'token0_symbol, token1_symbol, pool_name, network, position_value_usd, created_at'
    ).order('created_at', desc=True).limit(50).execute()
    
    print(f'üìä –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ü–ò–°–ò –í lp_position_snapshots: {len(positions_result.data)}')
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    today = datetime.now().date()
    yesterday = today - timedelta(days=1)
    
    today_positions = []
    yesterday_positions = []
    older_positions = []
    
    for record in positions_result.data:
        created_date = datetime.fromisoformat(record['created_at'].replace('Z', '+00:00')).date()
        
        if created_date == today:
            today_positions.append(record)
        elif created_date == yesterday:
            yesterday_positions.append(record)
        else:
            older_positions.append(record)
    
    print(f'üìÖ –°–µ–≥–æ–¥–Ω—è ({today}): {len(today_positions)} –∑–∞–ø–∏—Å–µ–π')
    print(f'üìÖ –í—á–µ—Ä–∞ ({yesterday}): {len(yesterday_positions)} –∑–∞–ø–∏—Å–µ–π') 
    print(f'üìÖ –†–∞–Ω—å—à–µ: {len(older_positions)} –∑–∞–ø–∏—Å–µ–π\n')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä—ã
    target_pairs = ['VITA/BIO', 'BIO/MYCO', 'BIO/SPINE']
    
    print('üîç –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú–ù–´–• –ü–£–õ–û–í –í lp_position_snapshots:')
    
    for pair_name in target_pairs:
        print(f'\nüí∞ {pair_name}:')
        
        found_positions = []
        for record in positions_result.data:
            pool_name_record = record.get('pool_name', '')
            token0 = record.get('token0_symbol', '')
            token1 = record.get('token1_symbol', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä
            if (pair_name in pool_name_record or 
                (pair_name == 'VITA/BIO' and (('VITA' in token0 and 'BIO' in token1) or ('BIO' in token0 and 'VITA' in token1))) or
                (pair_name == 'BIO/MYCO' and (('BIO' in token0 and 'MYCO' in token1) or ('MYCO' in token0 and 'BIO' in token1))) or
                (pair_name == 'BIO/SPINE' and (('BIO' in token0 and 'SPINE' in token1) or ('SPINE' in token0 and 'BIO' in token1)))):
                found_positions.append(record)
        
        if found_positions:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            found_positions.sort(key=lambda x: x['created_at'], reverse=True)
            
            print(f'  –ù–∞–π–¥–µ–Ω–æ {len(found_positions)} –∑–∞–ø–∏—Å–µ–π:')
            for i, record in enumerate(found_positions[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                created_time = record['created_at'][:16]
                timestamp_time = record.get('timestamp', 'N/A')[:16] if record.get('timestamp') else 'N/A'
                
                print(f'  [{i+1}] {record["pool_name"]} ({record["network"]})')
                print(f'      üí∞ –ü–æ–∑–∏—Ü–∏—è: ${record["position_value_usd"]:,.2f}')
                print(f'      üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_time}')
                print(f'      üïê Timestamp: {timestamp_time}')
                print(f'      üè∑Ô∏è –¢–æ–∫–µ–Ω—ã: {record.get("token0_symbol", "UNK")}/{record.get("token1_symbol", "UNK")}')
        else:
            print(f'  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ lp_position_snapshots')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Å value > 0
    print(f'\nüí∞ –í–°–ï –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò (value > 0):')
    
    active_positions = [r for r in positions_result.data if r['position_value_usd'] > 0]
    active_positions.sort(key=lambda x: x['position_value_usd'], reverse=True)
    
    print(f'–ù–∞–π–¥–µ–Ω–æ {len(active_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:')
    
    for record in active_positions[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 10
        created_time = record['created_at'][:16]
        print(f'  üí∞ {record["pool_name"]} ({record["network"]}): ${record["position_value_usd"]:,.2f} - {created_time}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–µ—Ç—è–º
    print(f'\nüìÖ –ü–û–°–õ–ï–î–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–û –°–ï–¢–Ø–ú:')
    
    networks = ['ethereum', 'base', 'solana']
    for network in networks:
        network_positions = [r for r in positions_result.data if r['network'] == network]
        
        if network_positions:
            latest = max(network_positions, key=lambda x: x['created_at'])
            latest_time = latest['created_at'][:16]
            count_today = len([r for r in network_positions if datetime.fromisoformat(r['created_at'].replace('Z', '+00:00')).date() == today])
            
            print(f'  üì° {network.upper()}: –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {latest_time} (—Å–µ–≥–æ–¥–Ω—è: {count_today} –∑–∞–ø–∏—Å–µ–π)')
        else:
            print(f'  üì° {network.upper()}: ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

if __name__ == '__main__':
    check_position_data_freshness() 