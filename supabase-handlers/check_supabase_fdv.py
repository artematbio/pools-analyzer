#!/usr/bin/env python3
from database_handler import SupabaseHandler
from datetime import datetime

def check_fdv_data():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase —á–µ—Ä–µ–∑ handler
    supabase_handler = SupabaseHandler()
    
    if not supabase_handler.is_connected():
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        return
    
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ')
    print('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º dao_pool_snapshots –∑–∞ —Å–µ–≥–æ–¥–Ω—è...')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    result = supabase_handler.client.table('dao_pool_snapshots').select(
        'token_symbol, network, token_fdv_usd, created_at'
    ).gte('created_at', '2025-07-30T00:00:00Z').order(
        'created_at', desc=True
    ).limit(50).execute()

    print(f'–ù–∞–π–¥–µ–Ω–æ {len(result.data)} –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n')

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º FDV
    tokens = {}
    for record in result.data:
        token = record['token_symbol']
        network = record['network'] 
        fdv = record['token_fdv_usd']
        created = record['created_at'][:16]
        
        if token not in tokens:
            tokens[token] = {}
        
        if network not in tokens[token]:
            tokens[token][network] = {'fdv': fdv, 'time': created}

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print('üîç FDV –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∏ —Å–µ—Ç—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏):')
    for token, networks in sorted(tokens.items()):
        if len(networks) > 1:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ç—è—Ö
            print(f'{token}:')
            fdv_values = []
            for network, data in networks.items():
                fdv_val = data['fdv']
                fdv_values.append(fdv_val)
                print(f'  {network}: FDV ${fdv_val:,.0f} ({data["time"]})')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ FDV
            if len(set(fdv_values)) > 1:
                print(f'  ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –†–∞–∑–Ω—ã–µ FDV –¥–ª—è {token}!')
            else:
                print(f'  ‚úÖ OK: –ï–¥–∏–Ω—ã–π FDV –¥–ª—è {token}')
            print()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    print('\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤:')
    problem_tokens = ['ATH', 'CRYO', 'GROW', 'NEURON']
    
    for token in problem_tokens:
        result = supabase_handler.client.table('dao_pool_snapshots').select(
            'token_symbol, network, token_fdv_usd, pool_name, created_at'
        ).eq('token_symbol', token).gte('created_at', '2025-07-30T00:00:00Z').order(
            'created_at', desc=True
        ).limit(10).execute()
        
        if result.data:
            print(f'\n{token} –∑–∞–ø–∏—Å–∏:')
            for record in result.data:
                fdv = record["token_fdv_usd"]
                print(f'  {record["network"]}: FDV ${fdv:,.0f} - {record["pool_name"]} ({record["created_at"][:16]})')

if __name__ == '__main__':
    check_fdv_data() 