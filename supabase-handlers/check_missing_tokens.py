#!/usr/bin/env python3
import sys
import os
sys.path.append('..')
from database_handler import SupabaseHandler
import json

def check_missing_tokens():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ —Ç–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ view bio_dao_lp_support"""
    
    supabase_handler = SupabaseHandler()
    
    if not supabase_handler.is_connected():
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        return
    
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ')
    print('=' * 80)
    print('üîç –ê–ù–ê–õ–ò–ó –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –¢–û–ö–ï–ù–û–í –í VIEW bio_dao_lp_support')
    print('=' * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Ç–æ–∫–µ–Ω–æ–≤
    with open('tokens_pools_config.json', 'r') as f:
        config = json.load(f)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏ view
    view_result = supabase_handler.client.table('bio_dao_lp_support').select('*').execute()
    current_tokens = {}
    
    for record in view_result.data:
        token = record['token_symbol']
        network = record['network_display'].lower()
        if network == 'ethereum':
            network = 'ethereum'
        elif network == 'base':
            network = 'base'
        elif network == 'solana':
            network = 'solana'
        
        if token not in current_tokens:
            current_tokens[token] = []
        current_tokens[token].append(network)
    
    print(f"üìä –¢–ï–ö–£–©–ò–ï –¢–û–ö–ï–ù–´ –í VIEW: {len(current_tokens)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
    for token, networks in current_tokens.items():
        print(f"   {token}: {', '.join(networks)}")
    
    print(f"\nüìã –í–°–ï DAO –¢–û–ö–ï–ù–´ –ò–ó –ö–û–ù–§–ò–ì–ê:")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–∫—Ä–æ–º–µ BIO, SOL, WETH, ETH)
    all_dao_tokens = set()
    
    for network in ['ethereum', 'base', 'solana']:
        for token in config['tokens'][network]:
            symbol = token['symbol']
            if symbol not in ['BIO', 'SOL', 'WETH', 'ETH']:
                all_dao_tokens.add(symbol)
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(all_dao_tokens)} DAO —Ç–æ–∫–µ–Ω–æ–≤: {sorted(all_dao_tokens)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    print(f"\n‚ùå –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –¢–û–ö–ï–ù–´:")
    missing_tokens = []
    
    for token in sorted(all_dao_tokens):
        if token not in current_tokens:
            missing_tokens.append(token)
            print(f"   üö´ {token} - –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤–æ view")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–∞–∫–∏—Ö —á–µ–π–Ω–∞—Ö –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ vs view
            config_networks = []
            for network in ['ethereum', 'base', 'solana']:
                for config_token in config['tokens'][network]:
                    if config_token['symbol'] == token:
                        config_networks.append(network)
            
            view_networks = current_tokens[token]
            missing_networks = [n for n in config_networks if n not in view_networks]
            
            if missing_networks:
                print(f"   ‚ö†Ô∏è  {token} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —á–µ–π–Ω–∞—Ö: {', '.join(missing_networks)}")
                print(f"        (–µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {', '.join(config_networks)})")
                print(f"        (–µ—Å—Ç—å –≤–æ view: {', '.join(view_networks)})")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª—ã —Å BIO
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–£–õ–û–í –° BIO:")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—É–ª—ã –∏–∑ dao_pool_snapshots
    pools_result = supabase_handler.client.table('dao_pool_snapshots').select(
        'token_symbol, network, pool_name, is_bio_pair, token_fdv_usd, created_at'
    ).gte('created_at', '2025-07-30T00:00:00Z').execute()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∏ —Å–µ—Ç—è–º
    pools_by_token = {}
    for pool in pools_result.data:
        token = pool['token_symbol']
        network = pool['network']
        if token not in pools_by_token:
            pools_by_token[token] = {}
        if network not in pools_by_token[token]:
            pools_by_token[token][network] = []
        pools_by_token[token][network].append({
            'pool_name': pool['pool_name'],
            'is_bio_pair': pool['is_bio_pair'],
            'fdv': pool['token_fdv_usd']
        })
    
    print(f"üìä –ü–£–õ–´ –í DAO_POOL_SNAPSHOTS:")
    for token in sorted(all_dao_tokens):
        if token in pools_by_token:
            print(f"\n   üí∞ {token}:")
            for network in ['ethereum', 'base', 'solana']:
                if network in pools_by_token[token]:
                    pools = pools_by_token[token][network]
                    bio_pools = [p for p in pools if p['is_bio_pair']]
                    non_bio_pools = [p for p in pools if not p['is_bio_pair']]
                    
                    if bio_pools:
                        print(f"      ‚úÖ {network}: {len(bio_pools)} BIO –ø—É–ª–æ–≤")
                        for pool in bio_pools[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                            print(f"         - {pool['pool_name']} (FDV: ${pool['fdv']:,.0f})")
                    else:
                        print(f"      ‚ùå {network}: –ë–ï–ó BIO –ø—É–ª–æ–≤")
                        if non_bio_pools:
                            print(f"         (–µ—Å—Ç—å {len(non_bio_pools)} –Ω–µ-BIO –ø—É–ª–æ–≤)")
                else:
                    print(f"      ‚ùå {network}: –ù–ï–¢ –î–ê–ù–ù–´–•")
        else:
            print(f"\n   üö´ {token}: –ù–ï–¢ –î–ê–ù–ù–´–• –í–û–û–ë–©–ï")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print(f"1. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã –∫–∞–∫ 'Need to Create'")
    print(f"2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ DAO —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å BIO –ø–∞—Ä–∞ –Ω–∞ –≤—Å–µ—Ö 3 —á–µ–π–Ω–∞—Ö")
    print(f"3. –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–π BIO –ø–∞—Ä—ã –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞–∫ 'Need to Create'")
    
    if missing_tokens:
        print(f"\nüîß –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –¢–û–ö–ï–ù–´: {len(missing_tokens)}")
        for token in missing_tokens:
            print(f"   - {token}")

if __name__ == '__main__':
    check_missing_tokens()
