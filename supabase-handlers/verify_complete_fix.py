#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ bio_dao_lp_support view
"""
import sys
sys.path.append('..')
from database_handler import SupabaseHandler

def verify_complete_fix():
    supabase_handler = SupabaseHandler()
    
    if not supabase_handler.is_connected():
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        return
    
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ')
    print('=' * 80)
    print('üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û VIEW')
    print('=' * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ view
    try:
        result = supabase_handler.client.table('bio_dao_lp_support').select('*').execute()
        
        if not result.data:
            print('‚ùå VIEW –ü–£–°–¢–û–ô –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è SQL!')
            return
        
        print(f'üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ view: {len(result.data)}')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
        positions_with_value = []
        total_value = 0
        
        for record in result.data:
            our_positions = record['Our positions $']
            token = record['Token']
            chain = record['Chain']
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ
            try:
                if isinstance(our_positions, str):
                    clean_val = our_positions.replace('$', '').replace(',', '')
                    if 'M' in clean_val:
                        numeric_val = float(clean_val.replace('M', '')) * 1000000
                    elif 'K' in clean_val:
                        numeric_val = float(clean_val.replace('K', '')) * 1000
                    else:
                        numeric_val = float(clean_val)
                else:
                    numeric_val = float(our_positions)
                
                if numeric_val > 0:
                    positions_with_value.append({
                        'token': token,
                        'chain': chain,
                        'value': numeric_val,
                        'formatted': our_positions
                    })
                    total_value += numeric_val
            except:
                pass
        
        print(f'\nüí∞ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:')
        print(f'   –ü–æ–∑–∏—Ü–∏–π —Å —Å—É–º–º–æ–π > $0: {len(positions_with_value)}')
        print(f'   –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π: ${total_value:,.2f}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—É–ª—ã
        print(f'\nüîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –ü–£–õ–û–í:')
        
        problematic_pools = {
            'WETH/BIO': {'chain': 'Ethereum', 'expected_range': (1500000, 2000000)},  # ~$1.7M
            'HAIR/BIO': {'chain': 'Ethereum', 'expected_range': (1000000, 1500000)},  # ~$1.2M
            'ATH/BIO': {'chain': 'Ethereum', 'expected_range': (100000, 200000)},     # ~$146K
            'BIO/PSY': {'chain': 'Ethereum', 'expected_range': (40000, 80000)},       # ~$54K
            'BIO/QBIO': {'chain': 'Ethereum', 'expected_range': (40000, 80000)}       # ~$52K
        }
        
        found_pools = {}
        for record in result.data:
            token = record['Token']
            chain = record['Chain']
            our_positions = record['Our positions $']
            
            # –ò—â–µ–º –ø—É–ª—ã –ø–æ —Ç–æ–∫–µ–Ω—É –∏ —Å–µ—Ç–∏
            for pool_name, pool_info in problematic_pools.items():
                if token in pool_name and chain == pool_info['chain']:
                    try:
                        if isinstance(our_positions, str):
                            clean_val = our_positions.replace('$', '').replace(',', '')
                            if 'M' in clean_val:
                                numeric_val = float(clean_val.replace('M', '')) * 1000000
                            elif 'K' in clean_val:
                                numeric_val = float(clean_val.replace('K', '')) * 1000
                            else:
                                numeric_val = float(clean_val)
                        else:
                            numeric_val = float(our_positions)
                        
                        found_pools[pool_name] = {
                            'value': numeric_val,
                            'formatted': our_positions,
                            'expected_range': pool_info['expected_range']
                        }
                    except:
                        pass
        
        fix_success_count = 0
        for pool_name, data in found_pools.items():
            value = data['value']
            min_expected, max_expected = data['expected_range']
            
            if min_expected <= value <= max_expected:
                print(f'   ‚úÖ {pool_name}: {data["formatted"]} (–≤ –æ–∂–∏–¥–∞–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ)')
                fix_success_count += 1
            else:
                print(f'   ‚ùå {pool_name}: {data["formatted"]} (–æ–∂–∏–¥–∞–ª–æ—Å—å ${min_expected:,.0f}-${max_expected:,.0f})')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-15 –ø–æ–∑–∏—Ü–∏–π
        print(f'\nüìã –¢–û–ü-15 –ü–û–ó–ò–¶–ò–ô –ü–û –°–¢–û–ò–ú–û–°–¢–ò:')
        sorted_positions = sorted(positions_with_value, key=lambda x: x['value'], reverse=True)
        
        for i, pos in enumerate(sorted_positions[:15], 1):
            print(f'  [{i:2d}] {pos["token"]} ({pos["chain"]}): {pos["formatted"]}')
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f'\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:')
        
        if len(positions_with_value) >= 20:
            print(f'‚úÖ –û–¢–õ–ò–ß–ù–û! –ù–∞–π–¥–µ–Ω–æ {len(positions_with_value)} –ø–æ–∑–∏—Ü–∏–π (–±—ã–ª–æ 3)')
        elif len(positions_with_value) >= 15:
            print(f'‚úÖ –•–û–†–û–®–û! –ù–∞–π–¥–µ–Ω–æ {len(positions_with_value)} –ø–æ–∑–∏—Ü–∏–π')
        else:
            print(f'‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(positions_with_value)} –ø–æ–∑–∏—Ü–∏–π')
        
        if 80000000 <= total_value <= 150000000:  # $80M-$150M —Ä–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
            print(f'‚úÖ –û–ë–©–ê–Ø –°–£–ú–ú–ê –í –†–ê–ó–£–ú–ù–´–• –ü–†–ï–î–ï–õ–ê–•: ${total_value:,.2f}')
        elif total_value > 200000000:
            print(f'‚ùå –°–£–ú–ú–ê –í–°–ï –ï–©–ï –°–õ–ò–®–ö–û–ú –ë–û–õ–¨–®–ê–Ø: ${total_value:,.2f}')
        else:
            print(f'‚ö†Ô∏è –°–£–ú–ú–ê –í–û–ó–ú–û–ñ–ù–û –ó–ê–ù–ò–ñ–ï–ù–ê: ${total_value:,.2f}')
        
        if fix_success_count >= 3:
            print(f'‚úÖ –ü–†–û–ë–õ–ï–ú–ù–´–ï –ü–£–õ–´ –ò–°–ü–†–ê–í–õ–ï–ù–´: {fix_success_count}/5 –≤ –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö')
        else:
            print(f'‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –ü–£–õ–´ –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–´: —Ç–æ–ª—å–∫–æ {fix_success_count}/5 –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö')
        
        if (len(positions_with_value) >= 20 and 
            80000000 <= total_value <= 150000000 and 
            fix_success_count >= 3):
            print(f'\nüéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!')
            print(f'   ‚úÖ –í–∫–ª—é—á–µ–Ω—ã –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ (–Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑ dao_pool_snapshots)')
            print(f'   ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ –≤ 20-47 —Ä–∞–∑')
            print(f'   ‚úÖ –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç—ã –∫–∞–∂–¥–æ–π NFT –ø–æ–∑–∏—Ü–∏–∏')
            print(f'   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–∂–æ–∏–Ω –ø–æ pool_name')
            print(f'   ‚úÖ View –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!')
        else:
            print(f'\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê')
            print(f'   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ SQL')
            print(f'   - –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ CTE')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ view: {e}')

if __name__ == '__main__':
    verify_complete_fix()
