#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å TVL –¥–ª—è Ethereum/Base –≤ telegram –æ—Ç—á–µ—Ç–∞—Ö
"""

import asyncio
import sys
import os
sys.path.append('..')
from database_handler import supabase_handler

async def check_tvl_problems():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º TVL –¥–∞–Ω–Ω—ã–µ –≤ Supabase –¥–ª—è Ethereum/Base"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê TVL –ü–†–û–ë–õ–ï–ú –í ETHEREUM/BASE –û–¢–ß–ï–¢–ê–•")
    print("=" * 60)
    
    if not supabase_handler or not supabase_handler.is_connected():
        print("‚ùå Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        return
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ Ethereum
    print("\nüìä ETHEREUM –ü–û–ó–ò–¶–ò–ò:")
    eth_positions = supabase_handler.client.table('lp_position_snapshots').select(
        'position_mint, pool_id, pool_name, position_value_usd, created_at'
    ).eq('network', 'ethereum').order('created_at', desc=True).limit(10).execute()
    
    if eth_positions.data:
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(eth_positions.data)} –ø–æ–∑–∏—Ü–∏–π")
        for pos in eth_positions.data:
            print(f"   ‚Ä¢ {pos['pool_name']}: ${pos['position_value_usd']:.2f} (pool_id: {pos['pool_id'][:8]}...)")
    else:
        print("   ‚ùå –ü–æ–∑–∏—Ü–∏–∏ Ethereum –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–ª—ã Ethereum –∏ –∏—Ö TVL
    print("\nüèä ETHEREUM POOLS TVL:")
    eth_pools = supabase_handler.client.table('lp_pool_snapshots').select(
        'pool_address, pool_name, tvl_usd, created_at'
    ).eq('network', 'ethereum').order('created_at', desc=True).limit(10).execute()
    
    if eth_pools.data:
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(eth_pools.data)} –ø—É–ª–æ–≤")
        for pool in eth_pools.data:
            tvl = pool['tvl_usd'] if pool['tvl_usd'] else 0
            print(f"   ‚Ä¢ {pool['pool_name']}: TVL = ${tvl:,.0f}")
    else:
        print("   ‚ùå –ü—É–ª—ã Ethereum –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º JOIN –º–µ–∂–¥—É positions –∏ pools –¥–ª—è Ethereum
    print("\nüîó ETHEREUM JOIN –ü–†–û–í–ï–†–ö–ê:")
    if eth_positions.data and eth_pools.data:
        for pos in eth_positions.data[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–∑–∏—Ü–∏–∏
            pool_id = pos['pool_id']
            matching_pool = supabase_handler.client.table('lp_pool_snapshots').select(
                'tvl_usd, pool_name'
            ).eq('pool_address', pool_id).eq('network', 'ethereum').order('created_at', desc=True).limit(1).execute()
            
            if matching_pool.data:
                tvl = matching_pool.data[0]['tvl_usd'] if matching_pool.data[0]['tvl_usd'] else 0
                print(f"   ‚úÖ {pos['pool_name']}: pool_id –Ω–∞–π–¥–µ–Ω, TVL = ${tvl:,.0f}")
            else:
                print(f"   ‚ùå {pos['pool_name']}: pool_id {pool_id[:8]}... –ù–ï –ù–ê–ô–î–ï–ù –≤ lp_pool_snapshots!")
    
    print("\n" + "=" * 60)
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ Base
    print("\nüìä BASE –ü–û–ó–ò–¶–ò–ò:")
    base_positions = supabase_handler.client.table('lp_position_snapshots').select(
        'position_mint, pool_id, pool_name, position_value_usd, created_at'
    ).eq('network', 'base').order('created_at', desc=True).limit(10).execute()
    
    if base_positions.data:
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(base_positions.data)} –ø–æ–∑–∏—Ü–∏–π")
        for pos in base_positions.data:
            print(f"   ‚Ä¢ {pos['pool_name']}: ${pos['position_value_usd']:.2f} (pool_id: {pos['pool_id'][:8]}...)")
    else:
        print("   ‚ùå –ü–æ–∑–∏—Ü–∏–∏ Base –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–ª—ã Base –∏ –∏—Ö TVL
    print("\nüèä BASE POOLS TVL:")
    base_pools = supabase_handler.client.table('lp_pool_snapshots').select(
        'pool_address, pool_name, tvl_usd, created_at'
    ).eq('network', 'base').order('created_at', desc=True).limit(10).execute()
    
    if base_pools.data:
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(base_pools.data)} –ø—É–ª–æ–≤")
        for pool in base_pools.data:
            tvl = pool['tvl_usd'] if pool['tvl_usd'] else 0
            print(f"   ‚Ä¢ {pool['pool_name']}: TVL = ${tvl:,.0f}")
    else:
        print("   ‚ùå –ü—É–ª—ã Base –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º JOIN –º–µ–∂–¥—É positions –∏ pools –¥–ª—è Base
    print("\nüîó BASE JOIN –ü–†–û–í–ï–†–ö–ê:")
    if base_positions.data and base_pools.data:
        for pos in base_positions.data[:3]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–∑–∏—Ü–∏–∏
            pool_id = pos['pool_id']
            matching_pool = supabase_handler.client.table('lp_pool_snapshots').select(
                'tvl_usd, pool_name'
            ).eq('pool_address', pool_id).eq('network', 'base').order('created_at', desc=True).limit(1).execute()
            
            if matching_pool.data:
                tvl = matching_pool.data[0]['tvl_usd'] if matching_pool.data[0]['tvl_usd'] else 0
                print(f"   ‚úÖ {pos['pool_name']}: pool_id –Ω–∞–π–¥–µ–Ω, TVL = ${tvl:,.0f}")
            else:
                print(f"   ‚ùå {pos['pool_name']}: pool_id {pool_id[:8]}... –ù–ï –ù–ê–ô–î–ï–ù –≤ lp_pool_snapshots!")
    
    print("\nüéØ –í–´–í–û–î–´:")
    print("1. –ï—Å–ª–∏ TVL = 0 –∏–ª–∏ N/A - –ø—Ä–æ–±–ª–µ–º–∞ –≤ unified_positions_analyzer.py")
    print("2. –ï—Å–ª–∏ pool_id –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É–ª–æ–≤")
    print("3. –ï—Å–ª–∏ JOIN –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≤ multichain_report_generator.py")

if __name__ == "__main__":
    asyncio.run(check_tvl_problems()) 