#!/usr/bin/env python3
import sys
sys.path.append('..')
from database_handler import SupabaseHandler

def check_view_definition():
    supabase_handler = SupabaseHandler()
    
    if not supabase_handler.is_connected():
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        return
    
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ')
    print('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è view bio_dao_lp_support...\n')
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ view
    try:
        # –°–ø–æ—Å–æ–± 1: —á–µ—Ä–µ–∑ information_schema
        result = supabase_handler.client.rpc('sql', {
            'query': '''
            SELECT view_definition 
            FROM information_schema.views 
            WHERE table_name = 'bio_dao_lp_support'
            '''
        }).execute()
        
        if result.data:
            print('üìã –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï VIEW:')
            print(result.data[0]['view_definition'])
        else:
            print('‚ùå View –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ information_schema')
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è view: {e}')
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏–∫—É —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    print('\nüîç –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò VIEW –ß–ï–†–ï–ó –î–ê–ù–ù–´–ï:')
    
    # –ü–æ–ª—É—á–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ view —Å timestamp
    view_result = supabase_handler.client.table('bio_dao_lp_support').select(
        'token_symbol, network_display, pool_name, snapshot_timestamp, token_fdv_usd'
    ).execute()
    
    print(f'üìä View —Å–æ–¥–µ—Ä–∂–∏—Ç {len(view_result.data)} –∑–∞–ø–∏—Å–µ–π')
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º timestamp
    token_timestamps = {}
    for record in view_result.data:
        token = record['token_symbol']
        network = record['network_display']
        timestamp = record['snapshot_timestamp']
        fdv = record['token_fdv_usd']
        
        if token not in token_timestamps:
            token_timestamps[token] = {}
        
        token_timestamps[token][network] = {
            'timestamp': timestamp[:16],
            'fdv': fdv,
            'pool': record['pool_name']
        }
    
    print('\nüìÖ TIMESTAMP –ê–ù–ê–õ–ò–ó –í VIEW:')
    problem_tokens = []
    
    for token, networks in sorted(token_timestamps.items()):
        if len(networks) > 1:
            timestamps = [data['timestamp'] for data in networks.values()]
            unique_timestamps = set(timestamps)
            
            if len(unique_timestamps) > 1:
                problem_tokens.append(token)
                print(f'‚ùå {token}: —Ä–∞–∑–Ω—ã–µ timestamp!')
                for network, data in networks.items():
                    print(f'   {network}: {data["timestamp"]} - FDV ${data["fdv"]:,.0f} - {data["pool"]}')
            else:
                print(f'‚úÖ {token}: –µ–¥–∏–Ω—ã–π timestamp {list(unique_timestamps)[0]}')
            print()
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ dao_pool_snapshots –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    print('\nüìÖ –°–†–ê–í–ù–ï–ù–ò–ï –° DAO_POOL_SNAPSHOTS:')
    
    dao_result = supabase_handler.client.table('dao_pool_snapshots').select(
        'token_symbol, network, pool_name, created_at, token_fdv_usd, is_bio_pair'
    ).gte('created_at', '2025-07-30T15:20:00Z').eq('is_bio_pair', True).gt('token_fdv_usd', 0).execute()
    
    print(f'üìä DAO snapshots (BIO –ø–∞—Ä—ã, FDV > 0, –ø–æ—Å–ª–µ 15:20): {len(dao_result.data)} –∑–∞–ø–∏—Å–µ–π')
    
    for record in dao_result.data:
        token = record['token_symbol']
        network = record['network']
        timestamp = record['created_at'][:16]
        fdv = record['token_fdv_usd']
        
        # –ù–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ view
        view_match = None
        for view_rec in view_result.data:
            if (view_rec['token_symbol'] == token and 
                view_rec['network_display'].lower() == network.title()):
                view_match = view_rec
                break
        
        if view_match:
            view_ts = view_match['snapshot_timestamp'][:16]
            view_fdv = view_match['token_fdv_usd']
            
            if view_ts != timestamp or view_fdv != fdv:
                print(f'‚ùå {token} ({network}):')
                print(f'   DAO: {timestamp} - FDV ${fdv:,.0f}')
                print(f'   View: {view_ts} - FDV ${view_fdv:,.0f}')
            else:
                print(f'‚úÖ {token} ({network}): —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ')
        else:
            print(f'‚ùå {token} ({network}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ view!')

if __name__ == '__main__':
    check_view_definition() 