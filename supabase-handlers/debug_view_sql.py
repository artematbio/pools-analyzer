#!/usr/bin/env python3
from database_handler import SupabaseHandler

def debug_view_sql():
    supabase_handler = SupabaseHandler()
    
    if not supabase_handler.is_connected():
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        return
    
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ')
    print('üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ SQL –í VIEW...\n')
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º BIO –ø–∞—Ä—ã –≤ dao_pool_snapshots –¥–µ—Ç–∞–ª—å–Ω–æ
    print('üìä –í–°–ï BIO –ü–ê–†–´ –í DAO_POOL_SNAPSHOTS (—Å–µ–≥–æ–¥–Ω—è):')
    
    dao_result = supabase_handler.client.table('dao_pool_snapshots').select(
        'pool_name, network, token_symbol, token_fdv_usd, our_position_value_usd, snapshot_timestamp, created_at, is_bio_pair'
    ).gte('created_at', '2025-07-30T00:00:00Z').eq('is_bio_pair', True).gt('token_fdv_usd', 0).order('snapshot_timestamp', desc=True).execute()
    
    print(f'–ù–∞–π–¥–µ–Ω–æ {len(dao_result.data)} BIO –ø–∞—Ä —Å FDV > 0\n')
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    tokens_data = {}
    for record in dao_result.data:
        token = record['token_symbol']
        network = record['network']
        key = f"{token}_{network}"
        
        if key not in tokens_data:
            tokens_data[key] = []
        
        tokens_data[key].append({
            'pool': record['pool_name'],
            'fdv': record['token_fdv_usd'],
            'position': record['our_position_value_usd'],
            'snapshot_ts': record['snapshot_timestamp'][:16],
            'created_at': record['created_at'][:16]
        })
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º —Ç–æ–∫–µ–Ω–∞–º
    problem_tokens = ['NEURON', 'VITA']
    
    for token in problem_tokens:
        print(f'üîç {token} –¥–∞–Ω–Ω—ã–µ –≤ DAO_POOL_SNAPSHOTS:')
        
        token_records = []
        for key, records in tokens_data.items():
            if key.startswith(f"{token}_"):
                network = key.split('_')[1]
                for record in records:
                    token_records.append({
                        'network': network,
                        **record
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ snapshot_timestamp DESC
        token_records.sort(key=lambda x: x['snapshot_ts'], reverse=True)
        
        for record in token_records:
            print(f"  {record['network']}: {record['pool']} - FDV ${record['fdv']:,.0f} - Pos ${record['position']:,.2f}")
            print(f"    snapshot_ts: {record['snapshot_ts']}, created_at: {record['created_at']}")
        print()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    print('üîç –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ü–û–ó–ò–¶–ò–ò –í VIEW:')
    
    missing_pools = ['BIO/WETH', 'SOL/BIO']
    
    for pool_name in missing_pools:
        print(f'\n{pool_name} –≤ dao_pool_snapshots:')
        
        matching_records = []
        for record in dao_result.data:
            if pool_name in record['pool_name'] and record['our_position_value_usd'] > 0:
                matching_records.append(record)
        
        for record in matching_records:
            print(f"  {record['network']}: {record['pool_name']} - FDV ${record['token_fdv_usd']:,.0f} - Pos ${record['our_position_value_usd']:,.2f}")
            print(f"    snapshot_ts: {record['snapshot_timestamp'][:16]}, created_at: {record['created_at'][:16]}")
            print(f"    is_bio_pair: {record['is_bio_pair']}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ
    print('\nüìÖ –ü–†–û–í–ï–†–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –î–ê–¢–ï:')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä snapshot_timestamp >= CURRENT_DATE
    test_timestamps = [
        '2025-07-30T09:12:00',
        '2025-07-30T15:22:00', 
        '2025-07-30T15:24:00'
    ]
    
    for ts in test_timestamps:
        count = len([r for r in dao_result.data if r['snapshot_timestamp'] >= f'{ts}Z'])
        print(f"  snapshot_timestamp >= {ts}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    # 4. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π SQL
    print(f'\nüîß –ü–†–ï–î–õ–ê–ì–ê–ï–ú–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SQL:')
    
    # –ù–∞–π–¥–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π snapshot_timestamp
    max_snapshot_ts = max([r['snapshot_timestamp'] for r in dao_result.data])
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π snapshot_timestamp: {max_snapshot_ts}")
    
    print('''
–ü–†–û–ë–õ–ï–ú–ê –≤ SQL:
1. ROW_NUMBER() PARTITION BY token_symbol, network, pool_address - —Å–ª–∏—à–∫–æ–º –¥–µ—Ç–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
2. –§–∏–ª—å—Ç—Ä snapshot_timestamp >= CURRENT_DATE –º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∞—Ç—å –∑–∞–ø–∏—Å–∏
3. –ù—É–∂–Ω–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ token_symbol, network —Ç–æ–ª—å–∫–æ

–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô SQL:
''')

if __name__ == '__main__':
    debug_view_sql() 