#!/usr/bin/env python3
"""
Multi-Chain Report Generator
–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Solana, Ethereum –∏ Base –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ Telegram
"""

import asyncio
import os
import sys
import glob
from datetime import datetime
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'ethereum-analyzer'))

from report_formatter import ReportFormatter
from telegram_sender import TelegramSender

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
try:
    from positions import get_clmm_positions
    from unified_positions_analyzer import get_uniswap_positions
    from pool_analyzer import get_positions_from_multiple_wallets
    IMPORTS_SUCCESS = True
except ImportError as e:
    print(f"‚ö†Ô∏è Import error: {e}")
    IMPORTS_SUCCESS = False

class MultiChainReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º—É–ª—å—Ç–∏-—á–µ–π–Ω –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è Telegram"""
    
    def __init__(self):
        self.formatter = ReportFormatter()
        self.telegram = TelegramSender()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤
        self.wallets = {
            "solana": [
                "BpvSz1bQ7qHb7qAD748TREgSPBp6i6kukukNVgX49uxD",
                "EKuXYJ1Shg38u67vT91YbucttoG1RKCneXF1aEhXq8K6"
            ],
            "ethereum": ["0x31AAc4021540f61fe20c3dAffF64BA6335396850"],
            "base": ["0x31AAc4021540f61fe20c3dAffF64BA6335396850"]
        }
        
        # API –∫–ª—é—á–∏
        self.helius_rpc = "https://mainnet.helius-rpc.com/?api-key=d4af7b72-f199-4d77-91a9-11d8512c5e42"
        self.helius_api_key = "d4af7b72-f199-4d77-91a9-11d8512c5e42"
    
    async def generate_multichain_report(self, min_value_usd: float = 100.0) -> bool:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º—É–ª—å—Ç–∏-—á–µ–π–Ω –æ—Ç—á–µ—Ç
        
        Args:
            min_value_usd: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        """
        print("üåê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏-—á–µ–π–Ω –æ—Ç—á–µ—Ç...")
        print(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: ${min_value_usd}")
        
        if not IMPORTS_SUCCESS:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤, –Ω–µ –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
            return False
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Å–µ—Ç–µ–π
            multichain_data = await self._collect_multichain_data(min_value_usd)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report_parts = self.formatter.format_multichain_report(multichain_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            success = await self._send_report_to_telegram(report_parts)
            
            if success:
                print("‚úÖ –ú—É–ª—å—Ç–∏-—á–µ–π–Ω –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Telegram")
            
            return success
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–ª—å—Ç–∏-—á–µ–π–Ω –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    async def _collect_multichain_data(self, min_value_usd: float) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π"""
        
        multichain_data = {
            'solana': None,
            'ethereum': [],
            'base': [],
            'summary': {
                'total_value_usd': 0,
                'total_positions': 0,
                'networks_active': 0
            }
        }
        
        # === SOLANA DATA ===
        print("üü£ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Solana...")
        try:
            solana_data = await self._get_solana_data(min_value_usd)
            if solana_data:
                multichain_data['solana'] = solana_data
                multichain_data['summary']['networks_active'] += 1
                print(f"‚úÖ Solana: {solana_data.get('total_positions', 0)} –ø–æ–∑–∏—Ü–∏–π")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Solana: {e}")
        
        # === ETHEREUM DATA ===
        print("‚ö° –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Ethereum...")
        try:
            ethereum_positions = await self._get_ethereum_data(min_value_usd)
            if ethereum_positions:
                multichain_data['ethereum'] = ethereum_positions
                multichain_data['summary']['networks_active'] += 1
                print(f"‚úÖ Ethereum: {len(ethereum_positions)} –ø–æ–∑–∏—Ü–∏–π")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Ethereum: {e}")
        
        # === BASE DATA ===
        print("üîµ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Base...")
        try:
            base_positions = await self._get_base_data(min_value_usd)
            if base_positions:
                multichain_data['base'] = base_positions
                multichain_data['summary']['networks_active'] += 1
                print(f"‚úÖ Base: {len(base_positions)} –ø–æ–∑–∏—Ü–∏–π")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Base: {e}")
        
        # === SUMMARY CALCULATION ===
        self._calculate_summary(multichain_data)
        
        return multichain_data
    
    async def _get_solana_data(self, min_value_usd: float) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Solana –∏–∑ Supabase"""
        try:
            from database_handler import supabase_handler
            
            if not supabase_handler or not supabase_handler.is_connected():
                print("‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª—ã...")
                return await self._get_solana_data_from_files(min_value_usd)
            
            print("üóÑÔ∏è –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Solana –∏–∑ Supabase...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—É–ª–æ–≤ Solana
            pools_result = supabase_handler.client.table('lp_pool_snapshots').select('*').eq(
                'network', 'solana'
            ).gte('created_at', '2025-07-28').order('created_at', desc=True).execute()
            
            # –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û –ü–û–°–õ–ï–î–ù–ò–ï –ø–æ–∑–∏—Ü–∏–∏ Solana (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
            positions_result = supabase_handler.client.table('lp_position_snapshots').select('*').not_.like(
                'position_mint', 'ethereum_%'
            ).not_.like(
                'position_mint', 'base_%'
            ).gte('created_at', '2025-07-28').order('created_at', desc=True).execute()
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–π position_mint
            unique_positions = {}
            for pos in positions_result.data:
                pos_mint = pos['position_mint']
                if pos_mint not in unique_positions:
                    unique_positions[pos_mint] = pos
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π  
            positions_result.data = list(unique_positions.values())
            
            if not pools_result.data:
                print("‚ö†Ô∏è –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö Solana –≤ Supabase")
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç formatter (–∫–∞–∫ –∏–∑ _parse_report_content)
            pools_data = []
            total_value = 0
            total_yield = 0
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–ª—è
            filtered_unique_positions = []
            for pos in unique_positions.values():
                if pos['position_value_usd'] >= min_value_usd:
                    # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–º
                    pos['position_value'] = pos['position_value_usd']  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    pos['pool_address'] = pos['pool_id']  # –î–ª—è Solana pool_id = pool_address
                    filtered_unique_positions.append(pos)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–ï —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –ø—É–ª–∞–º
            positions_by_pool = {}
            for pos in filtered_unique_positions:
                pool_id = pos['pool_id']
                if pool_id not in positions_by_pool:
                    positions_by_pool[pool_id] = []
                positions_by_pool[pool_id].append(pos)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–æ–≤ - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ pool_id
            unique_pools = {}
            for pool in pools_result.data:
                pool_id = pool['pool_id']
                if pool_id not in unique_pools:
                    unique_pools[pool_id] = pool

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—É–ª–æ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç _format_solana_section)
            for pool in unique_pools.values():
                pool_positions = positions_by_pool.get(pool['pool_id'], [])
                pool_value = sum(pos['position_value_usd'] for pos in pool_positions)
                pool_yield = sum(pos['fees_usd'] for pos in pool_positions)
                
                pool_info = {
                    'name': pool['pool_name'],
                    'tvl': f"${pool['tvl_usd']:,.0f}" if pool['tvl_usd'] else "N/A",
                    'volume_24h': f"${pool['volume_24h_usd']:,.0f}" if pool['volume_24h_usd'] else "N/A",
                    'positions_count': len(pool_positions),
                    'positions_value': pool_value,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—è
                    'pending_yield': pool_yield,    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—è  
                    'total_value': pool_value,      # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    'total_yield': pool_yield,      # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    'positions': pool_positions,
                    'token0_symbol': pool['token0_symbol'],
                    'token1_symbol': pool['token1_symbol'],
                    'pool_address': pool['pool_address'] or pool['pool_id'],  # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –ø—É–ª–∞
                    'pool_tvl_usd': pool['tvl_usd'],  # –î–æ–±–∞–≤–ª—è–µ–º TVL –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    'id': pool['pool_id']  # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å formatter
                }
                pools_data.append(pool_info)
                total_value += pool_value
                total_yield += pool_yield
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç ReportFormatter  
            all_positions = filtered_unique_positions  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            
            solana_data = {
                'total_value': total_value,
                'total_positions': len(all_positions),
                'total_yield': total_yield,
                'pools': pools_data,
                'positions': all_positions,
                'network': 'solana'
            }
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ Supabase: {len(pools_data)} –ø—É–ª–æ–≤, {len(filtered_unique_positions)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return solana_data
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Solana –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase: {e}")
            return await self._get_solana_data_from_files(min_value_usd)
    
    async def _get_solana_data_from_files(self, min_value_usd: float) -> Optional[Dict]:
        """Fallback: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Solana –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç Solana
            report_files = glob.glob('raydium_pool_report_*.txt')
            if not report_files:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤ Solana")
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            latest_report = max(report_files, key=os.path.getmtime)
            print(f"üìÑ Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª {latest_report}")
            
            # –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –æ—Ç—á–µ—Ç
            with open(latest_report, 'r', encoding='utf-8') as f:
                report_content = f.read()
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            solana_parsed = self.formatter._parse_report_content(report_content)
            
            if solana_parsed:
                print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω Solana –æ—Ç—á–µ—Ç: {latest_report}")
                return solana_parsed
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å Solana –æ—Ç—á–µ—Ç")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Solana –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤: {e}")
            return None
    
    async def _get_ethereum_data(self, min_value_usd: float) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Ethereum –∏–∑ Supabase (–ø–æ–∑–∏—Ü–∏–∏ + –ø—É–ª—ã)"""
        try:
            from database_handler import supabase_handler
            
            if not supabase_handler or not supabase_handler.is_connected():
                print("‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ RPC...")
                return await self._get_ethereum_data_via_rpc(min_value_usd)
            
            print("üóÑÔ∏è –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Ethereum –∏–∑ Supabase...")
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ network, –∞ –Ω–µ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É position_mint
            positions_result = supabase_handler.client.table('lp_position_snapshots').select('*').eq(
                'network', 'ethereum'
            ).gte('position_value_usd', min_value_usd).order('created_at', desc=True).execute()
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–π position_mint
            unique_positions = {}
            for pos in positions_result.data:
                pos_mint = pos['position_mint']
                if pos_mint not in unique_positions:
                    unique_positions[pos_mint] = pos
            positions_result.data = list(unique_positions.values())
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—É–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            pools_result = supabase_handler.client.table('lp_pool_snapshots').select('*').eq(
                'network', 'ethereum'
            ).gte('created_at', '2025-07-28').order('created_at', desc=True).execute()
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ReportFormatter
            ethereum_positions = positions_result.data if positions_result.data else []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            ethereum_positions = [
                pos for pos in ethereum_positions 
                if not any(test_name in pos.get('pool_name', '') for test_name in ['TEST/', '/TEST', 'UNK/', '/UNK'])
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º RPC
            for pos in ethereum_positions:
                if 'total_value_usd' not in pos and 'position_value_usd' in pos:
                    pos['total_value_usd'] = pos['position_value_usd']
                if 'unclaimed_fees_usd' not in pos and 'fees_usd' in pos:
                    pos['unclaimed_fees_usd'] = pos['fees_usd']
                if 'token_id' not in pos and 'position_mint' in pos:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ ethereum_xxxxx —Ñ–æ—Ä–º–∞—Ç–∞
                    pos['token_id'] = pos['position_mint'].replace('ethereum_', '')
                
                # –ü–æ–ª—É—á–∞–µ–º TVL –ø—É–ª–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—É–ª–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫)
                try:
                    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ —Å—Ç—Ä–æ–≥–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ TVL
                    pool_data = supabase_handler.client.table('lp_pool_snapshots').select('tvl_usd, pool_name').eq(
                        'pool_address', pos['pool_id']  # –ò—â–µ–º –ø–æ pool_address
                    ).eq('network', 'ethereum').order('created_at', desc=True).limit(1).execute()
                    
                    if pool_data.data:
                        tvl_value = pool_data.data[0]['tvl_usd']
                        pos['pool_tvl_usd'] = tvl_value if tvl_value is not None else 0
                        if pos['pool_tvl_usd'] > 0:
                            print(f"   ‚úÖ ETH TVL –Ω–∞–π–¥–µ–Ω: {pos.get('pool_name', 'Unknown')} = ${pos['pool_tvl_usd']:,.0f}")
                        else:
                            print(f"   ‚ö†Ô∏è ETH TVL –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ä–∞–≤–µ–Ω 0: {pos.get('pool_name', 'Unknown')}")
                    else:
                        pos['pool_tvl_usd'] = 0
                        print(f"   ‚ùå ETH TVL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ lp_pool_snapshots: {pos.get('pool_name', 'Unknown')}")
                        print(f"       –ò—â–µ–º pool_address: {pos['pool_id']}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TVL –¥–ª—è Ethereum –ø—É–ª–∞ {pos.get('pool_id', 'Unknown')}: {e}")
                    pos['pool_tvl_usd'] = 0
                
                # ‚ùå –£–ë–ò–†–ê–ï–ú –í–´–ß–ò–°–õ–ï–ù–ò–Ø –ò–ó –û–¢–ß–ï–¢–ê - –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º–∏ –≤ Supabase!
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º fees_usd –∫–∞–∫ –µ—Å—Ç—å –∏–∑ Supabase
                if 'unclaimed_fees_usd' not in pos and 'fees_usd' in pos:
                    pos['unclaimed_fees_usd'] = pos['fees_usd']
            
            print(f"‚úÖ Ethereum –∏–∑ Supabase: {len(ethereum_positions)} –ø–æ–∑–∏—Ü–∏–π, {len(pools_result.data if pools_result.data else [])} –ø—É–ª–æ–≤")
            return ethereum_positions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Ethereum –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase: {e}")
            return await self._get_ethereum_data_via_rpc(min_value_usd)
    
    async def _get_ethereum_data_via_rpc(self, min_value_usd: float) -> List[Dict]:
        """Fallback: –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ Ethereum —á–µ—Ä–µ–∑ unified_positions_analyzer"""
        try:
            ethereum_positions = []
            
            for wallet in self.wallets["ethereum"]:
                positions = await get_uniswap_positions(
                    wallet, 
                    network="ethereum",
                    min_value_usd=min_value_usd
                )
                ethereum_positions.extend(positions)
            
            return ethereum_positions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Ethereum –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ RPC: {e}")
            return []
    
    async def _get_base_data(self, min_value_usd: float) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Base –∏–∑ Supabase (–ø–æ–∑–∏—Ü–∏–∏ + –ø—É–ª—ã)"""
        try:
            from database_handler import supabase_handler
            
            if not supabase_handler or not supabase_handler.is_connected():
                print("‚ö†Ô∏è Supabase –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ RPC...")
                return await self._get_base_data_via_rpc(min_value_usd)
            
            print("üóÑÔ∏è –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Base –∏–∑ Supabase...")
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ network, –∞ –Ω–µ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É position_mint
            positions_result = supabase_handler.client.table('lp_position_snapshots').select('*').eq(
                'network', 'base'
            ).gte('position_value_usd', min_value_usd).order('created_at', desc=True).execute()
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–π position_mint
            unique_positions = {}
            for pos in positions_result.data:
                pos_mint = pos['position_mint']
                if pos_mint not in unique_positions:
                    unique_positions[pos_mint] = pos
            positions_result.data = list(unique_positions.values())
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—É–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            pools_result = supabase_handler.client.table('lp_pool_snapshots').select('*').eq(
                'network', 'base'
            ).gte('created_at', '2025-07-28').order('created_at', desc=True).execute()
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ReportFormatter
            base_positions = positions_result.data if positions_result.data else []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            base_positions = [
                pos for pos in base_positions 
                if not any(test_name in pos.get('pool_name', '') for test_name in ['TEST/', '/TEST', 'UNK/', '/UNK'])
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º RPC
            for pos in base_positions:
                if 'total_value_usd' not in pos and 'position_value_usd' in pos:
                    pos['total_value_usd'] = pos['position_value_usd']
                if 'unclaimed_fees_usd' not in pos and 'fees_usd' in pos:
                    pos['unclaimed_fees_usd'] = pos['fees_usd']
                if 'token_id' not in pos and 'position_mint' in pos:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ base_xxxxx —Ñ–æ—Ä–º–∞—Ç–∞
                    pos['token_id'] = pos['position_mint'].replace('base_', '')
                
                # –ü–æ–ª—É—á–∞–µ–º TVL –ø—É–ª–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—É–ª–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–∏—Å–∫)
                try:
                    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ —Å—Ç—Ä–æ–≥–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ TVL
                    pool_data = supabase_handler.client.table('lp_pool_snapshots').select('tvl_usd, pool_name').eq(
                        'pool_address', pos['pool_id']  # –ò—â–µ–º –ø–æ pool_address
                    ).eq('network', 'base').order('created_at', desc=True).limit(1).execute()
                    
                    if pool_data.data:
                        tvl_value = pool_data.data[0]['tvl_usd']
                        pos['pool_tvl_usd'] = tvl_value if tvl_value is not None else 0
                        if pos['pool_tvl_usd'] > 0:
                            print(f"   ‚úÖ BASE TVL –Ω–∞–π–¥–µ–Ω: {pos.get('pool_name', 'Unknown')} = ${pos['pool_tvl_usd']:,.0f}")
                        else:
                            print(f"   ‚ö†Ô∏è BASE TVL –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ä–∞–≤–µ–Ω 0: {pos.get('pool_name', 'Unknown')}")
                    else:
                        pos['pool_tvl_usd'] = 0
                        print(f"   ‚ùå BASE TVL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ lp_pool_snapshots: {pos.get('pool_name', 'Unknown')}")
                        print(f"       –ò—â–µ–º pool_address: {pos['pool_id']}")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TVL –¥–ª—è Base –ø—É–ª–∞ {pos.get('pool_id', 'Unknown')}: {e}")
                    pos['pool_tvl_usd'] = 0
                
                # ‚ùå –£–ë–ò–†–ê–ï–ú –í–´–ß–ò–°–õ–ï–ù–ò–Ø –ò–ó –û–¢–ß–ï–¢–ê - –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º–∏ –≤ Supabase!
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º fees_usd –∫–∞–∫ –µ—Å—Ç—å –∏–∑ Supabase
                if 'unclaimed_fees_usd' not in pos and 'fees_usd' in pos:
                    pos['unclaimed_fees_usd'] = pos['fees_usd']
            
            print(f"‚úÖ Base –∏–∑ Supabase: {len(base_positions)} –ø–æ–∑–∏—Ü–∏–π, {len(pools_result.data if pools_result.data else [])} –ø—É–ª–æ–≤")
            return base_positions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Base –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase: {e}")
            return await self._get_base_data_via_rpc(min_value_usd)
    
    async def _get_base_data_via_rpc(self, min_value_usd: float) -> List[Dict]:
        """Fallback: –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ Base —á–µ—Ä–µ–∑ unified_positions_analyzer"""
        try:
            base_positions = []
            
            for wallet in self.wallets["base"]:
                try:
                    positions = await get_uniswap_positions(
                        wallet, 
                        network="base",
                        min_value_usd=min_value_usd
                    )
                    base_positions.extend(positions)
                except Exception as e:
                    print(f"‚ö†Ô∏è Base RPC –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Base –ø–æ–∑–∏—Ü–∏–π
                    break
            
            return base_positions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Base –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ RPC: {e}")
            return []
    
    def _calculate_summary(self, multichain_data: Dict[str, Any]) -> None:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        
        total_value = 0
        total_positions = 0
        
        # Solana (—Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç —Å total_value –∏ total_positions)
        solana_data = multichain_data.get('solana')
        if solana_data:
            if isinstance(solana_data, dict):
                total_value += solana_data.get('total_value', 0)
                total_positions += solana_data.get('total_positions', 0)
            else:
                # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ñ–∞–π–ª—ã)
                total_value += solana_data.get('total_value', 0) if hasattr(solana_data, 'get') else 0
                total_positions += solana_data.get('total_positions', 0) if hasattr(solana_data, 'get') else 0
        
        # Ethereum (—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π)
        ethereum_positions = multichain_data.get('ethereum', [])
        for position in ethereum_positions:
            total_value += position.get('total_value_usd', position.get('position_value_usd', 0))
            total_positions += 1
        
        # Base (—Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π)
        base_positions = multichain_data.get('base', [])
        for position in base_positions:
            total_value += position.get('total_value_usd', position.get('position_value_usd', 0))
            total_positions += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º summary
        multichain_data['summary']['total_value_usd'] = total_value
        multichain_data['summary']['total_positions'] = total_positions
        
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:,.2f}")
        print(f"   üìç –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {total_positions}")
        print(f"   üåê –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–µ–π: {multichain_data['summary']['networks_active']}")
    
    async def _send_report_to_telegram(self, report_parts: List[str]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Telegram –ø–æ —á–∞—Å—Ç—è–º"""
        try:
            if not report_parts:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                return False
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram ({len(report_parts)} —á–∞—Å—Ç–µ–π)...")
            
            success_count = 0
            for i, part in enumerate(report_parts, 1):
                print(f"   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞—Å—Ç–∏ {i}/{len(report_parts)}...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                if i > 1:
                    await asyncio.sleep(1)
                
                success = await self.telegram.send_message(part)
                if success:
                    success_count += 1
                    print(f"   ‚úÖ –ß–∞—Å—Ç—å {i} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i}")
                    break
            
            if success_count == len(report_parts):
                print("‚úÖ –í—Å–µ —á–∞—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ {success_count}/{len(report_parts)} —á–∞—Å—Ç–µ–π")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    print("üåê MULTI-CHAIN REPORT GENERATOR")
    print("=" * 50)
    
    generator = MultiChainReportGenerator()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    success = await generator.generate_multichain_report(min_value_usd=100.0)
    
    if success:
        print("\nüéâ –ú—É–ª—å—Ç–∏-—á–µ–π–Ω –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–ª—å—Ç–∏-—á–µ–π–Ω –æ—Ç—á–µ—Ç–∞")
    
    return success

if __name__ == "__main__":
    asyncio.run(main()) 