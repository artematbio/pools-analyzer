#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database_handler import SupabaseHandler
from datetime import datetime, timedelta

def debug_view_values():
    """–ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ bio_dao_lp_support view"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê VIEW bio_dao_lp_support")
    print("=====================================")
    
    supabase_handler = SupabaseHandler()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º view –Ω–∞–ø—Ä—è–º—É—é
    print("\n1Ô∏è‚É£ –¢–ï–ö–£–©–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø –í VIEW (–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ > $100K):")
    view_result = supabase_handler.client.table('bio_dao_lp_support').select('*').execute()
    
    if view_result.data:
        problematic_found = False
        for row in view_result.data:
            pool_name = row.get('pool_name', 'N/A')
            our_pos = float(row.get('our_position_value_usd', 0))
            target = float(row.get('target_lp_value_usd', 0))
            gap = float(row.get('lp_gap_usd', 0))
            
            if our_pos > 100000:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ > $100K
                problematic_found = True
                print(f"   üö® –ü–†–û–ë–õ–ï–ú–ê: {pool_name}")
                print(f"      Our Position: ${our_pos:,.2f}")
                print(f"      Target: ${target:,.2f}")
                print(f"      Gap: ${gap:,.2f}")
                print()
        
        if not problematic_found:
            print("   ‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
            for i, row in enumerate(view_result.data[:3]):
                pool_name = row.get('pool_name', 'N/A')
                our_pos = float(row.get('our_position_value_usd', 0))
                print(f"   üìä {pool_name}: ${our_pos:,.2f}")
    else:
        print("   ‚ùå View –ø—É—Å—Ç–æ–π!")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º dao_pool_snapshots –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
    print("\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê dao_pool_snapshots (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏):")
    
    two_days_ago = (datetime.now() - timedelta(days=2)).strftime('%Y-%m-%d')
    dao_result = supabase_handler.client.table('dao_pool_snapshots').select(
        'pool_name, network, our_position_value_usd, created_at'
    ).gte('created_at', two_days_ago).order('created_at', desc=True).execute()
    
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(dao_result.data)} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è")
    
    problematic_dao = False
    for row in dao_result.data:
        pool_name = row.get('pool_name', 'N/A')
        our_pos = float(row.get('our_position_value_usd', 0))
        network = row.get('network', 'N/A')
        created = row.get('created_at', 'N/A')
        
        if our_pos > 100000:  # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ > $100K
            problematic_dao = True
            print(f"   üö® –ò–°–¢–û–ß–ù–ò–ö –ü–†–û–ë–õ–ï–ú–´: {pool_name} ({network})")
            print(f"      Our Position: ${our_pos:,.2f}")
            print(f"      –°–æ–∑–¥–∞–Ω–æ: {created}")
            print()
    
    if not problematic_dao:
        print("   ‚úÖ –í dao_pool_snapshots –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º lp_position_snapshots –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    print("\n3Ô∏è‚É£ –†–ï–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –í lp_position_snapshots:")
    
    positions_result = supabase_handler.client.table('lp_position_snapshots').select(
        'pool_name, network, position_value_usd, created_at'
    ).gte('created_at', two_days_ago).order('created_at', desc=True).execute()
    
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ {len(positions_result.data)} –ø–æ–∑–∏—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—É–ª–∞–º –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    pool_totals = {}
    for pos in positions_result.data:
        pool_name = pos.get('pool_name', 'N/A')
        network = pos.get('network', 'N/A')
        value = float(pos.get('position_value_usd', 0))
        
        key = f"{pool_name}_{network}"
        if key not in pool_totals:
            pool_totals[key] = {'total': 0, 'count': 0, 'pool_name': pool_name, 'network': network}
        
        pool_totals[key]['total'] += value
        pool_totals[key]['count'] += 1
    
    print("\n   üìã –†–ï–ê–õ–¨–ù–´–ï –°–£–ú–ú–´ –ü–û –ü–£–õ–ê–ú:")
    for key, data in sorted(pool_totals.items(), key=lambda x: x[1]['total'], reverse=True):
        if data['total'] > 1000:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            print(f"      üí∞ {data['pool_name']} ({data['network']}): ${data['total']:,.2f} ({data['count']} –ø–æ–∑.)")
    
    # 4. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_portfolio = sum(data['total'] for data in pool_totals.values())
    print(f"\n   üìä –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨ –ü–û–†–¢–§–ï–õ–Ø: ${total_portfolio:,.2f}")

if __name__ == "__main__":
    debug_view_values()
