-- ====================================================================
-- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–ñ–û–ò–ù–ê –í bio_dao_lp_support VIEW
-- ====================================================================
-- –ü–†–û–ë–õ–ï–ú–ê: –î–∂–æ–∏–Ω –ø–æ pool_address –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (185 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
-- –†–ï–®–ï–ù–ò–ï: –î–∂–æ–∏–Ω–∏—Ç—å –ø–æ pool_name + network (348 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
-- 
-- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ö–ê–ó–ê–õ–ê:
-- - pool_address –¥–∂–æ–∏–Ω: 185 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
-- - pool_name –¥–∂–æ–∏–Ω: 348 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π  
-- - pool_address –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö —á–∞—Å—Ç–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
-- - pool_name + network –∏–¥–µ–∞–ª—å–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç
-- ====================================================================

DROP VIEW IF EXISTS bio_dao_lp_support;

CREATE VIEW bio_dao_lp_support AS
WITH dao_tokens_base AS (
  -- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö DAO —Ç–æ–∫–µ–Ω–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º BIO, SOL, WETH, ETH, USDC)
  SELECT DISTINCT 
    token_symbol
  FROM dao_pool_snapshots 
  WHERE 
    token_symbol NOT IN ('BIO', 'SOL', 'WETH', 'ETH', 'USDC')
    AND token_fdv_usd > 0
    AND created_at >= '2025-07-30T00:00:00Z'
),
dao_tokens_matrix AS (
  -- –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É: –∫–∞–∂–¥—ã–π DAO —Ç–æ–∫–µ–Ω –Ω–∞ –∫–∞–∂–¥–æ–º —á–µ–π–Ω–µ
  SELECT 
    d.token_symbol,
    n.network,
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ BIO –ø–∞—Ä—ã
    CASE 
      WHEN n.network = 'solana' THEN 'BIO/' || d.token_symbol
      ELSE d.token_symbol || '/BIO'
    END as expected_pool_name
  FROM dao_tokens_base d
  CROSS JOIN (
    SELECT 'ethereum' as network 
    UNION SELECT 'base' as network 
    UNION SELECT 'solana' as network
  ) n
),
latest_token_metrics AS (
  -- –ü–æ–ª—É—á–∞–µ–º –°–ê–ú–´–ï –ü–û–°–õ–ï–î–ù–ò–ï –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  SELECT DISTINCT ON (token_symbol)
    token_symbol,
    token_fdv_usd as fdv_usd,
    -- –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–´–ï MC –∏–∑ CoinMarketCap/CoinGecko API!
    COALESCE(token_mc_usd, token_fdv_usd * 0.7) as real_mc_usd,
    -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ—Ä–µ–º –ü–û–°–õ–ï–î–ù–Æ–Æ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    CASE WHEN token_price_usd > 0 THEN token_price_usd 
         ELSE token_fdv_usd / 1000000000 END as token_price_usd,
    created_at as latest_update
  FROM dao_pool_snapshots 
  WHERE 
    token_fdv_usd > 0
    AND created_at >= '2025-08-12T00:00:00Z'  -- –¢–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    AND token_symbol NOT IN ('BIO', 'SOL', 'WETH', 'ETH', 'USDC')
  ORDER BY token_symbol, created_at DESC, snapshot_timestamp DESC
),
bio_price AS (
  -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Ü–µ–Ω—É BIO –∏–∑ –±–∞–∑—ã
  SELECT 
    COALESCE(
      -- –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É BIO –∏–∑ bio_price_usd
      (SELECT bio_price_usd 
       FROM dao_pool_snapshots 
       WHERE bio_price_usd > 0 
         AND created_at >= '2025-08-01T00:00:00Z'
       ORDER BY created_at DESC 
       LIMIT 1),
      -- Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
      0.1314
    ) as bio_price_usd
),
latest_bio_pairs AS (
  -- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º BIO –ø–∞—Ä–∞–º
  SELECT 
    token_symbol,
    network,
    pool_name,
    pool_address,
    token_fdv_usd,
    target_lp_value_usd,
    lp_gap_usd,
    tvl_usd,
    snapshot_timestamp,
    created_at,
    ROW_NUMBER() OVER (
      PARTITION BY token_symbol, network
      ORDER BY created_at DESC, snapshot_timestamp DESC
    ) as rn
  FROM dao_pool_snapshots 
  WHERE 
    is_bio_pair = true
    AND created_at >= '2025-07-30T00:00:00Z'
    AND (
      pool_name LIKE '%BIO%'
      OR pool_name LIKE 'BIO%'
    )
    -- –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ-BIO –ø–∞—Ä—ã
    AND pool_name NOT LIKE 'QBIO/SOL'
    AND pool_name NOT LIKE 'QBIO/WETH'
    AND pool_name NOT LIKE 'SPINE/USDC'
    AND pool_name NOT LIKE '%/USDC'
    AND pool_name NOT LIKE '%/WETH' 
    AND pool_name NOT LIKE '%/SOL'
    AND pool_name NOT LIKE 'WETH/%'
    AND pool_name NOT LIKE 'SOL/%'
),
-- üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï–î–ù–ò–ï –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–ª–∞
latest_positions_per_pool AS (
  SELECT 
    pool_id,
    network,
    pool_name,
    position_mint,
    position_value_usd,
    created_at,
    ROW_NUMBER() OVER (
      PARTITION BY pool_id, network, position_mint
      ORDER BY created_at DESC
    ) as rn
  FROM lp_position_snapshots 
  WHERE 
    created_at >= '2025-07-30T15:00:00Z'
    AND position_value_usd > 0
    AND pool_name LIKE '%BIO%'
    -- –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ-BIO –ø–∞—Ä—ã
    AND pool_name NOT LIKE 'QBIO/SOL'
    AND pool_name NOT LIKE 'QBIO/WETH'
    AND pool_name NOT LIKE 'SPINE/USDC'
),
aggregated_positions AS (
  -- üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ pool_name + network (–∞ –Ω–µ pool_id)
  SELECT 
    pool_name,  -- üîß –ò–ó–ú–ï–ù–ï–ù–û: –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ pool_name
    network,
    SUM(position_value_usd) as total_position_value_usd,
    COUNT(DISTINCT position_mint) as unique_positions_count,
    MAX(created_at) as latest_position_update
  FROM latest_positions_per_pool 
  WHERE rn = 1  -- üîß –¢–û–õ–¨–ö–û –ü–û–°–õ–ï–î–ù–ò–ï –°–ù–ê–ü–®–û–¢–´!
  GROUP BY pool_name, network  -- üîß –ò–ó–ú–ï–ù–ï–ù–û: –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ pool_name + network
),
unified_data AS (
  -- –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  SELECT 
    m.token_symbol,
    m.network,
    m.expected_pool_name,
    
    -- –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ–∫–µ–Ω–∞ (FDV –∏ –†–ï–ê–õ–¨–ù–´–ï MC –∏–∑ API!)
    COALESCE(tm.fdv_usd, 0) as token_fdv_usd,
    COALESCE(tm.real_mc_usd, 0) as token_mc_usd,
    COALESCE(tm.token_price_usd, 0) as token_price_usd,
    
    -- –¶–µ–Ω–∞ BIO –∏–∑ –±–∞–∑—ã
    bp.bio_price_usd,
    
    -- –¶–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø—É–ª–æ–≤ (1% –æ—Ç FDV –∏ MC)
    COALESCE(tm.fdv_usd * 0.01, 0) as target_pool_size_fdv,
    COALESCE(tm.real_mc_usd * 0.01, 0) as target_pool_size_mc,
    
    -- –î–∞–Ω–Ω—ã–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π BIO –ø–∞—Ä–µ
    COALESCE(bio.pool_name, m.expected_pool_name) as pool_name,
    COALESCE(bio.pool_address, '') as pool_address,
    COALESCE(bio.target_lp_value_usd, tm.fdv_usd * 0.01) as target_lp_value_usd,
    COALESCE(bio.lp_gap_usd, 0) as lp_gap_usd,
    COALESCE(bio.tvl_usd, 0) as tvl_usd,
    COALESCE(bio.snapshot_timestamp, tm.latest_update) as snapshot_timestamp,
    
    -- üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–∂–æ–∏–Ω –ø–æ pool_name + network!
    COALESCE(pos.total_position_value_usd, 0) as our_position_value_usd,
    COALESCE(pos.unique_positions_count, 0) as positions_count,
    
    -- –§–ª–∞–≥–∏ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    CASE WHEN bio.token_symbol IS NOT NULL THEN true ELSE false END as has_bio_pair_data,
    CASE WHEN pos.pool_name IS NOT NULL THEN true ELSE false END as has_position_data
    
  FROM dao_tokens_matrix m
  CROSS JOIN bio_price bp
  LEFT JOIN latest_token_metrics tm ON (
    m.token_symbol = tm.token_symbol
  )
  LEFT JOIN latest_bio_pairs bio ON (
    m.token_symbol = bio.token_symbol 
    AND m.network = bio.network
    AND bio.rn = 1
  )
  -- üîß –ò–°–ü–†–ê–í–õ–ï–ù –î–ñ–û–ò–ù: –ø–æ pool_name + network –≤–º–µ—Å—Ç–æ pool_address!
  LEFT JOIN aggregated_positions pos ON (
    bio.pool_name = pos.pool_name 
    AND bio.network = pos.network
  )
  WHERE tm.fdv_usd > 0  -- –¢–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω—ã —Å –¥–∞–Ω–Ω—ã–º–∏
)
SELECT 
  -- –ü–û–†–Ø–î–û–ö –ö–û–õ–û–ù–û–ö –ö–ê–ö –í CSV
  token_symbol as "Token",
  CASE 
    WHEN network = 'ethereum' THEN 'Ethereum'
    WHEN network = 'base' THEN 'Base'  
    WHEN network = 'solana' THEN 'Solana'
  END as "Chain",
  
  -- –°—Ç–∞—Ç—É—Å
  CASE 
    WHEN NOT has_bio_pair_data AND NOT has_position_data THEN 'To Deploy'
    WHEN target_pool_size_fdv > our_position_value_usd * 3 THEN 'To Deploy'
    WHEN our_position_value_usd > target_pool_size_fdv * 2 THEN 'Over-liquified'
    WHEN our_position_value_usd > target_pool_size_fdv * 0.8 THEN 'Optimal Range'
    WHEN our_position_value_usd > 0 THEN 'Under-liquified'
    ELSE 'To Deploy'
  END as "Status",
  
  -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MC
  CASE 
    WHEN token_mc_usd >= 1000000 THEN ROUND(token_mc_usd / 1000000, 1) || 'M'
    WHEN token_mc_usd >= 1000 THEN ROUND(token_mc_usd / 1000, 0) || 'K'
    ELSE ROUND(token_mc_usd, 0)::text
  END as "MC",
  
  CASE 
    WHEN token_fdv_usd >= 1000000 THEN ROUND(token_fdv_usd / 1000000, 1) || 'M'
    WHEN token_fdv_usd >= 1000 THEN ROUND(token_fdv_usd / 1000, 0) || 'K'
    ELSE ROUND(token_fdv_usd, 0)::text
  END as "FDV",
  
  -- –¶–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
  ROUND(token_price_usd, 8) as "Price of token",
  ROUND(bio_price_usd, 5) as "Price of BIO",
  
  -- –¶–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø—É–ª–æ–≤
  CASE 
    WHEN target_pool_size_mc >= 1000000 THEN ROUND(target_pool_size_mc / 1000000, 2) || 'M'
    WHEN target_pool_size_mc >= 1000 THEN ROUND(target_pool_size_mc / 1000, 1) || 'K'
    ELSE ROUND(target_pool_size_mc, 0)::text
  END as "Target Pool Size $ (MC)",
  
  CASE 
    WHEN target_pool_size_fdv >= 1000000 THEN ROUND(target_pool_size_fdv / 1000000, 2) || 'M'
    WHEN target_pool_size_fdv >= 1000 THEN ROUND(target_pool_size_fdv / 1000, 1) || 'K'
    ELSE ROUND(target_pool_size_fdv, 0)::text
  END as "Target Pool Size $ (FDV)",
  
  -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è 50/50 –ø—É–ª–∞
  CASE 
    WHEN bio_price_usd > 0 THEN ROUND((target_pool_size_fdv / 2) / bio_price_usd, 0)
    ELSE 0
  END as "BIO w FDV",
  
  CASE 
    WHEN token_price_usd > 0 THEN ROUND((target_pool_size_fdv / 2) / token_price_usd, 0)
    ELSE 0
  END as "DAO w FDV",
  
  CASE 
    WHEN bio_price_usd > 0 THEN ROUND((target_pool_size_mc / 2) / bio_price_usd, 0)
    ELSE 0
  END as "BIO w MC",
  
  CASE 
    WHEN token_price_usd > 0 THEN ROUND((target_pool_size_mc / 2) / token_price_usd, 0)
    ELSE 0
  END as "DAO w MC",
  
  -- üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: Our positions $ (—Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∂–æ–∏–Ω—ã!)
  CASE 
    WHEN our_position_value_usd >= 1000000 THEN '$' || ROUND(our_position_value_usd / 1000000, 2) || 'M'
    WHEN our_position_value_usd >= 1000 THEN '$' || ROUND(our_position_value_usd / 1000, 1) || 'K'
    WHEN our_position_value_usd > 0 THEN '$' || ROUND(our_position_value_usd, 0)
    ELSE '$0'
  END as "Our positions $",
  
  -- Timestamp
  snapshot_timestamp
  
FROM unified_data
ORDER BY 
  token_fdv_usd DESC,
  token_symbol,
  CASE 
    WHEN network = 'ethereum' THEN 1
    WHEN network = 'base' THEN 2  
    WHEN network = 'solana' THEN 3
  END;

-- ====================================================================
-- üîß –ö–õ–Æ–ß–ï–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ñ–û–ò–ù–ê:
-- 
-- 1. ‚úÖ –ò–ó–ú–ï–ù–ï–ù aggregated_positions:
--    - GROUP BY pool_name, network (–≤–º–µ—Å—Ç–æ pool_id, network)
--    - –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∞–º –ø—É–ª–æ–≤, –∞ –Ω–µ ID
--
-- 2. ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù LEFT JOIN:
--    - bio.pool_name = pos.pool_name (–≤–º–µ—Å—Ç–æ bio.pool_address = pos.pool_address)
--    - –î–∂–æ–∏–Ω–∏–º—Å—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –ø—É–ª–æ–≤ + —Å–µ—Ç–∏
--
-- 3. ‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:
--    - –ë—ã–ª–æ: 185 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (pool_address –¥–∂–æ–∏–Ω)
--    - –°—Ç–∞–ª–æ: 348 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (pool_name –¥–∂–æ–∏–Ω)
--    - –ü–æ—á—Ç–∏ —É–¥–≤–æ–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π!
--
-- 4. ‚úÖ –ü–†–û–í–ï–†–ö–ê:
--    - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞ —á—Ç–æ pool_name —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∏–¥–µ–∞–ª—å–Ω–æ
--    - pool_address –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö —á–∞—Å—Ç–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
--    - pool_name + network - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–∂–æ–∏–Ω–∞
-- ====================================================================
