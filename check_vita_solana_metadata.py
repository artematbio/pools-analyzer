#!/usr/bin/env python3

import requests
import json
import os
from datetime import datetime

def check_solana_token_metadata():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ VITA –Ω–∞ Solana —á–µ—Ä–µ–∑ Helius RPC"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–ê–î–ê–ù–ù–´–• VITA –ù–ê SOLANA")
    print("====================================")
    print()
    
    # VITA token mint –Ω–∞ Solana
    vita_mint = "vita3LfgKErA37DWA7W8RBks3c7Rym2hPFgizNRshBi"
    
    # Helius RPC endpoint (–∏–∑ env.example)
    helius_key = "your_helius_api_key"  # –ó–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ .env
    rpc_url = f"https://mainnet.helius-rpc.com/?api-key={helius_key}"
    
    print(f"üìã –¢–æ–∫–µ–Ω: {vita_mint}")
    print(f"üîó RPC: {rpc_url}")
    print()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º account info —Ç–æ–∫–µ–Ω–∞
    print("1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ mint account...")
    
    payload = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "getAccountInfo",
        "params": [
            vita_mint,
            {
                "encoding": "jsonParsed"
            }
        ]
    }
    
    try:
        response = requests.post(rpc_url, json=payload, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if 'result' in data and data['result']:
            account_info = data['result']['value']
            if account_info:
                parsed_data = account_info.get('data', {}).get('parsed', {})
                mint_info = parsed_data.get('info', {})
                
                print(f"   ‚úÖ Mint –Ω–∞–π–¥–µ–Ω!")
                print(f"   üìä Decimals: {mint_info.get('decimals', 'N/A')}")
                print(f"   üè™ Supply: {mint_info.get('supply', 'N/A')}")
                print(f"   üîê Mint Authority: {mint_info.get('mintAuthority', 'N/A')}")
                print(f"   ‚ùÑÔ∏è Freeze Authority: {mint_info.get('freezeAuthority', 'N/A')}")
                print()
            else:
                print("   ‚ùå Account –Ω–µ –Ω–∞–π–¥–µ–Ω")
                print()
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            print()
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        print()
    
    # 2. –ò—â–µ–º Metadata Account (Metaplex)
    print("2Ô∏è‚É£ –ò—â–µ–º Metaplex Metadata Account...")
    
    # –í—ã—á–∏—Å–ª—è–µ–º Metadata PDA –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ mint
    # Metaplex –∏—Å–ø–æ–ª—å–∑—É–µ—Ç seeds: ["metadata", metaplex_program_id, mint_account]
    metaplex_program_id = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
    
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∂–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏—é, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å PDA
    print(f"   üîç Metaplex Program: {metaplex_program_id}")
    print(f"   üìù –î–ª—è —Ç–æ–∫–µ–Ω–∞ {vita_mint}")
    print(f"   ‚ö†Ô∏è –ù—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å PDA –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    print()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ DAS API (Digital Asset Standard)
    print("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Helius DAS API...")
    
    das_payload = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "getAsset",
        "params": {
            "id": vita_mint
        }
    }
    
    try:
        response = requests.post(rpc_url, json=das_payload, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if 'result' in data and data['result']:
            asset_data = data['result']
            print(f"   ‚úÖ Asset –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ DAS!")
            print(f"   üìõ Name: {asset_data.get('content', {}).get('metadata', {}).get('name', 'N/A')}")
            print(f"   üè∑Ô∏è Symbol: {asset_data.get('content', {}).get('metadata', {}).get('symbol', 'N/A')}")
            print(f"   üìÑ Description: {asset_data.get('content', {}).get('metadata', {}).get('description', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º files/images
            files = asset_data.get('content', {}).get('files', [])
            if files:
                print(f"   üñºÔ∏è Image: {files[0].get('uri', 'N/A')}")
            else:
                print(f"   üñºÔ∏è Image: N/A")
            
            print()
            
            # –ü–æ–ª–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            print("üìä –ü–û–õ–ù–´–ï –ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
            print(json.dumps(asset_data, indent=2, ensure_ascii=False))
            
        else:
            print("   ‚ùå Asset –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ DAS")
            error = data.get('error', {})
            print(f"   ‚ùó –û—à–∏–±–∫–∞: {error}")
            print()
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ DAS –∑–∞–ø—Ä–æ—Å–∞: {e}")
        print()
    
    # 4. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üéØ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("====================")
    print()
    print("üìã –°—Ç–∞—Ç—É—Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö VITA –Ω–∞ Solana:")
    print("   ‚Ä¢ Mint account: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    print("   ‚Ä¢ Metaplex metadata: –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞")
    print("   ‚Ä¢ DAS compatibility: –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞")
    print()
    print("üîß –ü–õ–ê–ù –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ú–ï–¢–ê–î–ê–ù–ù–´–•:")
    print("1. –°–æ–∑–¥–∞—Ç—å JSON —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏")
    print("2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ IPFS/Arweave")
    print("3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CreateMetadataV2 instruction")
    print("4. –£–∫–∞–∑–∞—Ç—å URI –Ω–∞ JSON —Ñ–∞–π–ª")
    print()

if __name__ == "__main__":
    check_solana_token_metadata()
