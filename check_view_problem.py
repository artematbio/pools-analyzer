#!/usr/bin/env python3
from database_handler import SupabaseHandler

def check_view_problem():
    supabase_handler = SupabaseHandler()
    
    if not supabase_handler.is_connected():
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase")
        return
    
    print('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ')
    print('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º view bio_dao_lp_support...')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç view
    result = supabase_handler.client.table('bio_dao_lp_support').select('*').execute()
    
    print(f'–ù–∞–π–¥–µ–Ω–æ {len(result.data)} –∑–∞–ø–∏—Å–µ–π –≤ view')
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–æ–∫–µ–Ω–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ FDV
    tokens = {}
    for record in result.data:
        token = record['token_symbol']
        network = record['network_display'] 
        fdv = record['token_fdv_usd']
        timestamp = record['snapshot_timestamp'][:16]
        
        if token not in tokens:
            tokens[token] = {}
        
        tokens[token][network] = {'fdv': fdv, 'timestamp': timestamp}
    
    print('\nüîç FDV –≤ view bio_dao_lp_support:')
    problem_found = False
    
    for token, networks in sorted(tokens.items()):
        if len(networks) > 1:  # –¢–æ–∫–µ–Ω—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ç—è—Ö
            print(f'{token}:')
            fdv_values = []
            for network, data in networks.items():
                fdv_val = data['fdv']
                fdv_values.append(fdv_val)
                print(f'  {network}: FDV ${fdv_val:,.0f} ({data["timestamp"]})')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ FDV
            if len(set(fdv_values)) > 1:
                print(f'  ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –†–∞–∑–Ω—ã–µ FDV –¥–ª—è {token}!')
                problem_found = True
            else:
                print(f'  ‚úÖ OK: –ï–¥–∏–Ω—ã–π FDV –¥–ª—è {token}')
            print()
    
    if problem_found:
        print('\nüí° –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å view bio_dao_lp_support')
        print('View –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º FDV')
        
        # –ü–æ–∫–∞–∂–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        print('\nüìù –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ view –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:')
        print('''
CREATE OR REPLACE VIEW bio_dao_lp_support AS
WITH latest_snapshots AS (
  SELECT 
    token_symbol,
    network,
    pool_name,
    token_fdv_usd,
    target_lp_value_usd,
    our_position_value_usd,
    lp_gap_usd,
    tvl_usd,
    snapshot_timestamp,
    is_bio_pair,
    ROW_NUMBER() OVER (
      PARTITION BY token_symbol, network, pool_name
      ORDER BY snapshot_timestamp DESC  -- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
    ) as rn
  FROM dao_pool_snapshots 
  WHERE 
    token_fdv_usd > 0 
    AND is_bio_pair = true  -- –¢–æ–ª—å–∫–æ BIO –ø–∞—Ä—ã
)
SELECT 
  token_symbol,
  CASE 
    WHEN network = 'ethereum' THEN 'Ethereum'
    WHEN network = 'base' THEN 'Base'  
    WHEN network = 'solana' THEN 'Solana'
    ELSE network
  END as network_display,
  pool_name,
  CASE 
    WHEN target_lp_value_usd > our_position_value_usd * 2 THEN 'Need to Create'
    WHEN our_position_value_usd > target_lp_value_usd * 1.5 THEN 'Excessive Liquidity (Large)'
    ELSE 'Optimal Range'
  END as bio_pair_status,
  token_fdv_usd,
  target_lp_value_usd,
  our_position_value_usd,
  lp_gap_usd,
  tvl_usd,
  snapshot_timestamp
FROM latest_snapshots 
WHERE rn = 1  -- –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
ORDER BY token_symbol, network;
        ''')

if __name__ == '__main__':
    check_view_problem() 