#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π –≤ Supabase
"""

from database_handler import supabase_handler

def cleanup_duplicates():
    print('üóëÔ∏è –í—ã–ø–æ–ª–Ω—è—é –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–µ–π –≤ Supabase...')
    
    try:
        # 1. –°–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å
        positions = supabase_handler.client.table('lp_position_snapshots').select('id, position_mint, network, created_at').eq('network', 'base').execute()
        print(f'üìä –ù–∞–π–¥–µ–Ω–æ {len(positions.data)} –ø–æ–∑–∏—Ü–∏–π Base –¥–æ –æ—á–∏—Å—Ç–∫–∏')
        
        pools = supabase_handler.client.table('lp_pool_snapshots').select('id, pool_address, network, tvl_usd, created_at').eq('network', 'base').execute()
        print(f'üìä –ù–∞–π–¥–µ–Ω–æ {len(pools.data)} –ø—É–ª–æ–≤ Base –¥–æ –æ—á–∏—Å—Ç–∫–∏')
        
        # 2. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø—É–ª–æ–≤ —Å TVL=0
        zero_tvl_pools = supabase_handler.client.table('lp_pool_snapshots').delete().eq('network', 'base').eq('tvl_usd', 0).execute()
        print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—É–ª–æ–≤ —Å TVL=0: {len(zero_tvl_pools.data) if zero_tvl_pools.data else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}')
        
        # 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥—É–±–ª–∏ –ø–æ–∑–∏—Ü–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ position_mint
        position_groups = {}
        for pos in positions.data:
            mint = pos['position_mint']
            if mint not in position_groups:
                position_groups[mint] = []
            position_groups[mint].append(pos)
        
        deleted_positions = 0
        for mint, pos_list in position_groups.items():
            if len(pos_list) > 1:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
                pos_list.sort(key=lambda x: x['created_at'], reverse=True)
                latest = pos_list[0]
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                for pos in pos_list[1:]:
                    supabase_handler.client.table('lp_position_snapshots').delete().eq('id', pos['id']).execute()
                    deleted_positions += 1
                    print(f'   –£–¥–∞–ª–µ–Ω –¥—É–±–ª—å –ø–æ–∑–∏—Ü–∏–∏ {mint}: id={pos["id"]}')
        
        print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–µ–π –ø–æ–∑–∏—Ü–∏–π: {deleted_positions}')
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pools_after = supabase_handler.client.table('lp_pool_snapshots').select('id, pool_address, network, tvl_usd').eq('network', 'base').execute()
        print(f'üìä –û—Å—Ç–∞–ª–æ—Å—å {len(pools_after.data)} –ø—É–ª–æ–≤ Base –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏')
        
        positions_after = supabase_handler.client.table('lp_position_snapshots').select('id, position_mint, network').eq('network', 'base').execute()
        print(f'üìä –û—Å—Ç–∞–ª–æ—Å—å {len(positions_after.data)} –ø–æ–∑–∏—Ü–∏–π Base –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏')
        
        print('\nüèä –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ü–£–õ–´ BASE:')
        for pool in pools_after.data:
            print(f'   Pool {pool.get("pool_address", "unknown")[:10]}...: TVL=${pool.get("tvl_usd", 0):,.0f}')
        
        print('\nüìç –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ü–û–ó–ò–¶–ò–ò BASE:')
        for pos in positions_after.data:
            print(f'   Position {pos.get("position_mint", "unknown")}')
        
        print('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    cleanup_duplicates()
