
// –¢–û–ö–ï–ù EXTENSIONS –ü–û–î–•–û–î (–ë–ï–ó MINT AUTHORITY)
// =============================================

import {
  TOKEN_2022_PROGRAM_ID,
  createInitializeMintInstruction,
  createInitializeMetadataPointerInstruction,
  createInitializeInstruction,
  createUpdateFieldInstruction,
  getMintLen,
  ExtensionType,
} from '@solana/spl-token';
import { PublicKey, SystemProgram, Transaction } from '@solana/web3.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VITA —Ç–æ–∫–µ–Ω–∞
const VITA_MINT = new PublicKey('vita3LfgKErA37DWA7W8RBks3c7Rym2hPFgizNRshBi');

// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
const tokenMetadata = {
  name: 'VitaDAO',
  symbol: 'VITA',
  uri: 'https://ipfs.io/ipfs/your-metadata-hash',
  additionalMetadata: [
    ['description', 'VitaDAO token for decentralized longevity research funding'],
    ['image', 'https://static.alchemyapi.io/images/assets/19214.png'],
    ['external_url', 'https://vitadao.org'],
    ['category', 'fungible'],
    ['use_case', 'longevity_research']
  ]
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–æ–∫–µ–Ω—É
async function addMetadataToExistingToken(connection, payer) {
  try {
    console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É VITA —Ç–æ–∫–µ–Ω—É...');
    
    // ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å extensions –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–æ–∫–µ–Ω—É
    // Token Extensions —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    
    console.log('‚ùå –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï: Token Extensions –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–æ–∫–µ–Ω—É');
    console.log('   –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ mint account');
    console.log();
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å extensions
    console.log('üîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ VITA —Ç–æ–∫–µ–Ω–∞ —Å extensions');
    
    return false;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ù–û–í–û–ì–û —Ç–æ–∫–µ–Ω–∞ —Å extensions (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
async function createTokenWithExtensions(connection, payer) {
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π mint keypair
    const mint = Keypair.generate();
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä account —Å extensions
    const extensions = [ExtensionType.MetadataPointer];
    const mintLen = getMintLen(extensions);
    
    // –°–æ–∑–¥–∞–µ–º instruction –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è account
    const createAccountInstruction = SystemProgram.createAccount({
      fromPubkey: payer.publicKey,
      newAccountPubkey: mint.publicKey,
      space: mintLen,
      lamports: await connection.getMinimumBalanceForRentExemption(mintLen),
      programId: TOKEN_2022_PROGRAM_ID,
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Metadata Pointer extension
    const initializeMetadataPointerInstruction = 
      createInitializeMetadataPointerInstruction(
        mint.publicKey,
        payer.publicKey, // authority
        mint.publicKey,  // metadata address (same as mint)
        TOKEN_2022_PROGRAM_ID
      );
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º mint
    const initializeMintInstruction = createInitializeMintInstruction(
      mint.publicKey,
      9, // decimals
      payer.publicKey, // mint authority
      null, // freeze authority
      TOKEN_2022_PROGRAM_ID
    );
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const initializeMetadataInstruction = createInitializeInstruction({
      programId: TOKEN_2022_PROGRAM_ID,
      mint: mint.publicKey,
      metadata: mint.publicKey,
      name: tokenMetadata.name,
      symbol: tokenMetadata.symbol,
      uri: tokenMetadata.uri,
      mintAuthority: payer.publicKey,
      updateAuthority: payer.publicKey,
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const additionalInstructions = tokenMetadata.additionalMetadata.map(
      ([key, value]) => createUpdateFieldInstruction({
        programId: TOKEN_2022_PROGRAM_ID,
        metadata: mint.publicKey,
        updateAuthority: payer.publicKey,
        field: key,
        value: value,
      })
    );
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = new Transaction().add(
      createAccountInstruction,
      initializeMetadataPointerInstruction,
      initializeMintInstruction,
      initializeMetadataInstruction,
      ...additionalInstructions
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const signature = await connection.sendTransaction(transaction, [payer, mint]);
    await connection.confirmTransaction(signature);
    
    console.log('‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω!');
    console.log('üîó Mint:', mint.publicKey.toString());
    console.log('üìù Signature:', signature);
    
    return mint.publicKey;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
    return null;
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
// addMetadataToExistingToken(connection, wallet);
// createTokenWithExtensions(connection, wallet);
