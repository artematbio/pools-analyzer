#!/usr/bin/env python3
"""
Pool Transactions Collector for DAO pools
–°–æ–±–∏—Ä–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –∑–∞ 7-8 –∞–≤–≥—É—Å—Ç–∞ 2025 –Ω–∞ —Å—É–º–º—É –±–æ–ª—å—à–µ $1000
"""

import json
import requests
import csv
import time
import datetime
import os
from typing import List, Dict, Any
from dataclasses import dataclass
from dotenv import load_dotenv

@dataclass
class Transaction:
    chain: str
    pool_address: str
    pool_name: str
    tx_hash: str
    sender_address: str
    amount_usd: float
    timestamp: int
    block_number: int

class PoolTransactionsCollector:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—É–ª–æ–≤
        with open('tokens_pools_config.json', 'r') as f:
            self.config = json.load(f)
        
        # –î–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: 7-8 –∞–≤–≥—É—Å—Ç–∞ 2025 - –¢–û–ß–ù–´–ï –î–ê–¢–´!
        self.start_timestamp = int(datetime.datetime(2025, 8, 7, 0, 0, 0).timestamp())
        self.end_timestamp = int(datetime.datetime(2025, 8, 9, 0, 0, 0).timestamp())
        
        print(f"üìÖ –¢–û–ß–ù–´–ô –ø–µ—Ä–∏–æ–¥: 7-8 –∞–≤–≥—É—Å—Ç–∞ 2025")
        print(f"   Timestamp –Ω–∞—á–∞–ª–∞: {self.start_timestamp}")
        print(f"   Timestamp –∫–æ–Ω—Ü–∞: {self.end_timestamp}")
        
        # RPC endpoints —Å API –∫–ª—é—á–∞–º–∏
        alchemy_key = os.getenv('ALCHEMY_API_KEY', '0l42UZmHRHWXBYMJ2QFcdEE-Glj20xqn')  # fallback from code
        helius_key = os.getenv('HELIUS_API_KEY', 'd4af7b72-f199-4d77-91a9-11d8512c5e42')  # fallback from code
        
        self.rpc_endpoints = {
            'ethereum': f'https://eth-mainnet.g.alchemy.com/v2/{alchemy_key}',
            'base': f'https://base-mainnet.g.alchemy.com/v2/{alchemy_key}',
            'solana': f'https://mainnet.helius-rpc.com/?api-key={helius_key}'
        }
        
        # –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—É–º–º–µ - —Å–æ–±–∏—Ä–∞–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!
        self.min_amount_usd = 0
        
        self.collected_transactions = []

    def get_solana_pool_transactions(self, pool_address: str, pool_name: str) -> List[Transaction]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—É–ª–∞ Solana —á–µ—Ä–µ–∑ Helius Enhanced API"""
        print(f"üîç –ü–æ–ª—É—á–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Solana –ø—É–ª–∞: {pool_name} ({pool_address})")
        
        transactions = []
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Helius Enhanced API
        helius_transactions = self.get_solana_transactions_helius(pool_address, pool_name)
        if helius_transactions:
            return helius_transactions
        
        # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π RPC
        return self.get_solana_transactions_rpc(pool_address, pool_name)
    
    def get_solana_transactions_helius(self, pool_address: str, pool_name: str) -> List[Transaction]:
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Helius Enhanced API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            # Helius Enhanced Transaction API
            helius_key = os.getenv('HELIUS_API_KEY', 'd4af7b72-f199-4d77-91a9-11d8512c5e42')
            url = f"https://api.helius.xyz/v0/addresses/{pool_address}/transactions"
            
            params = {
                'api-key': helius_key,
                'limit': 100  # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞
            }
            
            response = requests.get(url, params=params, timeout=30)
            data = response.json()
            
            if isinstance(data, dict) and 'error' in data:
                print(f"‚ùå Helius API –æ—à–∏–±–∫–∞: {data['error']}")
                return []
            
            transactions = []
            swap_count = 0
            
            for tx in data:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ SWAP —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                if tx.get('type') != 'SWAP':
                    continue
                    
                swap_count += 1
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                timestamp = tx.get('timestamp')
                if not timestamp or not (self.start_timestamp <= timestamp <= self.end_timestamp):
                    continue
                
                # –ü–∞—Ä—Å–∏–º swap –¥–∞–Ω–Ω—ã–µ
                parsed_tx = self.parse_helius_transaction(tx, pool_address, pool_name)
                if parsed_tx:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—É–º–º–µ
                    transactions.append(parsed_tx)
            
            print(f"‚úÖ Helius API: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {swap_count} swaps, –Ω–∞–π–¥–µ–Ω–æ {len(transactions)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            return transactions
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Helius API: {e}")
            return []
    
    def parse_helius_transaction(self, tx_data: dict, pool_address: str, pool_name: str) -> Transaction:
        """–ü–∞—Ä—Å–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ Helius API"""
        try:
            # Helius –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            signature = tx_data.get('signature', '')
            timestamp = tx_data.get('timestamp', 0)
            
            # –ë–µ—Ä–µ–º token transfers –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            token_transfers = tx_data.get('tokenTransfers', [])
            if not token_transfers:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ USD —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            amount_usd = self.calculate_swap_usd_value(token_transfers)
            
            # –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (feePayer)
            sender = tx_data.get('feePayer', '')
            
            return Transaction(
                chain='solana',
                pool_address=pool_address,
                pool_name=pool_name,
                tx_hash=signature,
                sender_address=sender,
                amount_usd=amount_usd,
                timestamp=timestamp,
                block_number=tx_data.get('slot', 0)
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Helius —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            return None
    
    def calculate_swap_usd_value(self, token_transfers: List[dict]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç USD —Å—Ç–æ–∏–º–æ—Å—Ç—å swap'–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ token transfers"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∏–∑ transfers
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
            
            # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ –∏—Ö –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã (–¥–ª—è –¥–µ–º–æ)
            token_prices = {
                'So11111111111111111111111111111111111111112': 200,  # SOL
                'bioJ9JTqW62MLz7UKHU69gtKhPpGi1BQhccj2kmSvUJ': 0.02,  # BIO –ø—Ä–∏–º–µ—Ä–Ω–æ
                'spinezMPKxkBpf4Q9xET2587fehM3LuKe4xoAoXtSjR': 0.008  # SPINE
            }
            
            max_usd_value = 0
            
            for transfer in token_transfers:
                mint = transfer.get('mint', '')
                amount = transfer.get('tokenAmount', 0)
                
                if mint in token_prices:
                    usd_value = amount * token_prices[mint]
                    max_usd_value = max(max_usd_value, usd_value)
            
            return max_usd_value
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ USD —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
            return 0

    def get_solana_transactions_rpc(self, pool_address: str, pool_name: str) -> List[Transaction]:
        """Fallback –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π Solana RPC"""
        print(f"üîÑ Fallback: –æ–±—ã—á–Ω—ã–π RPC –¥–ª—è {pool_name}")
        
        transactions = []
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        payload = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "getSignaturesForAddress",
            "params": [
                pool_address,
                {
                    "limit": 1000,
                }
            ]
        }
        
        try:
            response = requests.post(self.rpc_endpoints['solana'], json=payload, timeout=30)
            data = response.json()
            
            if 'result' not in data:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø—É–ª–∞ {pool_name}: {data}")
                return transactions
                
            signatures = data['result']
            print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(signatures)} –ø–æ–¥–ø–∏—Å–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            for sig_info in signatures:
                if sig_info.get('err'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    continue
                    
                block_time = sig_info.get('blockTime')
                if not block_time:
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                if not (self.start_timestamp <= block_time <= self.end_timestamp):
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                tx_details = self.get_solana_transaction_details(sig_info['signature'])
                if tx_details:
                    transactions.extend(tx_details)
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.1)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Solana: {e}")
            
        return transactions

    def get_solana_transaction_details(self, signature: str) -> List[Transaction]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Solana"""
        payload = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "getTransaction",
            "params": [
                signature,
                {
                    "encoding": "json",
                    "maxSupportedTransactionVersion": 0
                }
            ]
        }
        
        try:
            response = requests.post(self.rpc_endpoints['solana'], json=payload, timeout=10)
            data = response.json()
            
            if 'result' not in data or not data['result']:
                return []
                
            tx_data = data['result']
            # TODO: –ü–∞—Ä—Å–∏–Ω–≥ Solana —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–º–º –∏ –∞–¥—Ä–µ—Å–æ–≤
            # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Raydium CLMM —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            
            return []  # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {signature}: {e}")
            return []

    def get_ethereum_pool_transactions(self, pool_address: str, pool_name: str, chain: str) -> List[Transaction]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—É–ª–∞ Ethereum/Base —á–µ—Ä–µ–∑ RPC"""
        print(f"üîç –ü–æ–ª—É—á–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {chain} –ø—É–ª–∞: {pool_name} ({pool_address})")
        
        transactions = []
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ –±–ª–æ–∫–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            start_block = self.timestamp_to_block(self.start_timestamp, chain)
            end_block = self.timestamp_to_block(self.end_timestamp, chain)
            
            print(f"   üì¶ –î–∏–∞–ø–∞–∑–æ–Ω –±–ª–æ–∫–æ–≤: {start_block} - {end_block}")
            
            # Uniswap V3 Swap event signature
            # Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick)
            swap_topic = "0xc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67"
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π Swap
            logs_payload = {
                "jsonrpc": "2.0",
                "method": "eth_getLogs",
                "params": [{
                    "address": pool_address,
                    "topics": [swap_topic],
                    "fromBlock": hex(start_block),
                    "toBlock": hex(end_block)
                }],
                "id": 1
            }
            
            response = requests.post(self.rpc_endpoints[chain], json=logs_payload, timeout=30)
            data = response.json()
            
            if 'result' not in data:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {data}")
                return transactions
            
            logs = data['result']
            print(f"   üìã –ù–∞–π–¥–µ–Ω–æ {len(logs)} Swap —Å–æ–±—ã—Ç–∏–π")
            
            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
            for log in logs:
                parsed_tx = self.parse_ethereum_swap_log(log, pool_address, pool_name, chain)
                if parsed_tx:
                    transactions.append(parsed_tx)
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {pool_name}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π {chain}: {e}")
        
        return transactions
    
    def timestamp_to_block(self, timestamp: int, chain: str) -> int:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç timestamp –≤ –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)"""
        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∞
        block_times = {
            'ethereum': 12,  # ~12 —Å–µ–∫—É–Ω–¥ –Ω–∞ –±–ª–æ–∫
            'base': 2,       # ~2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –±–ª–æ–∫
        }
        
        current_time = int(time.time())
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
        try:
            block_payload = {
                "jsonrpc": "2.0",
                "method": "eth_blockNumber",
                "params": [],
                "id": 1
            }
            
            response = requests.post(self.rpc_endpoints[chain], json=block_payload, timeout=10)
            data = response.json()
            
            if 'result' in data:
                current_block = int(data['result'], 16)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –±–ª–æ–∫ –¥–ª—è timestamp
                time_diff = current_time - timestamp
                block_diff = time_diff // block_times.get(chain, 12)
                target_block = max(current_block - block_diff, 0)
                
                return target_block
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –±–ª–æ–∫–∞: {e}")
        
        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è –∞–≤–≥—É—Å—Ç–∞ 2025
        if chain == 'ethereum':
            return 20650000  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∞–≤–≥—É—Å—Ç–∞ 2025
        elif chain == 'base':
            return 34250000  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –∞–≤–≥—É—Å—Ç–∞ 2025
        
        return 0
    
    def parse_ethereum_swap_log(self, log: dict, pool_address: str, pool_name: str, chain: str) -> Transaction:
        """–ü–∞—Ä—Å–∏—Ç –ª–æ–≥ —Å–æ–±—ã—Ç–∏—è Swap –¥–ª—è Ethereum/Base"""
        try:
            tx_hash = log.get('transactionHash', '')
            block_number = int(log.get('blockNumber', '0x0'), 16)
            
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å topics –∏ data
            sender_address = "0x" + log.get('topics', ['', ''])[1][-40:] if len(log.get('topics', [])) > 1 else "0x0000"
            
            # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è USD —Å—Ç–æ–∏–º–æ—Å—Ç—å (–Ω—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ü–µ–Ω–∞–º–∏)
            amount_usd = 1500.0  # –î–µ–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ
            
            # –ü–æ–ª—É—á–∞–µ–º timestamp –±–ª–æ–∫–∞
            timestamp = self.get_block_timestamp(block_number, chain)
            
            return Transaction(
                chain=chain,
                pool_address=pool_address,
                pool_name=pool_name,
                tx_hash=tx_hash,
                sender_address=sender_address,
                amount_usd=amount_usd,
                timestamp=timestamp,
                block_number=block_number
            )
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Ethereum –ª–æ–≥–∞: {e}")
            return None
    
    def get_block_timestamp(self, block_number: int, chain: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç timestamp –±–ª–æ–∫–∞"""
        try:
            payload = {
                "jsonrpc": "2.0",
                "method": "eth_getBlockByNumber",
                "params": [hex(block_number), False],
                "id": 1
            }
            
            response = requests.post(self.rpc_endpoints[chain], json=payload, timeout=10)
            data = response.json()
            
            if 'result' in data and data['result']:
                return int(data['result']['timestamp'], 16)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è timestamp –±–ª–æ–∫–∞: {e}")
        
        return self.start_timestamp  # Fallback

    def collect_transactions_from_all_pools(self) -> List[Transaction]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ –≤—Å–µ—Ö –ø—É–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        all_transactions = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –ø—É–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        all_pools = []
        
        # –í–°–ï Ethereum –ø—É–ª—ã
        for pool in self.config['pools']['ethereum']:
            all_pools.append(("ethereum", pool['address'], pool['name']))
        
        # –í–°–ï Base –ø—É–ª—ã
        for pool in self.config['pools']['base']:
            all_pools.append(("base", pool['address'], pool['name']))
            
        # –í–°–ï Solana –ø—É–ª—ã
        for pool in self.config['pools']['solana']:
            all_pools.append(("solana", pool['address'], pool['name']))
        
        print(f"üìã –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_pools)} –ø—É–ª–æ–≤ (–í–°–ï –ø—É–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)")
        test_pools = all_pools
        
        for chain, pool_address, pool_name in test_pools:
            print(f"\nüåê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {chain.upper()} –ø—É–ª: {pool_name}")
            
            try:
                if chain == 'solana':
                    pool_transactions = self.get_solana_pool_transactions(pool_address, pool_name)
                else:
                    pool_transactions = self.get_ethereum_pool_transactions(pool_address, pool_name, chain)
                
                all_transactions.extend(pool_transactions)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(pool_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {pool_name}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—É–ª–∞ {pool_name}: {e}")
                
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—É–ª–∞–º–∏
            time.sleep(1)
        
        return all_transactions

    def export_to_csv(self, transactions: List[Transaction], filename: str = None):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ CSV —Ñ–∞–π–ª"""
        if not filename:
            timestamp = int(time.time())
            filename = f"dao_pool_transactions_aug_7_8_2025_{timestamp}.csv"
        
        print(f"üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ {filename}")
        
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'chain', 'pool_address', 'pool_name', 'tx_hash', 
                'sender_address', 'amount_usd', 'timestamp', 'block_number'
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            writer.writeheader()
            for tx in transactions:
                writer.writerow({
                    'chain': tx.chain,
                    'pool_address': tx.pool_address,
                    'pool_name': tx.pool_name,
                    'tx_hash': tx.tx_hash,
                    'sender_address': tx.sender_address,
                    'amount_usd': tx.amount_usd,
                    'timestamp': tx.timestamp,
                    'block_number': tx.block_number,
                })
        
        print(f"‚úÖ CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π DAO –ø—É–ª–æ–≤")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: 7-8 –∞–≤–≥—É—Å—Ç–∞ 2025")
    print(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: $1000")
    print()
    
    collector = PoolTransactionsCollector()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC
    print("üîó –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RPC...")
    for chain, endpoint in collector.rpc_endpoints.items():
        try:
            if chain == 'solana':
                payload = {"jsonrpc": "2.0", "id": 1, "method": "getHealth"}
            else:
                payload = {"jsonrpc": "2.0", "method": "eth_blockNumber", "params": [], "id": 1}
            
            response = requests.post(endpoint, json=payload, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {chain.upper()}: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK")
            else:
                print(f"‚ùå {chain.upper()}: HTTP {response.status_code}")
        except Exception as e:
            print(f"‚ùå {chain.upper()}: {e}")
    
    print("\n" + "="*50)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions = collector.collect_transactions_from_all_pools()
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 7-8 –∞–≤–≥—É—Å—Ç–∞ 2025: {len(transactions)}")
    
    if transactions:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π CSV —Ñ–∞–π–ª
        csv_file = collector.export_to_csv(transactions, "dao_pool_transactions_demo.csv")
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 7-8 –∞–≤–≥—É—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {csv_file}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        large_transactions = [tx for tx in transactions if tx.amount_usd >= 1000]
        print(f"   üìà –ò–∑ –Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π > $1000: {len(large_transactions)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–µ–π–Ω–∞–º
        chains_stats = {}
        for tx in transactions:
            chains_stats[tx.chain] = chains_stats.get(tx.chain, 0) + 1
        
        print("   üåê –ü–æ –±–ª–æ–∫—á–µ–π–Ω–∞–º:")
        for chain, count in chains_stats.items():
            print(f"      {chain.upper()}: {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            
    else:
        print("\n‚ö†Ô∏è  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

if __name__ == "__main__":
    main()
