#!/usr/bin/env python3
"""
–ê–ì–†–ï–°–°–ò–í–ù–´–ô —Å–±–æ—Ä—â–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –î–û–õ–ë–ò–¢ API –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç –¥–∞–Ω–Ω—ã–µ
"""

import json
import requests
import csv
import time
import datetime
import os
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from dotenv import load_dotenv

@dataclass
class Transaction:
    chain: str
    pool_address: str
    pool_name: str
    tx_hash: str
    sender_address: str
    amount_usd: float
    timestamp: int
    block_number: int

class AggressiveTransactionsCollector:
    def __init__(self):
        load_dotenv()
        
        with open('tokens_pools_config.json', 'r') as f:
            self.config = json.load(f)
        
        # –¢–û–ß–ù–´–ï –¥–∞—Ç—ã: 7-8 –∞–≤–≥—É—Å—Ç–∞ 2025
        self.start_timestamp = int(datetime.datetime(2025, 8, 7, 0, 0, 0).timestamp())
        self.end_timestamp = int(datetime.datetime(2025, 8, 9, 0, 0, 0).timestamp())
        
        print(f"üî• –ê–ì–†–ï–°–°–ò–í–ù–´–ô –°–ë–û–† –ó–ê: 7-8 –∞–≤–≥—É—Å—Ç–∞ 2025")
        print(f"   Start: {self.start_timestamp}")
        print(f"   End: {self.end_timestamp}")
        
        # API –∫–ª—é—á–∏
        self.helius_key = os.getenv('HELIUS_API_KEY', 'd4af7b72-f199-4d77-91a9-11d8512c5e42')
        
        # –¶–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
        self.token_prices = {
            'So11111111111111111111111111111111111111112': 200,  # SOL
            'bioJ9JTqW62MLz7UKHU69gtKhPpGi1BQhccj2kmSvUJ': 0.02,  # BIO
            'spinezMPKxkBpf4Q9xET2587fehM3LuKe4xoAoXtSjR': 0.008,  # SPINE
            '9qU3LmwKJKT2DJeGPihyTP2jc6pC7ij3hPFeyJVzuksN': 0.004,  # CURES
            'qbioCGDnUBGX5qcK1Fc4zg19GaQEPmxHFMPMZQm4LZ8': 0.0036,  # QBIO
            'GJtJuWD9qYcCkrwMBmtY1tpapV1sKfB2zUv9Q4aqpump': 0.0026,  # RIF
            'FvgqHMfL9yn39V79huDPy3YUNDoYJpuLWng2JfmQpump': 0.0021,  # URO
            'EzYEwn4R5tNkNGw4K2a5a58MJFQESdf1r4UJrV7cpUF3': 0.0016,  # MYCO
            'growFDf9teg9gwVTTY3DgpPXU31qBrnbSQCqtY2vkR8': 0.015,  # GROW
            'neuRodi6Saw2cwDpud7FyAcjzqPBJDtr3fDTXE2Fu4j': 0.0151,  # NEURON
        }

    def aggressive_api_call(self, url: str, params: dict, max_retries: int = 5) -> Optional[dict]:
        """–ê–ì–†–ï–°–°–ò–í–ù–û –¥–æ–ª–±–∏—Ç API –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç –¥–∞–Ω–Ω—ã–µ"""
        for attempt in range(max_retries):
            try:
                print(f"      üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                
                response = requests.get(url, params=params, timeout=45)
                
                if response.status_code == 200:
                    data = response.json()
                    
                    if isinstance(data, dict) and 'error' in data:
                        print(f"      ‚ùå API –æ—à–∏–±–∫–∞: {data['error']}")
                        if 'rate' in data['error'].lower():
                            print(f"      ‚è∞ Rate limit, –∂–¥—É 10 —Å–µ–∫...")
                            time.sleep(10)
                            continue
                        else:
                            return None
                    
                    print(f"      ‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! ({len(data)} –∑–∞–ø–∏—Å–µ–π)")
                    return data
                
                elif response.status_code == 429:
                    print(f"      ‚è∞ Rate limit (429), –∂–¥—É 15 —Å–µ–∫...")
                    time.sleep(15)
                    continue
                    
                elif response.status_code == 502 or response.status_code == 503:
                    print(f"      üîß –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({response.status_code}), –∂–¥—É 5 —Å–µ–∫...")
                    time.sleep(5)
                    continue
                    
                else:
                    print(f"      ‚ùå HTTP {response.status_code}")
                    time.sleep(3)
                    continue
                    
            except requests.exceptions.Timeout:
                print(f"      ‚è∞ Timeout, –∂–¥—É 5 —Å–µ–∫...")
                time.sleep(5)
                continue
                
            except requests.exceptions.ConnectionError:
                print(f"      üîå Connection error, –∂–¥—É 3 —Å–µ–∫...")
                time.sleep(3)
                continue
                
            except Exception as e:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {e}")
                time.sleep(2)
                continue
        
        print(f"      üíÄ –ù–ï –°–ú–û–ì –ü–û–õ–£–ß–ò–¢–¨ –î–ê–ù–ù–´–ï –ü–û–°–õ–ï {max_retries} –ü–û–ü–´–¢–û–ö!")
        return None

    def collect_solana_transactions_aggressive(self) -> List[Transaction]:
        """–ê–ì–†–ï–°–°–ò–í–ù–û —Å–æ–±–∏—Ä–∞–µ—Ç Solana —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        print(f"\nüü£ SOLANA: –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê {len(self.config['pools']['solana'])} –ü–£–õ–û–í")
        
        transactions = []
        
        for i, pool in enumerate(self.config['pools']['solana'], 1):
            print(f"\n[{i}/{len(self.config['pools']['solana'])}] üéØ –î–û–õ–ë–ò–ú: {pool['name']}")
            print(f"    –ê–¥—Ä–µ—Å: {pool['address']}")
            
            url = f"https://api.helius.xyz/v0/addresses/{pool['address']}/transactions"
            params = {'api-key': self.helius_key}
            
            # –ê–ì–†–ï–°–°–ò–í–ù–û –¥–æ–ª–±–∏–º API
            data = self.aggressive_api_call(url, params)
            
            if not data:
                print(f"    üíÄ –ü–†–û–ü–£–°–ö–ê–ï–ú –ü–£–õ {pool['name']} - –ù–ï–¢ –î–ê–ù–ù–´–•")
                continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            total_swaps = 0
            period_swaps = 0
            period_transactions = []
            
            for tx in data:
                if tx.get('type') != 'SWAP':
                    continue
                    
                total_swaps += 1
                
                timestamp = tx.get('timestamp')
                if not timestamp:
                    continue
                    
                if self.start_timestamp <= timestamp <= self.end_timestamp:
                    period_swaps += 1
                    
                    parsed_tx = self.parse_solana_transaction(tx, pool['address'], pool['name'])
                    if parsed_tx:
                        period_transactions.append(parsed_tx)
                        transactions.append(parsed_tx)
            
            print(f"    üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {total_swaps} –≤—Å–µ–≥–æ swaps, {period_swaps} –∑–∞ 7-8 –∞–≤–≥, {len(period_transactions)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
            if period_transactions:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                for j, tx in enumerate(period_transactions[:3], 1):
                    print(f"      {j}. ${tx.amount_usd:.2f} - {tx.tx_hash[:16]}...")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–ª–∞–º–∏
            print(f"    ‚è±Ô∏è  –ü–∞—É–∑–∞ 2 —Å–µ–∫...")
            time.sleep(2)
        
        return transactions

    def parse_solana_transaction(self, tx_data: dict, pool_address: str, pool_name: str) -> Optional[Transaction]:
        """–ü–∞—Ä—Å–∏—Ç Solana —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
        try:
            signature = tx_data.get('signature', '')
            timestamp = tx_data.get('timestamp', 0)
            
            token_transfers = tx_data.get('tokenTransfers', [])
            amount_usd = 0
            
            for transfer in token_transfers:
                mint = transfer.get('mint', '')
                amount = transfer.get('tokenAmount', 0)
                if mint in self.token_prices:
                    usd_value = amount * self.token_prices[mint]
                    amount_usd = max(amount_usd, usd_value)
            
            return Transaction(
                chain='solana',
                pool_address=pool_address,
                pool_name=pool_name,
                tx_hash=signature,
                sender_address=tx_data.get('feePayer', ''),
                amount_usd=round(amount_usd, 2),
                timestamp=timestamp,
                block_number=tx_data.get('slot', 0)
            )
            
        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None

    def export_to_csv(self, transactions: List[Transaction], filename: str = "dao_pool_transactions_demo.csv"):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ CSV"""
        print(f"\nüíæ –°–û–•–†–ê–ù–Ø–Æ {len(transactions)} –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í {filename}")
        
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'chain', 'pool_address', 'pool_name', 'tx_hash', 
                'sender_address', 'amount_usd', 'timestamp', 'block_number'
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            writer.writeheader()
            for tx in transactions:
                writer.writerow({
                    'chain': tx.chain,
                    'pool_address': tx.pool_address,
                    'pool_name': tx.pool_name,
                    'tx_hash': tx.tx_hash,
                    'sender_address': tx.sender_address,
                    'amount_usd': tx.amount_usd,
                    'timestamp': tx.timestamp,
                    'block_number': tx.block_number,
                })
        
        return filename

def main():
    print("üíÄ –ê–ì–†–ï–°–°–ò–í–ù–´–ô –°–ë–û–†–©–ò–ö –¢–†–ê–ù–ó–ê–ö–¶–ò–ô DAO –ü–£–õ–û–í")
    print("üî• –ù–ï –û–°–¢–ê–ù–û–í–ò–¢–°–Ø –ü–û–ö–ê –ù–ï –ü–û–õ–£–ß–ò–¢ –í–°–ï –î–ê–ù–ù–´–ï!")
    print("üìÖ 7-8 –∞–≤–≥—É—Å—Ç–∞ 2025")
    print("=" * 60)
    
    collector = AggressiveTransactionsCollector()
    
    # –ê–ì–†–ï–°–°–ò–í–ù–û —Å–æ–±–∏—Ä–∞–µ–º Solana (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ Solana, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—é –æ—Å—Ç–∞–ª—å–Ω—ã–µ)
    solana_transactions = collector.collect_solana_transactions_aggressive()
    
    print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   üü£ Solana: {len(solana_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    
    if solana_transactions:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        csv_file = collector.export_to_csv(solana_transactions)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        large_txs = [tx for tx in solana_transactions if tx.amount_usd >= 1000]
        medium_txs = [tx for tx in solana_transactions if 100 <= tx.amount_usd < 1000]
        small_txs = [tx for tx in solana_transactions if tx.amount_usd < 100]
        
        print(f"\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–£–ú–ú–ê–ú:")
        print(f"   üî• > $1000: {len(large_txs)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        print(f"   üíµ $100-1000: {len(medium_txs)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        print(f"   üí¥ < $100: {len(small_txs)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        # –¢–æ–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if large_txs:
            top_txs = sorted(large_txs, key=lambda x: x.amount_usd, reverse=True)[:10]
            print(f"\nüèÜ –¢–û–ü-10 –ö–†–£–ü–ù–ï–ô–®–ò–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:")
            for i, tx in enumerate(top_txs, 1):
                date_str = datetime.datetime.fromtimestamp(tx.timestamp).strftime('%m-%d %H:%M')
                print(f"   {i:2d}. ${tx.amount_usd:>10,.2f} - {date_str} - {tx.pool_name} - {tx.tx_hash[:20]}...")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É–ª–∞–º
        pool_stats = {}
        for tx in solana_transactions:
            pool_stats[tx.pool_name] = pool_stats.get(tx.pool_name, 0) + 1
        
        print(f"\nüìä –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ü–£–õ–ê–ú:")
        for pool_name, count in sorted(pool_stats.items(), key=lambda x: x[1], reverse=True):
            print(f"   {pool_name}: {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        print(f"\n‚úÖ –ì–û–¢–û–í–û! –ê–ì–†–ï–°–°–ò–í–ù–û –°–û–ë–†–ê–ù–û –ò –°–û–•–†–ê–ù–ï–ù–û –í {csv_file}")
        
    else:
        print("\nüíÄ –ù–ò –û–î–ù–û–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ù–ï –ù–ê–ô–î–ï–ù–û!")

if __name__ == "__main__":
    main()
