"""
Unified Positions Analyzer –¥–ª—è Ethereum –∏ Base
–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–∑–∏—Ü–∏—è–º Uniswap v3 –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥—É –¥–ª—è Solana
"""

import asyncio
import logging
from typing import List, Dict, Any, Optional, Set
from decimal import Decimal, getcontext
import sys
import os
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from ethereum.data_sources.rpc_client import create_ethereum_rpc_client, RPCEndpoint, EthereumRPCClient
from ethereum.contracts.uniswap_abis import NONFUNGIBLE_POSITION_MANAGER

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Supabase (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    from database_handler import supabase_handler
    SUPABASE_ENABLED = True
    print("‚úÖ Supabase handler –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∑–∏—Ü–∏–π Ethereum/Base")
except ImportError as e:
    print(f"‚ö†Ô∏è Supabase handler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    supabase_handler = None
    SUPABASE_ENABLED = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è Decimal
getcontext().prec = 78

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_multichain_rpc_client(network: str = "ethereum") -> EthereumRPCClient:
    """–°–æ–∑–¥–∞–µ—Ç RPC –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    
    if network == "ethereum":
        return create_ethereum_rpc_client(
            alchemy_api_key=os.getenv("ALCHEMY_API_KEY", "Hkg1Oi9c8x3JEiXj2cL62")
        )
    elif network == "base":
        # Base RPC endpoints
        base_endpoints = [
            RPCEndpoint(
                name="base_alchemy",
                url="https://base-mainnet.g.alchemy.com/v2",
                api_key=os.getenv("ALCHEMY_API_KEY", "Hkg1Oi9c8x3JEiXj2cL62"),
                priority=1
            ),
            RPCEndpoint(
                name="base_public",
                url="https://mainnet.base.org",
                priority=2
            ),
            RPCEndpoint(
                name="base_quicknode",
                url="https://base.llamarpc.com",
                priority=3
            )
        ]
        return EthereumRPCClient(base_endpoints)
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å: {network}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π
NETWORKS_CONFIG = {
    "ethereum": {
        "name": "Ethereum",
        "rpc_urls": [
            "https://eth-mainnet.g.alchemy.com/v2/Hkg1Oi9c8x3JEiXj2cL62",
            "https://ethereum.llamarpc.com",
        ],
        "nft_contract": "0xC36442b4a4522E871399CD717aBDD847Ab11FE88",
        "chain_id": 1
    },
    "base": {
        "name": "Base",
        "rpc_urls": [
            "https://base-mainnet.g.alchemy.com/v2/Hkg1Oi9c8x3JEiXj2cL62",
            "https://mainnet.base.org",
        ],
        "nft_contract": "0x03a520b32c04bf3beef7beb72e919cf822ed34f1",
        "chain_id": 8453
    }
}

def decode_position_data(hex_data):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ hex —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ positions()"""
    if not hex_data or hex_data == "0x":
        return None
    
    try:
        # –£–±–∏—Ä–∞–µ–º 0x –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 32-–±–∞–π—Ç–æ–≤—ã–µ —á–∞–Ω–∫–∏ (64 hex —Å–∏–º–≤–æ–ª–∞)
        clean_hex = hex_data[2:]
        chunks = [clean_hex[i:i+64] for i in range(0, len(clean_hex), 64)]
        
        if len(chunks) < 12:
            return None
        
        def decode_int24(hex_chunk):
            """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ signed int24 –∏–∑ 32-–±–∞–π—Ç–æ–≤–æ–≥–æ chunk"""
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –±–∞–π—Ç–∞ (6 hex —Å–∏–º–≤–æ–ª–æ–≤)
            int24_hex = hex_chunk[-6:]
            value = int(int24_hex, 16)
            
            # –ï—Å–ª–∏ —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —ç—Ç–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
            if value >= 2**23:
                value = value - 2**24
            
            return value
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ —Å–æ–≥–ª–∞—Å–Ω–æ ABI positions()
        return {
            'nonce': int(chunks[0], 16),
            'operator': '0x' + chunks[1][-40:],  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –±–∞–π—Ç
            'token0': '0x' + chunks[2][-40:],
            'token1': '0x' + chunks[3][-40:], 
            'fee': int(chunks[4], 16),
            'tick_lower': decode_int24(chunks[5]),
            'tick_upper': decode_int24(chunks[6]),
            'liquidity': int(chunks[7], 16),
            'fee_growth_inside0_last_x128': int(chunks[8], 16),
            'fee_growth_inside1_last_x128': int(chunks[9], 16),
            'tokens_owed0': int(chunks[10], 16),
            'tokens_owed1': int(chunks[11], 16)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return None

async def get_uniswap_v2_positions(
    wallet_address: str,
    network: str,
    rpc_client,
    min_value_usd: float = 100.0
) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç Uniswap v2 LP –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞
    
    Args:
        wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
        network: –°–µ—Ç—å (ethereum/base)
        rpc_client: RPC –∫–ª–∏–µ–Ω—Ç
        min_value_usd: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ v2 LP –ø–æ–∑–∏—Ü–∏–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ v2 LP —Ç–æ–∫–µ–Ω—ã –∏–∑ dao_pool_snapshots –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
        if SUPABASE_ENABLED and supabase_handler and supabase_handler.is_connected():
            # –ü–æ–ª—É—á–∞–µ–º LP —Ç–æ–∫–µ–Ω—ã/–ø—É–ª—ã –∏–∑ dao_pool_snapshots –≥–¥–µ dex != 'uniswap_v3'
            dao_pools_result = supabase_handler.client.table('dao_pool_snapshots').select(
                'pool_address, pool_name, tvl_usd, dex, token_symbol'
            ).eq('network', network).neq('dex', 'uniswap_v3').gte(
                'created_at', '2025-07-28'
            ).order('created_at', desc=True).execute()
            
            if not dao_pools_result.data:
                logger.info(f"–ù–µ—Ç v2 –ø—É–ª–æ–≤ –≤ dao_pool_snapshots –¥–ª—è {network}")
                return []
                
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(dao_pools_result.data)} v2 –ø—É–ª–æ–≤ –¥–ª—è {network}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã LP —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ—à–µ–ª—å–∫–µ
            v2_positions = []
            
            for pool in dao_pools_result.data:
                pool_address = pool['pool_address']
                if not pool_address or pool_address.startswith('virtual_'):
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø—É–ª—ã
                    
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å LP —Ç–æ–∫–µ–Ω–∞ –≤ –∫–æ—à–µ–ª—å–∫–µ
                    balance_call = {
                        "method": "eth_call",
                        "params": [{
                            "to": pool_address,
                            "data": f"0x70a08231{wallet_address[2:].lower().zfill(64)}"  # balanceOf(wallet)
                        }, "latest"],
                        "id": 1
                    }
                    
                    balance_result = await rpc_client.batch_call([balance_call])
                    if balance_result and "result" in balance_result[0]:
                        balance_hex = balance_result[0]["result"]
                        if balance_hex and balance_hex != "0x" and balance_hex != "0x0":
                            balance_raw = int(balance_hex, 16)
                            
                            if balance_raw > 0:
                                # –£ –Ω–∞—Å –µ—Å—Ç—å LP —Ç–æ–∫–µ–Ω—ã –≤ —ç—Ç–æ–º –ø—É–ª–µ!
                                logger.info(f"üí∞ –ù–∞–π–¥–µ–Ω v2 LP –±–∞–ª–∞–Ω—Å: {pool['pool_name']} = {balance_raw} wei")
                                
                                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º TVL –∏–∑ dao_pool_snapshots –∫–∞–∫ –Ω–∞—à—É –ø–æ–∑–∏—Ü–∏—é
                                # TODO: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –¥–æ–ª—é LP —Ç–æ–∫–µ–Ω–æ–≤
                                our_position_value = min(pool.get('tvl_usd', 0) * 0.01, 10000)  # –ü—Ä–∏–º–µ—Ä–Ω–æ 1% TVL, –º–∞–∫—Å $10k
                                
                                if our_position_value >= min_value_usd:
                                    v2_position = {
                                        'pool_name': pool['pool_name'],
                                        'total_value_usd': our_position_value,
                                        'position_value_usd': our_position_value,
                                        'pool_id': pool_address,
                                        'pool_address': pool_address,
                                        'pool_tvl_usd': pool.get('tvl_usd', 0),
                                        'token_id': f"v2_{pool_address}",
                                        'position_mint': f"{network}_v2_{pool_address}",
                                        'network': network,
                                        'fees_usd': 0,  # v2 –Ω–µ –∏–º–µ–µ—Ç unclaimed fees
                                        'unclaimed_fees_usd': 0,
                                        'in_range': True,  # v2 –≤—Å–µ–≥–¥–∞ in range
                                        'dex': pool.get('dex', 'uniswap_v2'),
                                        'is_v2_pool': True,
                                        'lp_balance_raw': balance_raw
                                    }
                                    v2_positions.append(v2_position)
                                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ v2 –ø–æ–∑–∏—Ü–∏—è: {pool['pool_name']} = ${our_position_value:,.2f}")
                                    
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ v2 –ø—É–ª–∞ {pool_address}: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º v2 –ø–æ–∑–∏—Ü–∏–∏ –≤ Supabase –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
            if v2_positions and SUPABASE_ENABLED:
                try:
                    import asyncio
                    asyncio.create_task(save_ethereum_positions_to_supabase(v2_positions, network))
                    logger.info(f"üíæ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(v2_positions)} v2 –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è v2 –ø–æ–∑–∏—Ü–∏–π: {e}")
                    
            return v2_positions
            
        else:
            logger.warning("Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ v2 –ø–æ–∑–∏—Ü–∏–π")
            return []
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è v2 –ø–æ–∑–∏—Ü–∏–π: {e}")
        return []

async def get_uniswap_positions(
    wallet_address: str,
    network: str = "ethereum",
    min_value_usd: float = 0.0,
    token_prices: Optional[Dict[str, float]] = None
) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ Uniswap v3 –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ get_clmm_positions() –¥–ª—è Solana
    
    Args:
        wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (0x...)
        network: –°–µ—Ç—å ("ethereum" –∏–ª–∏ "base")
        min_value_usd: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
        token_prices: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å —Ü–µ–Ω–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤ {address: price_usd}
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    
    if network not in NETWORKS_CONFIG:
        logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–µ—Ç—å: {network}")
        return []
    
    config = NETWORKS_CONFIG[network]
    logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ Uniswap v3 + v2 –¥–ª—è {wallet_address} –≤ —Å–µ—Ç–∏ {config['name']}")
    
    # –°–æ–∑–¥–∞–µ–º RPC –∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
    rpc_client = create_multichain_rpc_client(network)
    
    try:
        async with rpc_client:
            # üî• –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º Uniswap v2 LP —Ç–æ–∫–µ–Ω—ã
            v2_positions = await get_uniswap_v2_positions(wallet_address, network, rpc_client, min_value_usd)
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(v2_positions)} Uniswap v2 –ø–æ–∑–∏—Ü–∏–π")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –ø–æ–∑–∏—Ü–∏–π (v3)
            balance_call = {
                "method": "eth_call",
                "params": [
                    {
                        "to": config["nft_contract"],
                        "data": f"0x70a08231{wallet_address[2:].lower().zfill(64)}"  # balanceOf
                    },
                    "latest"
                ],
                "id": 1
            }
            
            balance_results = await rpc_client.batch_call([balance_call])
            if not balance_results or "result" not in balance_results[0]:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å NFT")
                return []
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å hex —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_hex = balance_results[0]["result"]
            if not result_hex or result_hex == "0x" or len(result_hex) <= 2:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π hex —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_hex}")
                return []
                
            balance = int(result_hex, 16)
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {balance} NFT –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ—à–µ–ª—å–∫–µ")
            
            if balance == 0:
                return []
            
            # 2. –ü–æ–ª—É—á–∞–µ–º token IDs –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
            token_calls = []
            for i in range(balance):
                data = (
                    "0x2f745c59" +  # tokenOfOwnerByIndex selector
                    wallet_address[2:].lower().zfill(64) +  # owner address
                    hex(i)[2:].zfill(64)  # index
                )
                token_calls.append({
                    "method": "eth_call",
                    "params": [{"to": config["nft_contract"], "data": data}, "latest"],
                    "id": i
                })
            
            token_results = await rpc_client.batch_call(token_calls)
            token_ids = []
            
            for result in token_results:
                if "result" in result:
                    result_hex = result["result"]
                    if result_hex and result_hex != "0x" and len(result_hex) > 2:
                        token_id = int(result_hex, 16)
                        token_ids.append(token_id)
            
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(token_ids)} Token IDs")
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π
            position_calls = []
            for token_id in token_ids:
                data = f"0x99fbab88{hex(token_id)[2:].zfill(64)}"  # positions selector
                position_calls.append({
                    "method": "eth_call",
                    "params": [{"to": config["nft_contract"], "data": data}, "latest"],
                    "id": token_id
                })
            
            position_results = await rpc_client.batch_call(position_calls)
            
            # 4. –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π
            parsed_positions = []
            unique_tokens: Set[str] = set()
            
            for i, result in enumerate(position_results):
                if "result" in result:
                    token_id = token_ids[i]
                    position_data = decode_position_data(result["result"])
                    
                    if position_data and position_data["liquidity"] > 0:
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                        unique_tokens.add(position_data["token0"])
                        unique_tokens.add(position_data["token1"])
                        
                        parsed_positions.append({
                            "token_id": token_id,
                            "network": network,
                            "position_data": position_data,
                            "nft_contract": config["nft_contract"]
                        })
            
            logger.info(f"‚úÖ –ü–∞—Ä—Å–µ–Ω–æ {len(parsed_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            
            # 5. –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤
            token_metadata = await fetch_token_metadata_batch(
                list(unique_tokens), 
                network, 
                rpc_client
            )
            
            # 6. –ü–û–õ–£–ß–ê–ï–ú –¢–û–ß–ù–´–ï –î–ê–ù–ù–´–ï –ß–ï–†–ï–ó RPC (–∞–Ω–∞–ª–æ–≥ json_uri –¥–ª—è Solana)
            # –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú SUBGRAPH - –æ–Ω –¥–∞–µ—Ç –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
            
            # 7. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ Factory –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
            pool_data = {}
            pool_token_info = {}  # –ú–∞–ø–∏–Ω–≥ pool_address -> token_info
            
            for pos in parsed_positions:
                pos_data = pos["position_data"]
                pool_addr = await get_pool_address_from_factory(
                    pos_data["token0"], 
                    pos_data["token1"], 
                    pos_data["fee"],
                    rpc_client,
                    network
                )
                pool_key = f"{pos_data['token0']}_{pos_data['token1']}_{pos_data['fee']}"
                pool_data[pool_key] = pool_addr
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –¥–ª—è pool_address
                pool_token_info[pool_addr] = {
                    'token0_address': pos_data["token0"],
                    'token1_address': pos_data["token1"],
                    'token0_symbol': token_metadata.get(pos_data["token0"], {}).get("symbol", "UNK"),
                    'token1_symbol': token_metadata.get(pos_data["token1"], {}).get("symbol", "UNK"),
                    'fee_tier': pos_data["fee"]
                }
            
            pool_states = await fetch_pool_states_batch(list(pool_data.values()), rpc_client)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—É–ª–æ–≤ –≤ Supabase
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(pool_states)} –ø—É–ª–æ–≤ {network} –≤ Supabase...")
            saved_pools_count = 0
            for pool_address, state in pool_states.items():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø—É–ª–∞
                    token_info = pool_token_info.get(pool_address, {})
                    token0_symbol = token_info.get('token0_symbol', 'UNK')
                    token1_symbol = token_info.get('token1_symbol', 'UNK')
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    pool_save_data = {
                        'pool_address': pool_address,
                        'tick': state.get('tick'),
                        'sqrtPriceX96': state.get('sqrtPriceX96'),
                        'liquidity': state.get('liquidity'),
                        'pool_name': f"{token0_symbol}/{token1_symbol}",  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –ò–ú–Ø
                        'token0_address': token_info.get('token0_address'),
                        'token1_address': token_info.get('token1_address'),
                        'token0_symbol': token0_symbol,
                        'token1_symbol': token1_symbol,
                        'fee_tier': token_info.get('fee_tier', 3000),
                        'tvl_usd': 0,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                        'volume_24h_usd': 0,
                        'current_price': 0
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–ª
                    success = await save_ethereum_pool_to_supabase(pool_save_data, network)
                    if success:
                        saved_pools_count += 1
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É–ª–∞ {pool_address}: {e}")
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_pools_count}/{len(pool_states)} –ø—É–ª–æ–≤ {network}")
            
            # 7.5. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ CoinGecko Pro –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ
            if token_prices is None:
                token_prices_final = await fetch_token_prices_batch(list(unique_tokens), network)
            else:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã (float) –≤ Decimal –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                token_prices_final = {addr: Decimal(str(price)) for addr, price in token_prices.items()}
                logger.info(f"üìà –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è {len(token_prices_final)} —Ç–æ–∫–µ–Ω–æ–≤")
            
            # 7.6. –ü–æ–ª—É—á–∞–µ–º TVL –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ Subgraph (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
            pool_tvl_data = {}
            real_pool_addresses = [addr for addr in pool_data.values() if not addr.startswith("unknown")]
            if real_pool_addresses:
                try:
                    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º RPC, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º Subgraph
                    tvl_results = {}
                    
                    if network in ["base", "ethereum"]:
                        logger.info(f"üßÆ –ü–æ–ª—É—á–∞–µ–º TVL –¥–ª—è {len(real_pool_addresses)} {network} –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ RPC...")
                        try:
                            tvl_results = await get_pool_tvl_via_rpc(real_pool_addresses, network, rpc_client, token_prices_final)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ RPC –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ –≤—Å–µ –Ω—É–ª–∏)
                            valid_tvl_count = sum(1 for tvl in tvl_results.values() if tvl > 0)
                            if valid_tvl_count == 0 and len(tvl_results) > 0:
                                logger.warning(f"‚ö†Ô∏è RPC –≤–µ—Ä–Ω—É–ª —Ç–æ–ª—å–∫–æ –Ω—É–ª–µ–≤—ã–µ TVL –¥–ª—è {network}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Subgraph")
                                raise Exception("RPC returned only zero TVL values")
                                
                            logger.info(f"‚úÖ RPC —É—Å–ø–µ—à–Ω–æ: {valid_tvl_count}/{len(tvl_results)} –ø—É–ª–æ–≤ —Å TVL > 0")
                        except Exception as rpc_error:
                            logger.warning(f"‚ö†Ô∏è RPC —Ä–∞—Å—á–µ—Ç TVL –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è {network}: {rpc_error}")
                            logger.info(f"üåê –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Subgraph –¥–ª—è {network}...")
                            tvl_results = await get_pool_tvl_via_subgraph(real_pool_addresses, network)
                    else:
                        logger.info(f"üìä –ü–æ–ª—É—á–∞–µ–º TVL –¥–ª—è {len(real_pool_addresses)} –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ Subgraph...")
                        tvl_results = await get_pool_tvl_via_subgraph(real_pool_addresses, network)
                    
                    for pool_addr, tvl_usd in tvl_results.items():
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
                        if network in ["base", "ethereum"]:
                            # –î–ª—è Ethereum/Base —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±–æ–≤–∞–ª–∏ RPC, –µ—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - —Ç–æ Subgraph
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –ª–æ–≥–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ Subgraph
                            calculation_method = 'subgraph_verified'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Subgraph –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                        else:
                            calculation_method = 'subgraph_verified'
                            
                        pool_tvl_data[pool_addr] = {
                            'tvl_usd': tvl_usd,
                            'volume_usd': 0,  # Volume –Ω–µ –ø–æ–ª—É—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å
                            'calculation_method': calculation_method
                        }
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
                        calculation_method = pool_tvl_data[pool_addr]['calculation_method']
                        method_name = "RPC" if "rpc" in calculation_method else "Subgraph"
                        logger.info(f"‚úÖ Pool {pool_addr[:8]}...: TVL = ${tvl_usd:,.0f} ({method_name})")
                        
                        # üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º TVL –≤ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º –ø—É–ª–µ
                        if SUPABASE_ENABLED and tvl_usd > 0:
                            try:
                                # –û–±–Ω–æ–≤–ª—è–µ–º TVL –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                                pool_update_data = {
                                    'tvl_usd': tvl_usd
                                }
                                update_result = await update_ethereum_pool_tvl(pool_addr, pool_update_data, network)
                                if update_result:
                                    logger.info(f"üíæ TVL —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–ª—è {pool_addr[:8]}...")
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å TVL –≤ –±–∞–∑–µ –¥–ª—è {pool_addr[:8]}...")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TVL –ø—É–ª–∞ {pool_addr[:8]}...: {e}")
                        elif tvl_usd == 0:
                            logger.warning(f"‚ö†Ô∏è –ü—É–ª {pool_addr[:8]}... –∏–º–µ–µ—Ç TVL = 0, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
                        
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                    rpc_count = sum(1 for data in pool_tvl_data.values() if "rpc" in data['calculation_method'])
                    subgraph_count = sum(1 for data in pool_tvl_data.values() if "subgraph" in data['calculation_method'])
                    
                    method_summary = f"RPC: {rpc_count}, Subgraph: {subgraph_count}" if rpc_count > 0 and subgraph_count > 0 else ("RPC" if rpc_count > 0 else "Subgraph")
                    logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω—ã TVL –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(pool_tvl_data)} –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ {method_summary}")
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø—É–ª–æ–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
                    updated_count = sum(1 for data in pool_tvl_data.values() if data['tvl_usd'] > 0)
                    logger.info(f"üíæ {updated_count}/{len(pool_tvl_data)} –ø—É–ª–æ–≤ —Å TVL > 0 –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ lp_pool_snapshots –¥–ª—è {network}")
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TVL —á–µ—Ä–µ–∑ Subgraph: {e}")
                    pool_tvl_data = {}

            
            # 8. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º USD —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –ü–†–ê–í–ò–õ–¨–ù–û–ô –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π Uniswap v3
            final_positions = []
            
            for position in parsed_positions:
                enhanced_position = await enhance_position_data_with_rpc(
                    position, 
                    pool_data,
                    pool_states,
                    token_metadata, 
                    token_prices_final,
                    config,
                    rpc_client,
                    pool_tvl_data  # –î–æ–±–∞–≤–ª—è–µ–º TVL –¥–∞–Ω–Ω—ã–µ
                )
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                if enhanced_position.get("total_value_usd", 0) >= min_value_usd:
                    final_positions.append(enhanced_position)
            
            logger.info(f"üéØ –ò—Ç–æ–≥–æ {len(final_positions)} v3 –ø–æ–∑–∏—Ü–∏–π (—Ñ–∏–ª—å—Ç—Ä >${min_value_usd} USD)")
            
            # üî• –û–ë–™–ï–î–ò–ù–Ø–ï–ú v2 –∏ v3 –ø–æ–∑–∏—Ü–∏–∏
            all_positions = v2_positions + final_positions
            logger.info(f"üéØ –ò–¢–û–ì–û: {len(all_positions)} –ø–æ–∑–∏—Ü–∏–π (v2: {len(v2_positions)}, v3: {len(final_positions)})")
            return all_positions
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        return []

async def fetch_token_metadata_batch(
    token_addresses: List[str], 
    network: str, 
    rpc_client
) -> Dict[str, Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤ (symbol, decimals, name)"""
    
    metadata = {}
    
    # –°–æ–∑–¥–∞–µ–º batch calls –¥–ª—è –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
    calls = []
    for token_addr in token_addresses:
        # symbol()
        calls.append({
            "method": "eth_call",
            "params": [{"to": token_addr, "data": "0x95d89b41"}, "latest"],
            "id": f"{token_addr}_symbol"
        })
        # decimals()
        calls.append({
            "method": "eth_call", 
            "params": [{"to": token_addr, "data": "0x313ce567"}, "latest"],
            "id": f"{token_addr}_decimals"
        })
        # name()
        calls.append({
            "method": "eth_call",
            "params": [{"to": token_addr, "data": "0x06fdde03"}, "latest"],
            "id": f"{token_addr}_name"
        })
    
    try:
        results = await rpc_client.batch_call(calls)
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if "result" in result and result["result"] != "0x":
                result_id = result["id"]
                token_addr, field = result_id.rsplit("_", 1)
                
                if token_addr not in metadata:
                    metadata[token_addr] = {}
                
                if field == "symbol":
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º string –∏–∑ hex
                    metadata[token_addr]["symbol"] = decode_string_from_hex(result["result"])
                elif field == "decimals":
                    result_hex = result["result"]
                    if result_hex and result_hex != "0x" and len(result_hex) > 2:
                        metadata[token_addr]["decimals"] = int(result_hex, 16)
                    else:
                        metadata[token_addr]["decimals"] = 18  # default decimals
                elif field == "name":
                    metadata[token_addr]["name"] = decode_string_from_hex(result["result"])
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}")
    
    return metadata

def decode_string_from_hex(hex_str: str) -> str:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ hex —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ABI"""
    try:
        if not hex_str or hex_str == "0x":
            return "Unknown"
        
        # –£–±–∏—Ä–∞–µ–º 0x –∏ –ø–µ—Ä–≤—ã–µ 64 —Å–∏–º–≤–æ–ª–∞ (offset –∏ length)
        clean_hex = hex_str[2:]
        if len(clean_hex) < 128:
            return "Unknown"
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
        length = int(clean_hex[64:128], 16)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É
        string_hex = clean_hex[128:128 + length * 2]
        return bytes.fromhex(string_hex).decode('utf-8', errors='ignore')
        
    except Exception:
        return "Unknown"

async def fetch_token_prices_batch(token_addresses: List[str], network: str = "ethereum") -> Dict[str, Decimal]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ CoinGecko Pro API"""
    try:
        import httpx
        
        if not token_addresses:
            return {}
            
        # CoinGecko Pro API - –≤—ã–±–∏—Ä–∞–µ–º endpoint –ø–æ —Å–µ—Ç–∏
        network_map = {
            "ethereum": "ethereum",
            "base": "base"
        }
        network_endpoint = network_map.get(network, "ethereum")
        url = f"https://pro-api.coingecko.com/api/v3/simple/token_price/{network_endpoint}"
        params = {
            "contract_addresses": ",".join(token_addresses),
            "vs_currencies": "usd"
        }
        
        # API –∫–ª—é—á –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        COINGECKO_API_KEY = "CG-9MrJcucBMMx5HKnXeVBD8oSb"
        headers = {}
        if COINGECKO_API_KEY:
            headers["x-cg-pro-api-key"] = COINGECKO_API_KEY
            
        async with httpx.AsyncClient() as client:
            logger.info(f"üí∞ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è {len(token_addresses)} —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ CoinGecko...")
            response = await client.get(url, params=params, headers=headers)
            response.raise_for_status()
            response_data = response.json()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç: {"address": {"usd": price}}
            prices = {}
            for address, price_data in response_data.items():
                if "usd" in price_data:
                    price_decimal = Decimal(str(price_data["usd"]))
                    prices[address.lower()] = price_decimal
                    logger.info(f"‚úÖ {address[:8]}...: ${price_decimal}")
                    
            logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤: {len(prices)}/{len(token_addresses)}")
            return prices
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return {}

async def fetch_pool_current_tick(
    pool_address: str,
    rpc_client,
    token0_addr: str,
    token1_addr: str,
    fee: int
) -> Optional[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç current tick –ø—É–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ in_range"""
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –∞–¥—Ä–µ—Å –ø—É–ª–∞ —á–µ—Ä–µ–∑ Uniswap V3 Factory
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å RPC –≤—ã–∑–æ–≤ –∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø—É–ª–∞–º
        # –ù–æ –æ–±—ã—á–Ω–æ –Ω—É–∂–µ–Ω –∞–¥—Ä–µ—Å –ø—É–ª–∞ –∏–∑ Factory.getPool(token0, token1, fee)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None - –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è current tick: {e}")
        return None

# –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ Uniswap v3
Q64 = Decimal(2**64)
SQRT_1_0001 = Decimal('1.0001').sqrt() 
MIN_TICK = -887272
MAX_TICK = 887272
MAX_U128 = (1 << 128) - 1

def tick_to_sqrt_price_x64(tick: int) -> int:
    """
    Calculates sqrt(1.0001^tick) * 2^64
    Based on Uniswap V3 TickMath library.
    """
    if not MIN_TICK <= tick <= MAX_TICK:
        raise ValueError(f"Tick {tick} out of bounds [{MIN_TICK}, {MAX_TICK}]")

    try:
        sqrt_price = SQRT_1_0001 ** Decimal(tick)
        sqrt_price_x64_decimal = sqrt_price * Q64
        sqrt_price_x64_int = int(sqrt_price_x64_decimal.to_integral_value(rounding='ROUND_HALF_UP'))

        if not 0 <= sqrt_price_x64_int <= MAX_U128:
             raise ValueError(f"Calculated sqrtPriceX64 {sqrt_price_x64_int} out of u128 bounds")

        return sqrt_price_x64_int
    except Exception as e:
        logger.error(f"Error in tick_to_sqrt_price_x64 for tick {tick}: {e}")
        return 0

def calculate_token_amounts_from_liquidity(
    liquidity: int,
    tick_lower: int,
    tick_upper: int,
    current_tick: Optional[int] = None
) -> tuple[Decimal, Decimal]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ liquidity
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–∞—Ç–µ–º–∞—Ç–∏–∫—É Uniswap v3
    """
    
    if tick_lower >= tick_upper:
        return Decimal(0), Decimal(0)

    try:
        L = Decimal(liquidity)
        
        # –ü–æ–ª—É—á–∞–µ–º sqrtPrice –¥–ª—è –≥—Ä–∞–Ω–∏—Ü —Ç–∏–∫–æ–≤
        sa_int = tick_to_sqrt_price_x64(tick_lower)
        sb_int = tick_to_sqrt_price_x64(tick_upper)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ Decimal –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        sa = Decimal(sa_int)
        sb = Decimal(sb_int)

        amount0_raw = Decimal(0)
        amount1_raw = Decimal(0)

        if current_tick is not None:
            # –ï—Å–ª–∏ –∑–Ω–∞–µ–º current tick, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é —Ñ–æ—Ä–º—É–ª—É
            sp_c_int = tick_to_sqrt_price_x64(current_tick)
            sp_c = Decimal(sp_c_int)
            
            if sp_c <= sa:
                # Price below range -> only token0
                if sa > 0 and sb > 0:
                    amount0_raw = L * (sb - sa) * Q64 / (sa * sb)
            elif sp_c >= sb:
                # Price above range -> only token1
                amount1_raw = L * (sb - sa) / Q64
            else: # Price within range (sa < sp_c < sb)
                if sp_c > 0 and sb > 0:
                     amount0_raw = L * (sb - sp_c) * Q64 / (sp_c * sb)
                amount1_raw = L * (sp_c - sa) / Q64
        else:
            # –ï—Å–ª–∏ current_tick –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            sp_mid_tick = (tick_lower + tick_upper) // 2
            sp_mid_int = tick_to_sqrt_price_x64(sp_mid_tick)
            sp_mid = Decimal(sp_mid_int)
            
            if sp_mid > 0 and sb > 0:
                amount0_raw = L * (sb - sp_mid) * Q64 / (sp_mid * sb)
            amount1_raw = L * (sp_mid - sa) / Q64

        # Ensure non-negative results
        amount0_raw = max(Decimal(0), amount0_raw)
        amount1_raw = max(Decimal(0), amount1_raw)

        return amount0_raw, amount1_raw
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return Decimal("0"), Decimal("0")

async def enhance_position_data(
    position: Dict[str, Any],
    token_metadata: Dict[str, Dict[str, Any]],
    token_prices: Dict[str, Decimal],
    config: Dict[str, Any]
) -> Dict[str, Any]:
    """–û–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏"""
    
    pos_data = position["position_data"]
    token0_addr = pos_data["token0"]
    token1_addr = pos_data["token1"]
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    token0_meta = token_metadata.get(token0_addr, {})
    token1_meta = token_metadata.get(token1_addr, {})
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
    token0_price = token_prices.get(token0_addr.lower(), Decimal("0"))
    token1_price = token_prices.get(token1_addr.lower(), Decimal("0"))
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø–æ–∑–∏—Ü–∏–∏
    amount0_raw, amount1_raw = calculate_token_amounts_from_liquidity(
        pos_data["liquidity"],
        pos_data["tick_lower"], 
        pos_data["tick_upper"]
    )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º decimals
    decimals0 = token0_meta.get("decimals", 18)
    decimals1 = token1_meta.get("decimals", 18)
    
    amount0 = amount0_raw / (Decimal("10") ** decimals0)
    amount1 = amount1_raw / (Decimal("10") ** decimals1)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º USD —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    value0_usd = amount0 * token0_price
    value1_usd = amount1 * token1_price
    total_value_usd = value0_usd + value1_usd
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º unclaimed fees –≤ USD
    fees0_amount = Decimal(str(pos_data["tokens_owed0"])) / (Decimal("10") ** decimals0)
    fees1_amount = Decimal(str(pos_data["tokens_owed1"])) / (Decimal("10") ** decimals1)
    
    fees0_usd = fees0_amount * token0_price
    fees1_usd = fees1_amount * token1_price
    unclaimed_fees_usd = fees0_usd + fees1_usd
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å in_range (—É–ø—Ä–æ—â–µ–Ω–Ω–æ, –±–µ–∑ current tick)
    in_range = True  # –í—Ä–µ–º–µ–Ω–Ω–æ –≤—Å–µ–≥–¥–∞ True, –Ω—É–∂–µ–Ω current tick –ø—É–ª–∞
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Solana –≤–µ—Ä—Å–∏–∏
    enhanced = {
        "position_id": str(position["token_id"]),
        "network": position["network"],
        "nft_contract": position["nft_contract"],
        
        # –î–∞–Ω–Ω—ã–µ –ø—É–ª–∞
        "pool_address": f"pool_{token0_addr}_{token1_addr}_{pos_data['fee']}",
        "token0_address": token0_addr,
        "token1_address": token1_addr,
        "fee_tier": pos_data["fee"] / 10000,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤
        "token0_symbol": token0_meta.get("symbol", "UNKNOWN"),
        "token1_symbol": token1_meta.get("symbol", "UNKNOWN"), 
        "token0_decimals": decimals0,
        "token1_decimals": decimals1,
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        "tick_lower": pos_data["tick_lower"],
        "tick_upper": pos_data["tick_upper"],
        "liquidity": pos_data["liquidity"],
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
        "amount0": float(amount0),
        "amount1": float(amount1),
        
        # –¶–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
        "token0_price_usd": float(token0_price),
        "token1_price_usd": float(token1_price),
        
        # –ö–æ–º–∏—Å—Å–∏–∏
        "unclaimed_fees_token0": pos_data["tokens_owed0"],
        "unclaimed_fees_token1": pos_data["tokens_owed1"],
        "unclaimed_fees_token0_amount": float(fees0_amount),
        "unclaimed_fees_token1_amount": float(fees1_amount),
        
        # –°—Ç–∞—Ç—É—Å
        "in_range": in_range,
        
        # USD –∑–Ω–∞—á–µ–Ω–∏—è
        "total_value_usd": float(total_value_usd),
        "value0_usd": float(value0_usd),
        "value1_usd": float(value1_usd),
        "unclaimed_fees_usd": float(unclaimed_fees_usd),
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—É–ª–∞
        "pool_name": f"{token0_meta.get('symbol', 'UNKNOWN')}/{token1_meta.get('symbol', 'UNKNOWN')}"
    }
    
    return enhanced

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø RPC –ü–û–î–•–û–î–ê ---

async def get_pool_address_from_factory(
    token0: str, 
    token1: str, 
    fee: int, 
    rpc_client,
    network: str = "ethereum"
) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –ø—É–ª–∞ —á–µ—Ä–µ–∑ Uniswap Factory contract"""
    
    # Uniswap v3 Factory –∞–¥—Ä–µ—Å–∞
    factory_addresses = {
        "ethereum": "0x1F98431c8aD98523631AE4a59f267346ea31F984",
        "base": "0x33128a8fC17869897dcE68Ed026d694621f6FDfD"
    }
    
    factory_address = factory_addresses.get(network)
    if not factory_address:
        return f"unknown_pool_{token0}_{token1}_{fee}"
    
    try:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã (token0 < token1)
        if token0.lower() > token1.lower():
            token0, token1 = token1, token0
            
        # getPool(token0, token1, fee) -> address
        # Function selector: 0x1698ee82
        data = (
            "0x1698ee82" +  # getPool selector
            token0[2:].lower().zfill(64) +  # token0 address 
            token1[2:].lower().zfill(64) +  # token1 address
            hex(fee)[2:].zfill(64)  # fee uint24
        )
        
        pool_call = {
            "method": "eth_call",
            "params": [
                {
                    "to": factory_address,
                    "data": data
                },
                "latest"
            ],
            "id": 1
        }
        
        results = await rpc_client.batch_call([pool_call])
        
        if results and "result" in results[0]:
            pool_address = "0x" + results[0]["result"][-40:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –±–∞–π—Ç = –∞–¥—Ä–µ—Å
            return pool_address
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø—É–ª–∞: {e}")
    
    return f"unknown_pool_{token0}_{token1}_{fee}"


async def fetch_pool_states_batch(
    pool_addresses: List[str], 
    rpc_client
) -> Dict[str, Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ RPC (slot0 –∏ liquidity)"""
    
    if not pool_addresses:
        return {}
    
    try:
        # –°–æ–∑–¥–∞–µ–º batch –≤—ã–∑–æ–≤—ã –¥–ª—è slot0() –∏ liquidity() –∫–∞–∂–¥–æ–≥–æ –ø—É–ª–∞
        calls = []
        call_id = 0
        
        for pool_addr in pool_addresses:
            if pool_addr.startswith("unknown"):
                continue
                
            # slot0() -> sqrtPriceX96, tick, observationIndex, ...
            calls.append({
                "method": "eth_call",
                "params": [
                    {
                        "to": pool_addr,
                        "data": "0x3850c7bd"  # slot0() function selector
                    },
                    "latest"
                ],
                "id": call_id
            })
            call_id += 1
            
            # liquidity() -> uint128 liquidity
            calls.append({
                "method": "eth_call",
                "params": [
                    {
                        "to": pool_addr,
                        "data": "0x1a686502"  # liquidity() function selector
                    },
                    "latest"
                ],
                "id": call_id
            })
            call_id += 1
        
        if not calls:
            return {}
            
        results = await rpc_client.batch_call(calls)
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        pool_states = {}
        call_index = 0
        
        for pool_addr in pool_addresses:
            if pool_addr.startswith("unknown"):
                pool_states[pool_addr] = {"tick": 0, "liquidity": 0, "sqrtPriceX96": 0}
                continue
                
            # –ö–∞–∂–¥—ã–π –ø—É–ª –∏–º–µ–µ—Ç 2 –≤—ã–∑–æ–≤–∞: slot0, liquidity
            if call_index + 1 < len(results):
                slot0_result = results[call_index]
                liquidity_result = results[call_index + 1]
                
                try:
                    # –ü–∞—Ä—Å–∏–º slot0
                    if "result" in slot0_result:
                        slot0_data = slot0_result["result"]
                        if len(slot0_data) >= 130:  # 0x + 64 + 64 chars –º–∏–Ω–∏–º—É–º
                            # sqrtPriceX96 (–ø–µ—Ä–≤—ã–µ 32 –±–∞–π—Ç–∞)
                            sqrt_price_x96 = int(slot0_data[2:66], 16)
                            
                            # tick (–≤—Ç–æ—Ä–æ–π 32-–±–∞–π—Ç–Ω—ã–π —Å–ª–æ—Ç, –Ω–æ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è int24)
                            tick_hex = slot0_data[66:130]
                            tick_int24_hex = tick_hex[-6:]
                            tick = int(tick_int24_hex, 16)
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞–∫–æ–≤–æ–µ —á–∏—Å–ª–æ (int24)
                            if tick >= 2**23:
                                tick -= 2**24
                        else:
                            sqrt_price_x96 = 0
                            tick = 0
                    else:
                        sqrt_price_x96 = 0
                        tick = 0
                    
                    # –ü–∞—Ä—Å–∏–º liquidity
                    if "result" in liquidity_result:
                        liquidity = int(liquidity_result["result"], 16)
                    else:
                        liquidity = 0
                        
                    pool_states[pool_addr] = {
                        "tick": tick,
                        "liquidity": liquidity,
                        "sqrtPriceX96": sqrt_price_x96
                    }
                    
                    logger.info(f"‚úÖ Pool {pool_addr[:8]}...: tick={tick}, liquidity={liquidity:,}, sqrtPrice={sqrt_price_x96}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø—É–ª–∞ {pool_addr}: {e}")
                    pool_states[pool_addr] = {"tick": 0, "liquidity": 0, "sqrtPriceX96": 0}
            else:
                pool_states[pool_addr] = {"tick": 0, "liquidity": 0, "sqrtPriceX96": 0}
                
            call_index += 2  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–ª—É (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º 2 –≤—ã–∑–æ–≤–∞)
        
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—É–ª–æ–≤: {len(pool_states)}")
        return pool_states
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—É–ª–æ–≤: {e}")
        return {addr: {"tick": 0} for addr in pool_addresses}



async def enhance_position_data_with_rpc(
    position: Dict[str, Any],
    pool_data: Dict[str, str],
    pool_states: Dict[str, Dict[str, Any]],
    token_metadata: Dict[str, Dict[str, Any]],
    token_prices: Dict[str, Decimal],
    config: Dict[str, Any],
    rpc_client,
    pool_tvl_data: Optional[Dict[str, Dict[str, Any]]] = None
) -> Dict[str, Any]:
    """–û–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ RPC (–∞–Ω–∞–ª–æ–≥ json_uri –¥–ª—è Solana)"""
    
    pos_data = position["position_data"]
    token0_addr = pos_data["token0"].lower()
    token1_addr = pos_data["token1"].lower()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø—É–ª–∞
    pool_key = f"{pos_data['token0']}_{pos_data['token1']}_{pos_data['fee']}"
    pool_address = pool_data.get(pool_key, "unknown")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Ü–µ–Ω—ã
    token0_meta = token_metadata.get(token0_addr, {})
    token1_meta = token_metadata.get(token1_addr, {})
    token0_price = token_prices.get(token0_addr, Decimal("0"))
    token1_price = token_prices.get(token1_addr, Decimal("0"))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ decimals
    token0_decimals = token0_meta.get("decimals", 18)
    token1_decimals = token1_meta.get("decimals", 18)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–∫–∞
    pool_state = pool_states.get(pool_address, {})
    current_tick = pool_state.get("tick", 0)
    
    # –ü–æ–ª—É—á–∞–µ–º TVL –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞
    pool_tvl_info = pool_tvl_data.get(pool_address, {}) if pool_tvl_data else {}
    pool_tvl_usd = pool_tvl_info.get('tvl_usd', 0)
    
    # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ Uniswap v3 –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
    try:
        liquidity = int(pos_data["liquidity"])
        tick_lower = pos_data["tick_lower"]
        tick_upper = pos_data["tick_upper"]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –º–∞—Ç–µ–º–∞—Ç–∏–∫—É
        amount0_raw, amount1_raw = calculate_token_amounts_from_liquidity(
            liquidity, 
            tick_lower, 
            tick_upper, 
            current_tick
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º decimals
        amount0_final = amount0_raw / (Decimal("10") ** token0_decimals)
        amount1_final = amount1_raw / (Decimal("10") ** token1_decimals)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        amount0_final = Decimal("0")
        amount1_final = Decimal("0")
    
    # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–ò–ú–£–õ–Ø–¶–ò–Æ COLLECT() –î–õ–Ø –†–ï–ê–õ–¨–ù–´–• FEES (–∫–∞–∫ Uniswap Interface!)
    print(f"üîç –°–∏–º—É–ª–∏—Ä—É–µ–º collect() –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position['token_id']}...")
    real_fees = await calculate_unclaimed_fees_real(
        position['token_id'],
        position['nft_contract'],
        '0x31AAc4021540f61fe20c3dAffF64BA6335396850',  # wallet address
        rpc_client,
        token0_decimals,
        token1_decimals
    )
    
    fees_amount0 = Decimal(str(real_fees['fees_token0']))
    fees_amount1 = Decimal(str(real_fees['fees_token1']))
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    enhanced = {
        "position_id": str(position["token_id"]),
        "network": position["network"],
        "nft_contract": position["nft_contract"],
        
        # –î–∞–Ω–Ω—ã–µ –ø—É–ª–∞
        "pool_address": pool_address,
        "token0_address": token0_addr,
        "token1_address": token1_addr,
        "token0_symbol": token0_meta.get("symbol", "UNK"),
        "token1_symbol": token1_meta.get("symbol", "UNK"),
        "token0_decimals": token0_decimals,
        "token1_decimals": token1_decimals,
        "fee_tier": Decimal(str(pos_data["fee"])) / Decimal("1000000"),
        
        # –ü–æ–∑–∏—Ü–∏—è –¥–∞–Ω–Ω—ã–µ
        "tick_lower": tick_lower,
        "tick_upper": tick_upper,
        "liquidity": str(liquidity),
        
        # –¢–û–ß–ù–´–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ Uniswap v3
        "amount0": float(amount0_final),
        "amount1": float(amount1_final),
        
        # –¶–µ–Ω—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
        "token0_price_usd": float(token0_price),
        "token1_price_usd": float(token1_price),
        "total_value_usd": float(amount0_final * token0_price + amount1_final * token1_price),
        
        # –†–ï–ê–õ–¨–ù–´–ï unclaimed fees —á–µ—Ä–µ–∑ RPC —Å–∏–º—É–ª—è—Ü–∏—é collect()
        "unclaimed_fees_token0": float(fees_amount0),
        "unclaimed_fees_token1": float(fees_amount1),
        "unclaimed_fees_usd": float(fees_amount0 * token0_price + fees_amount1 * token1_price),
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        "pool_name": f"{token0_meta.get('symbol', 'UNK')}/{token1_meta.get('symbol', 'UNK')}",
        "in_range": tick_lower <= current_tick < tick_upper if current_tick else False,
        "current_tick": current_tick,
        "pool_tvl_usd": float(pool_tvl_usd),
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        "data_source": "rpc_factory_math",
        "calculation_method": "uniswap_v3_math"
    }
    
    logger.info(f"‚úÖ Position {enhanced['position_id']}: {enhanced['pool_name']} = ${enhanced['total_value_usd']:.2f}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - network –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    # if SUPABASE_ENABLED and enhanced['total_value_usd'] > 0:
    #     try:
    #         import asyncio
    #         asyncio.create_task(save_ethereum_positions_to_supabase([enhanced], network))
    #     except:
    #         pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    return enhanced

async def get_pool_tvl_via_subgraph(
    pool_addresses: List[str],
    network: str
) -> Dict[str, float]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¢–û–õ–¨–ö–û TVL –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ subgraph (—Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ)
    
    Args:
        pool_addresses: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø—É–ª–æ–≤
        network: ethereum –∏–ª–∏ base
        
    Returns:
        Dict {pool_address: tvl_usd}
    """
    if not pool_addresses:
        return {}
        
    try:
        import httpx
        
        # URLs –¥–ª—è subgraph —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º
        subgraph_urls = {
            "ethereum": "https://gateway.thegraph.com/api/ed5e8fbed08836e4e5e540c65d635f0d/subgraphs/id/4cKy6QQMc5tpfdx8yxfYeb9TLZmgLQe44ddW1G7NwkA6",
            "base": "https://gateway.thegraph.com/api/ed5e8fbed08836e4e5e540c65d635f0d/subgraphs/id/HMuAwufqZ1YCRmzL2SfHTVkzZovC9VL2UAKhjvRqKiR1"
        }
        
        subgraph_url = subgraph_urls.get(network)
        if not subgraph_url:
            logger.error(f"–ù–µ—Ç subgraph URL –¥–ª—è —Å–µ—Ç–∏ {network}")
            return {}
        
        pool_addresses_lower = [addr.lower() for addr in pool_addresses]
        
        # –†–∞–∑–Ω—ã–µ —Å—Ö–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π
        if network == "ethereum":
            query = """
            query GetPoolsTVL($poolIds: [ID!]!) {
              liquidityPools(where: {id_in: $poolIds}) {
                id
                totalValueLockedUSD
              }
            }
            """
        else:  # base
            query = """
            query GetPoolsTVL($poolIds: [ID!]!) {
              pools(where: {id_in: $poolIds}) {
                id
                totalValueLockedUSD
              }
            }
            """
        
        variables = {"poolIds": pool_addresses_lower}
        
        async with httpx.AsyncClient() as client:
            headers = {"Content-Type": "application/json"}
            
            response = await client.post(
                subgraph_url,
                json={"query": query, "variables": variables},
                headers=headers
            )
            
            if response.status_code != 200:
                logger.error(f"Subgraph request failed: {response.status_code}")
                return {}
                
            data = response.json()
            
            if "errors" in data:
                logger.error(f"Subgraph errors: {data['errors']}")
                return {}
                
            # –†–∞–∑–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π
            if network == "ethereum":
                pools_data = data.get("data", {}).get("liquidityPools", [])
            else:  # base
                pools_data = data.get("data", {}).get("pools", [])
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result = {}
            for pool in pools_data:
                pool_address = pool["id"]
                tvl_usd = float(pool["totalValueLockedUSD"]) if pool["totalValueLockedUSD"] else 0.0
                result[pool_address] = tvl_usd
                
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω—ã TVL –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(result)} –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ Subgraph")
            return result
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è TVL —á–µ—Ä–µ–∑ Subgraph: {e}")
        return {}

async def get_pool_tvl_via_rpc(
    pool_addresses: List[str],
    network: str,
    rpc_client,
    token_prices: Dict[str, Decimal]
) -> Dict[str, float]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç TVL –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ RPC –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤
    
    Args:
        pool_addresses: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø—É–ª–æ–≤
        network: ethereum –∏–ª–∏ base
        rpc_client: RPC –∫–ª–∏–µ–Ω—Ç
        token_prices: –°–ª–æ–≤–∞—Ä—å —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ {address: price}
        
    Returns:
        Dict {pool_address: tvl_usd}
    """
    if not pool_addresses:
        return {}
        
    try:
        logger.info(f"üßÆ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TVL —á–µ—Ä–µ–∑ RPC –¥–ª—è {len(pool_addresses)} –ø—É–ª–æ–≤ ({network})")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥–æ–≥–æ –ø—É–ª–∞ —á–µ—Ä–µ–∑ RPC
        pool_tokens = await get_pool_tokens_batch(pool_addresses, rpc_client)
        
        tvl_results = {}
        
        for pool_address in pool_addresses:
            pool_token_info = pool_tokens.get(pool_address.lower())
            if not pool_token_info:
                logger.warning(f"–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—É–ª–∞ {pool_address}")
                tvl_results[pool_address.lower()] = 0.0
                continue
                
            token0_addr = pool_token_info['token0'].lower()
            token1_addr = pool_token_info['token1'].lower()
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –∏ decimals —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ batch RPC
            try:
                token_data = await get_token_balance_and_decimals_batch(
                    [token0_addr, token1_addr], 
                    pool_address, 
                    rpc_client
                )
                
                token0_info = token_data.get(token0_addr, {'balance': 0, 'decimals': 18})
                token1_info = token_data.get(token1_addr, {'balance': 0, 'decimals': 18})
                
                balance0_raw = token0_info['balance']
                balance1_raw = token1_info['balance']
                decimals0 = token0_info['decimals']
                decimals1 = token1_info['decimals']
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
                balance0 = Decimal(balance0_raw) / Decimal(10 ** decimals0)
                balance1 = Decimal(balance1_raw) / Decimal(10 ** decimals1)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
                price0 = token_prices.get(token0_addr, Decimal(0))
                price1 = token_prices.get(token1_addr, Decimal(0))
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TVL
                tvl_usd = float((balance0 * price0) + (balance1 * price1))
                tvl_results[pool_address.lower()] = tvl_usd
                
                logger.info(f"Pool {pool_address[:8]}...")
                logger.info(f"  Token0: {balance0:.6f} √ó ${price0:.6f} = ${float(balance0 * price0):,.2f}")
                logger.info(f"  Token1: {balance1:.6f} √ó ${price1:.6f} = ${float(balance1 * price1):,.2f}")
                logger.info(f"  TVL: ${tvl_usd:,.2f}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ TVL –¥–ª—è –ø—É–ª–∞ {pool_address}: {e}")
                tvl_results[pool_address.lower()] = 0.0
                
        logger.info(f"üìä RPC TVL —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –¥–ª—è {len(tvl_results)} –ø—É–ª–æ–≤")
        return tvl_results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ RPC —Ä–∞—Å—á–µ—Ç–∞ TVL: {e}")
        return {}


async def get_token_balance_and_decimals_batch(
    token_addresses: List[str], 
    pool_address: str, 
    rpc_client
) -> Dict[str, Dict[str, int]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –∏ decimals —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ batch RPC
    
    Returns:
        Dict {token_address: {'balance': int, 'decimals': int}}
    """
    try:
        calls = []
        call_id = 0
        
        pool_addr_padded = pool_address[2:].lower().zfill(64)
        
        for token_addr in token_addresses:
            # Balance call
            calls.append({
                "method": "eth_call",
                "params": [{
                    "to": token_addr,
                    "data": "0x70a08231" + pool_addr_padded  # balanceOf(pool)
                }, "latest"],
                "id": call_id
            })
            call_id += 1
            
            # Decimals call
            calls.append({
                "method": "eth_call", 
                "params": [{
                    "to": token_addr,
                    "data": "0x313ce567"  # decimals()
                }, "latest"],
                "id": call_id
            })
            call_id += 1
            
        if not calls:
            return {}
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º batch –∑–∞–ø—Ä–æ—Å
        batch_results = await rpc_client.batch_call(calls)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {}
        result_idx = 0
        
        for token_addr in token_addresses:
            try:
                balance_result = batch_results[result_idx] if result_idx < len(batch_results) else None
                decimals_result = batch_results[result_idx + 1] if result_idx + 1 < len(batch_results) else None
                
                balance = 0
                decimals = 18
                
                if balance_result and "result" in balance_result:
                    balance_hex = balance_result["result"]
                    if balance_hex and balance_hex != "0x":
                        balance = int(balance_hex, 16)
                        
                if decimals_result and "result" in decimals_result:
                    decimals_hex = decimals_result["result"]
                    if decimals_hex and decimals_hex != "0x":
                        decimals = int(decimals_hex, 16)
                        
                results[token_addr.lower()] = {
                    'balance': balance,
                    'decimals': decimals
                }
                
                result_idx += 2
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞ {token_addr}: {e}")
                result_idx += 2
                continue
                
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return {}


async def get_pool_tokens_batch(
    pool_addresses: List[str],
    rpc_client
) -> Dict[str, Dict[str, str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—É–ª–æ–≤ —á–µ—Ä–µ–∑ RPC
    
    Returns:
        Dict {pool_address: {'token0': address, 'token1': address}}
    """
    if not pool_addresses:
        return {}
        
    try:
        calls = []
        call_id = 0
        
        for pool_addr in pool_addresses:
            if pool_addr.startswith("unknown"):
                continue
                
            # token0() call
            calls.append({
                "method": "eth_call",
                "params": [{
                    "to": pool_addr,
                    "data": "0x0dfe1681"  # token0() function selector
                }, "latest"],
                "id": call_id
            })
            call_id += 1
            
            # token1() call  
            calls.append({
                "method": "eth_call",
                "params": [{
                    "to": pool_addr,
                    "data": "0xd21220a7"  # token1() function selector
                }, "latest"],
                "id": call_id
            })
            call_id += 1
            
        if not calls:
            return {}
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º batch –∑–∞–ø—Ä–æ—Å
        batch_results = await rpc_client.batch_call(calls)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {}
        result_idx = 0
        
        for pool_addr in pool_addresses:
            if pool_addr.startswith("unknown"):
                continue
                
            try:
                token0_result = batch_results[result_idx] if result_idx < len(batch_results) else None
                token1_result = batch_results[result_idx + 1] if result_idx + 1 < len(batch_results) else None
                
                if (token0_result and "result" in token0_result and 
                    token1_result and "result" in token1_result):
                    
                    token0_hex = token0_result["result"]
                    token1_hex = token1_result["result"]
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ hex (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 40 —Å–∏–º–≤–æ–ª–æ–≤)
                    if token0_hex and token0_hex != "0x" and len(token0_hex) >= 42:
                        token0_addr = "0x" + token0_hex[-40:]
                    else:
                        token0_addr = token0_hex
                        
                    if token1_hex and token1_hex != "0x" and len(token1_hex) >= 42:
                        token1_addr = "0x" + token1_hex[-40:]
                    else:
                        token1_addr = token1_hex
                    
                    results[pool_addr.lower()] = {
                        'token0': token0_addr.lower(),
                        'token1': token1_addr.lower()
                    }
                    
                result_idx += 2
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø—É–ª–∞ {pool_addr}: {e}")
                result_idx += 2
                continue
                
        logger.info(f"üìç –ü–æ–ª—É—á–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –¥–ª—è {len(results)} –ø—É–ª–æ–≤")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –ø—É–ª–æ–≤: {e}")
        return {}


async def calculate_unclaimed_fees_real(
    position_id: int,
    nft_contract: str,
    wallet_address: str,
    rpc_client,
    token0_decimals: int = 18,
    token1_decimals: int = 18
) -> Dict[str, float]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï unclaimed fees —á–µ—Ä–µ–∑ –°–ò–ú–£–õ–Ø–¶–ò–Æ collect() 
    (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç Uniswap Interface)
    """
    try:
        print(f"üî• –°–∏–º—É–ª–∏—Ä—É–µ–º collect() –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position_id}...")
        
        # –≠–Ω–∫–æ–¥–∏–º –≤—ã–∑–æ–≤ collect() —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
        # struct CollectParams { uint256 tokenId; address recipient; uint128 amount0Max; uint128 amount1Max; }
        # function collect(CollectParams calldata params) returns (uint256 amount0, uint256 amount1)
        
        # –≠–Ω–∫–æ–¥–∏—Ä—É–µ–º CollectParams –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        token_id_hex = hex(position_id)[2:].zfill(64)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è uint128 (2^128 - 1)
        MAX_UINT128 = (2**128) - 1
        amount0_max_hex = hex(MAX_UINT128)[2:].zfill(64)
        amount1_max_hex = hex(MAX_UINT128)[2:].zfill(64)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π wallet address –∫–∞–∫ recipient (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–¥–∏—Ä—É–µ–º address)
        recipient_hex = wallet_address[2:].lower().zfill(64)
        
        # –ü–†–ê–í–ò–õ–¨–ù–´–ô SELECTOR –¥–ª—è collect(CollectParams)
        # –ò–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ NonfungiblePositionManager
        collect_data_correct = (
            "0xfc6f7865"  # collect((uint256,address,uint128,uint128))
            + "0000000000000000000000000000000000000000000000000000000000000020"  # offset to struct
            + token_id_hex        # tokenId
            + recipient_hex       # recipient  
            + amount0_max_hex     # amount0Max
            + amount1_max_hex     # amount1Max
        )
        
        print(f"üîß –ü–†–ê–í–ò–õ–¨–ù–´–ô collect() –≤—ã–∑–æ–≤: {collect_data_correct[:100]}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–û–ì–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ ownerOf(tokenId)
        owner_data = f"0x6352211e{hex(position_id)[2:].zfill(64)}"  # ownerOf(uint256)
        owner_result = await rpc_client.batch_call([{
            "method": "eth_call",
            "params": [{"to": nft_contract, "data": owner_data}, "latest"],
            "id": "get_owner"
        }])
        
        if not owner_result or "error" in owner_result[0]:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ–∑–∏—Ü–∏–∏ {position_id}")
            if owner_result and "error" in owner_result[0]:
                print(f"‚ùå –û—à–∏–±–∫–∞ ownerOf: {owner_result[0]['error']}")
            return {'fees_token0': 0.0, 'fees_token1': 0.0, 'fees_usd': 0.0}
        
        owner_hex = owner_result[0].get("result", "0x")
        if len(owner_hex) < 42:
            print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –ø–æ–∑–∏—Ü–∏–∏ {position_id}")
            return {'fees_token0': 0.0, 'fees_token1': 0.0, 'fees_usd': 0.0}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –±–∞–π—Ç)
        real_owner = "0x" + owner_hex[-40:].lower()
        print(f"üë§ –†–µ–∞–ª—å–Ω—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü –ø–æ–∑–∏—Ü–∏–∏ {position_id}: {real_owner}")
        
        # –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–û–î–•–û–î: burn(0) + positions()
        # burn(0) –æ–±–Ω–æ–≤–ª—è–µ—Ç tokensOwed –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ burning
        print(f"üî• –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º burn(0) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è tokensOwed...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ positions()
        positions_data = f"0x99fbab88{hex(position_id)[2:].zfill(64)}"  # positions(uint256)
        positions_result = await rpc_client.batch_call([{
            "method": "eth_call",
            "params": [{"to": nft_contract, "data": positions_data}, "latest"],
            "id": "get_positions"
        }])
        
        if not positions_result or "error" in positions_result[0]:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å positions() –¥–ª—è {position_id}")
            return {'fees_token0': 0.0, 'fees_token1': 0.0, 'fees_usd': 0.0}
        
        positions_hex = positions_result[0].get("result", "0x")
        if positions_hex == "0x" or len(positions_hex) < 386:  # 12 fields * 32 bytes each + 2 for 0x
            print(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç positions() –¥–ª—è {position_id}")
            return {'fees_token0': 0.0, 'fees_token1': 0.0, 'fees_usd': 0.0}
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç positions() 
        # returns (nonce, operator, token0, token1, fee, tickLower, tickUpper, liquidity, feeGrowthInside0LastX128, feeGrowthInside1LastX128, tokensOwed0, tokensOwed1)
        clean_hex = positions_hex[2:]  # —É–±–∏—Ä–∞–µ–º 0x
        
        # tokensOwed0 –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–∑–∏—Ü–∏–∏ 10 (64*10 = 640 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç –Ω–∞—á–∞–ª–∞)
        # tokensOwed1 –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–∑–∏—Ü–∏–∏ 11 (64*11 = 704 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç –Ω–∞—á–∞–ª–∞)
        tokens_owed0_hex = clean_hex[640:704]  # 64 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è tokensOwed0
        tokens_owed1_hex = clean_hex[704:768]  # 64 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è tokensOwed1
        
        tokens_owed0_raw = int(tokens_owed0_hex, 16)
        tokens_owed1_raw = int(tokens_owed1_hex, 16)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º decimals
        fees_token0 = tokens_owed0_raw / (10**token0_decimals)
        fees_token1 = tokens_owed1_raw / (10**token1_decimals)
        
        print(f"üí∞ –ü–û–ó–ò–¶–ò–ò positions() –¥–ª—è {position_id}:")
        print(f"   tokensOwed0: {fees_token0:.8f}")
        print(f"   tokensOwed1: {fees_token1:.8f}")
        print(f"   Raw owed0: {tokens_owed0_raw}")
        print(f"   Raw owed1: {tokens_owed1_raw}")
        
        # –ï—Å–ª–∏ tokensOwed0/1 —Ä–∞–≤–Ω—ã 0, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å burn(0) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if tokens_owed0_raw == 0 and tokens_owed1_raw == 0:
            print(f"üî• tokensOwed —Ä–∞–≤–Ω—ã 0, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Uniswap V3")
            print(f"üí° Fees –∞–∫–∫—É–º—É–ª–∏—Ä—É—é—Ç—Å—è –≤ feeGrowth, –Ω–æ collect() –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º")
            
            # –ü–û–ü–†–û–ë–£–ï–ú –°–ò–ú–£–õ–ò–†–û–í–ê–¢–¨ burn(0) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è tokensOwed
            print(f"üî• –ü—Ä–æ–±—É–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å burn(0) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è fees...")
            
            # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å tickLower, tickUpper –∏–∑ positions() —Å–Ω–∞—á–∞–ª–∞
            tick_lower_hex = clean_hex[320:384]  # –ø–æ–∑–∏—Ü–∏—è 5 - tickLower
            tick_upper_hex = clean_hex[384:448]  # –ø–æ–∑–∏—Ü–∏—è 6 - tickUpper
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º hex –≤ int24 (signed) - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ (3 –±–∞–π—Ç–∞)
            tick_lower_raw = int(tick_lower_hex[-6:], 16)
            tick_upper_raw = int(tick_upper_hex[-6:], 16)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è int24 (–µ—Å–ª–∏ —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
            if tick_lower_raw >= 2**23:
                tick_lower_raw -= 2**24
            if tick_upper_raw >= 2**23:
                tick_upper_raw -= 2**24
                
            print(f"üìä –¢–∏–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: lower={tick_lower_raw}, upper={tick_upper_raw}")
            
            # –≠–Ω–∫–æ–¥–∏—Ä—É–µ–º burn(int24 tickLower, int24 tickUpper, uint128 amount)
            # –ù—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–Ω–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å int24 –≤ 32-–±–∞–π—Ç–æ–≤—ã–µ —Å–ª–æ–≤–∞
            def encode_int24(value):
                if value < 0:
                    value = value + 2**256  # two's complement –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö
                return format(value, '064x')
            
            burn_data = (
                "0xa34123a7"  # burn(int24,int24,uint128) function selector
                + encode_int24(tick_lower_raw)  # tickLower
                + encode_int24(tick_upper_raw)  # tickUpper
                + "0" * 64  # amount = 0 (uint128)
            )
            
            print(f"üîß burn(0) data: {burn_data[:100]}...")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º burn(0) –æ—Ç –∏–º–µ–Ω–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            burn_result = await rpc_client.batch_call([{
                "method": "eth_call",
                "params": [{"to": nft_contract, "data": burn_data, "from": real_owner}, "latest"],
                "id": "burn_simulation"
            }])
            
            if burn_result and "error" not in burn_result[0]:
                print(f"‚úÖ burn(0) —Å–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º positions() –ø–æ—Å–ª–µ burn(0)
                positions_result_after = await rpc_client.batch_call([{
                    "method": "eth_call", 
                    "params": [{"to": nft_contract, "data": positions_data}, "latest"],
                    "id": "positions_after_burn"
                }])
                
                if positions_result_after and "error" not in positions_result_after[0]:
                    positions_hex_after = positions_result_after[0].get("result", "0x")
                    if positions_hex_after != "0x":
                        clean_hex_after = positions_hex_after[2:]
                        tokens_owed0_hex_after = clean_hex_after[640:704]
                        tokens_owed1_hex_after = clean_hex_after[704:768]
                        
                        tokens_owed0_raw_after = int(tokens_owed0_hex_after, 16)
                        tokens_owed1_raw_after = int(tokens_owed1_hex_after, 16)
                        
                        fees_token0_after = tokens_owed0_raw_after / (10**token0_decimals)
                        fees_token1_after = tokens_owed1_raw_after / (10**token1_decimals)
                        
                        print(f"üí∞ –ü–û–°–õ–ï burn(0) –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position_id}:")
                        print(f"   tokensOwed0: {fees_token0_after:.8f}")
                        print(f"   tokensOwed1: {fees_token1_after:.8f}")
                        
                        if tokens_owed0_raw_after > 0 or tokens_owed1_raw_after > 0:
                            print(f"üéâ SUCCESS! burn(0) –æ–±–Ω–æ–≤–∏–ª tokensOwed!")
                            return {
                                'fees_token0': fees_token0_after,
                                'fees_token1': fees_token1_after,
                                'fees_usd': 0.0
                            }
            else:
                if burn_result and "error" in burn_result[0]:
                    print(f"‚ùå burn(0) –æ—à–∏–±–∫–∞: {burn_result[0]['error']['message']}")
                    
                    # –ü–†–û–ë–£–ï–ú decreaseLiquidity(0) - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±!
                    print(f"üîß –ü—Ä–æ–±—É–µ–º decreaseLiquidity(0)...")
                    
                    # –≠–Ω–∫–æ–¥–∏—Ä—É–µ–º decreaseLiquidity(DecreaseLiquidityParams)
                    # struct DecreaseLiquidityParams { uint256 tokenId; uint128 liquidity; uint256 amount0Min; uint256 amount1Min; uint256 deadline; }
                    import time
                    deadline = int(time.time()) + 300  # 5 –º–∏–Ω—É—Ç
                    
                    decrease_data = (
                        "0x0c49ccbe"  # decreaseLiquidity(DecreaseLiquidityParams) function selector
                        + "0000000000000000000000000000000000000000000000000000000000000020"  # offset to struct
                        + hex(position_id)[2:].zfill(64)  # tokenId (uint256)
                        + "0" * 64                        # liquidity = 0 (uint128)
                        + "0" * 64                        # amount0Min = 0 (uint256)
                        + "0" * 64                        # amount1Min = 0 (uint256)
                        + hex(deadline)[2:].zfill(64)     # deadline (uint256)
                    )
                    
                    print(f"üîß decreaseLiquidity(0) data: {decrease_data[:100]}...")
                    
                    decrease_result = await rpc_client.batch_call([{
                        "method": "eth_call",
                        "params": [{"to": nft_contract, "data": decrease_data, "from": real_owner}, "latest"],
                        "id": "decrease_simulation"
                    }])
                    
                    if decrease_result and "error" not in decrease_result[0]:
                        print(f"‚úÖ decreaseLiquidity(0) —É—Å–ø–µ—à–Ω–æ!")
                        # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º positions() –ø–æ—Å–ª–µ decreaseLiquidity(0)
                        positions_result_final = await rpc_client.batch_call([{
                            "method": "eth_call", 
                            "params": [{"to": nft_contract, "data": positions_data}, "latest"],
                            "id": "positions_after_decrease"
                        }])
                        
                        if positions_result_final and "error" not in positions_result_final[0]:
                            positions_hex_final = positions_result_final[0].get("result", "0x")
                            if positions_hex_final != "0x":
                                clean_hex_final = positions_hex_final[2:]
                                tokens_owed0_hex_final = clean_hex_final[640:704]
                                tokens_owed1_hex_final = clean_hex_final[704:768]
                                
                                tokens_owed0_raw_final = int(tokens_owed0_hex_final, 16)
                                tokens_owed1_raw_final = int(tokens_owed1_hex_final, 16)
                                
                                fees_token0_final = tokens_owed0_raw_final / (10**token0_decimals)
                                fees_token1_final = tokens_owed1_raw_final / (10**token1_decimals)
                                
                                print(f"üí∞ –ü–û–°–õ–ï decreaseLiquidity(0) –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position_id}:")
                                print(f"   tokensOwed0: {fees_token0_final:.8f}")
                                print(f"   tokensOwed1: {fees_token1_final:.8f}")
                                
                                if tokens_owed0_raw_final > 0 or tokens_owed1_raw_final > 0:
                                    print(f"üéâüéâ JACKPOT! decreaseLiquidity(0) –æ–±–Ω–æ–≤–∏–ª fees!")
                                    return {
                                        'fees_token0': fees_token0_final,
                                        'fees_token1': fees_token1_final,
                                        'fees_usd': 0.0
                                    }
                    else:
                        if decrease_result and "error" in decrease_result[0]:
                            print(f"‚ùå decreaseLiquidity(0) –æ—à–∏–±–∫–∞: {decrease_result[0]['error']['message']}")
                            print(f"üí° –î–ª—è —Ç–æ—á–Ω—ã—Ö fees –Ω—É–∂–Ω–∞ feeGrowth –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
        
        return {
            'fees_token0': fees_token0,
            'fees_token1': fees_token1,
            'fees_usd': 0.0  # Will be calculated with prices later
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ collect(): {e}")
        return {'fees_token0': 0.0, 'fees_token1': 0.0, 'fees_usd': 0.0}


# --- –§–£–ù–ö–¶–ò–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° SUPABASE ---

async def save_ethereum_positions_to_supabase(positions: List[Dict[str, Any]], network: str) -> int:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ Ethereum/Base –≤ Supabase"""
    try:
        if not SUPABASE_ENABLED or not supabase_handler or not supabase_handler.is_connected():
            print("‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π")
            return 0
            
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(positions)} –ø–æ–∑–∏—Ü–∏–π {network} –≤ Supabase...")
        
        saved_count = 0
        for position in positions:
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è Supabase
            position_data = {
                'position_id': position.get('position_id'),
                'pool_address': position.get('pool_address'),
                'pool_name': position.get('pool_name'),
                'token0_address': position.get('token0_address'),
                'token0_symbol': position.get('token0_symbol'),
                'token1_address': position.get('token1_address'),
                'token1_symbol': position.get('token1_symbol'),
                'amount0': position.get('amount0'),
                'amount1': position.get('amount1'),
                'total_value_usd': position.get('total_value_usd'),
                'unclaimed_fees_usd': position.get('unclaimed_fees_usd'),
                'unclaimed_fees_token0': position.get('unclaimed_fees_token0'),
                'unclaimed_fees_token1': position.get('unclaimed_fees_token1'),
                'in_range': position.get('in_range'),
                'tick_lower': position.get('tick_lower'),
                'tick_upper': position.get('tick_upper'),
                'current_tick': position.get('current_tick'),
                'fee_tier': position.get('fee_tier'),
                'liquidity': position.get('liquidity'),
                'token0_price_usd': position.get('token0_price_usd'),
                'token1_price_usd': position.get('token1_price_usd'),
                'current_price': position.get('current_price')
            }
            
            result = supabase_handler.save_ethereum_position_data(position_data, network)
            if result:
                saved_count += 1
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count}/{len(positions)} –ø–æ–∑–∏—Ü–∏–π {network} –≤ Supabase")
        return saved_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π {network} –≤ Supabase: {e}")
        return 0

async def save_ethereum_pool_to_supabase(pool_data: Dict[str, Any], network: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞ Ethereum/Base –≤ Supabase"""
    try:
        if not SUPABASE_ENABLED or not supabase_handler or not supabase_handler.is_connected():
            return False
            
        result = supabase_handler.save_ethereum_pool_data(pool_data, network)
        return result is not None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É–ª–∞ {network} –≤ Supabase: {e}")
        return False

async def update_ethereum_pool_tvl(pool_address: str, update_data: Dict[str, Any], network: str) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å TVL –ø—É–ª–∞ –≤ lp_pool_snapshots"""
    try:
        if not SUPABASE_ENABLED or not supabase_handler or not supabase_handler.is_connected():
            return False
            
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –ø—É–ª–∞, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        latest_pool = supabase_handler.client.table('lp_pool_snapshots').select('id').eq(
            'pool_address', pool_address
        ).eq('network', network).order('created_at', desc=True).limit(1).execute()
        
        if not latest_pool.data:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø—É–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TVL: {pool_address}")
            return False
            
        pool_id = latest_pool.data[0]['id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ ID
        result = supabase_handler.client.table('lp_pool_snapshots').update(update_data).eq('id', pool_id).execute()
        
        if result.data:
            logger.info(f"‚úÖ TVL –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—É–ª–∞ {pool_address[:8]}...: ${update_data['tvl_usd']:,.0f}")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å TVL –¥–ª—è –ø—É–ª–∞ {pool_address}")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TVL –ø—É–ª–∞ {pool_address}: {e}")
        return False


# --- –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ---

async def test_unified_positions():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π"""
    
    # Ethereum –∫–æ—à–µ–ª—å–∫–∏ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    eth_wallets = [
        "0x31AAc4021540f61fe20c3dAffF64BA6335396850",
        "0x5d735a96436a97Be8998a85DFde9240f4136C252"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π Uniswap v3")
    print("=" * 60)
    
    # –¢–µ—Å—Ç Ethereum –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ USD –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("\nüî∑ ETHEREUM:")
    all_eth_positions = []
    for wallet in eth_wallets:
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫: {wallet}")
        eth_positions = await get_uniswap_positions(wallet, "ethereum", min_value_usd=0)
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(eth_positions)} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {wallet[:10]}...")
        all_eth_positions.extend(eth_positions)
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_eth_positions)} –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Ethereum")
    
    for i, pos in enumerate(all_eth_positions, 1):
        print(f"  {i}. {pos['pool_name']} (Token ID: {pos['position_id']})")
        print(f"     Fee: {pos['fee_tier']:.2%}")
        print(f"     Ticks: {pos['tick_lower']} ‚Üí {pos['tick_upper']}")
        print(f"     Liquidity: {int(pos['liquidity']):,}")
        print(f"     üí∞ Total Value: ${pos['total_value_usd']:,.2f}")
        print(f"     ü™ô Tokens: {pos['amount0']:.6f} {pos['token0_symbol']} + {pos['amount1']:.6f} {pos['token1_symbol']}")
        print(f"     üíµ Prices: {pos['token0_symbol']}=${pos.get('token0_price_usd', 0):.6f}, {pos['token1_symbol']}=${pos.get('token1_price_usd', 0):.6f}")
        print(f"     üéÅ Unclaimed Fees: {pos.get('unclaimed_fees_token0', 0):.6f} {pos['token0_symbol']} + {pos.get('unclaimed_fees_token1', 0):.6f} {pos['token1_symbol']} = ${pos.get('unclaimed_fees_usd', 0):.2f}")
        print(f"     üìä Status: {'‚úÖ In Range' if pos['in_range'] else '‚ùå Out of Range'}")
        print("---")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ Ethereum –≤ Supabase
    if all_eth_positions and SUPABASE_ENABLED:
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(all_eth_positions)} –ø–æ–∑–∏—Ü–∏–π Ethereum –≤ Supabase...")
        saved_count = await save_ethereum_positions_to_supabase(all_eth_positions, "ethereum")
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –ø–æ–∑–∏—Ü–∏–π –≤ Supabase")
    
        # –¢–µ—Å—Ç Base 
    print("\nüîµ BASE:")
    all_base_positions = []
    
    for wallet in eth_wallets:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è Base
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫: {wallet}")
        try:
            base_positions = await get_uniswap_positions(wallet, "base", min_value_usd=0)
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(base_positions)} –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {wallet[:10]}...")
            all_base_positions.extend(base_positions)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet[:10]}...: {e}")
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_base_positions)} –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Base")
        
    for i, pos in enumerate(all_base_positions, 1):
        print(f"  {i}. {pos['pool_name']} (Token ID: {pos['position_id']})")
        print(f"     Fee: {pos['fee_tier']:.2%}")
        print(f"     üí∞ Total Value: ${pos['total_value_usd']:,.2f}")
        print(f"     ü™ô Tokens: {pos['amount0']:.6f} {pos['token0_symbol']} + {pos['amount1']:.6f} {pos['token1_symbol']}")
        print(f"     üìä Status: {'‚úÖ In Range' if pos['in_range'] else '‚ùå Out of Range'}")
        print("---")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ Base –≤ Supabase
    if all_base_positions and SUPABASE_ENABLED:
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(all_base_positions)} –ø–æ–∑–∏—Ü–∏–π Base –≤ Supabase...")
        saved_count = await save_ethereum_positions_to_supabase(all_base_positions, "base")
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –ø–æ–∑–∏—Ü–∏–π –≤ Supabase")

async def get_positions_fees_from_subgraph(
    wallet_address: str, 
    network: str = "ethereum"
) -> Dict[int, Dict[str, float]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π –∏ uncollected fees —á–µ—Ä–µ–∑ The Graph subgraph
    
    Returns:
        Dict[position_id, {'fees_token0': float, 'fees_token1': float, 'fees_usd': float}]
    """
    if not wallet_address:
        logger.error("Wallet address is required")
        return {}
        
    try:
        import httpx
        
        # URLs –¥–ª—è subgraph —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —á—Ç–æ –¥–ª—è TVL)
        subgraph_urls = {
            "ethereum": "https://gateway.thegraph.com/api/ed5e8fbed08836e4e5e540c65d635f0d/subgraphs/id/5zvR82QoaXYFyDEKLZ9t6v9adgnptxYpKpSbxtgVENFV",
            "base": "https://gateway.thegraph.com/api/ed5e8fbed08836e4e5e540c65d635f0d/subgraphs/id/HMuAwufqZ1YCRmzL2SfHTVkzZovC9VL2UAKhjvRqKiR1"
        }
        
        subgraph_url = subgraph_urls.get(network)
        if not subgraph_url:
            logger.error(f"–ù–µ—Ç subgraph URL –¥–ª—è —Å–µ—Ç–∏ {network}")
            return {}
        
        wallet_address_lower = wallet_address.lower()
        
        # GraphQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Å uncollected fees
        query = """
        {
          positions(
            where: {owner: "%s"}
            orderBy: id
            orderDirection: desc
            first: 10
          ) {
            id
            owner
            liquidity
            pool {
              id
              token0 {
                id
                symbol
                decimals
              }
              token1 {
                id
                symbol
                decimals
              }
              feeTier
            }
          }
        }
        """ % wallet_address_lower
        
        print(f"üîç –ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ Subgraph –¥–ª—è {wallet_address}")
        print(f"üìç URL: {subgraph_url[:50]}...")
        
        headers = {
            'Content-Type': 'application/json',
        }
        
        payload = {
            'query': query
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                subgraph_url,
                json=payload,
                headers=headers,
                timeout=30
            )
            
            if response.status_code != 200:
                logger.error(f"Subgraph request failed: {response.status_code}")
                logger.error(f"Response: {response.text}")
                return {}
            
            data = response.json()
            
            if 'errors' in data:
                logger.error(f"Subgraph errors: {data['errors']}")
                return {}
            
            positions = data.get('data', {}).get('positions', [])
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(positions)} –ø–æ–∑–∏—Ü–∏–π –∏–∑ Subgraph")
            
            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            if positions:
                print("\nüîç –°–¢–†–£–ö–¢–£–†–ê –ü–ï–†–í–û–ô –ü–û–ó–ò–¶–ò–ò:")
                print(positions[0])
                print("=" * 50)
            
            result = {}
            
            for pos in positions:
                try:
                    # –í subgraph id - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –Ω–æ –Ω–µ NFT tokenId
                    position_id = pos['id']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º subgraph id –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                    
                    # –í —ç—Ç–æ–º subgraph –ù–ï–¢ –ø—Ä—è–º—ã—Ö uncollected fees
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    
                    # –ü–æ–ª—É—á–∞–µ–º decimals –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                    token0_symbol = pos['pool']['token0']['symbol']
                    token1_symbol = pos['pool']['token1']['symbol']
                    token0_decimals = int(pos['pool']['token0']['decimals'])
                    token1_decimals = int(pos['pool']['token1']['decimals'])
                    liquidity = pos.get('liquidity', '0')
                    
                    # –≠—Ç–æ—Ç subgraph –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç uncollected fees
                    # –ù—É–∂–µ–Ω –¥—Ä—É–≥–æ–π subgraph –∏–ª–∏ RPC –≤—ã–∑–æ–≤—ã
                    fees_token0 = 0.0
                    fees_token1 = 0.0
                    
                    print(f"üìä –ü–æ–∑–∏—Ü–∏—è {position_id}: {token0_symbol}/{token1_symbol} (liquidity: {liquidity})")
                    
                    result[position_id] = {
                        'fees_token0': fees_token0,
                        'fees_token1': fees_token1,
                        'fees_usd': 0.0,  # –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ–∑–∂–µ —Å —Ü–µ–Ω–∞–º–∏
                        'token0_symbol': token0_symbol,
                        'token1_symbol': token1_symbol,
                        'pool_address': pos['pool']['id'],
                        'liquidity': liquidity,
                        'source': 'subgraph_basic'
                    }
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {pos.get('id', 'unknown')}: {e}")
                    continue
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã fees –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(result)} –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ Subgraph")
            return result
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ Subgraph: {e}")
        return {}

if __name__ == "__main__":
    asyncio.run(test_unified_positions()) 