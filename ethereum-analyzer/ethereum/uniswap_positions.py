"""
Uniswap v3 Positions Manager - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
"""

import asyncio
import logging
import sys
import os
from typing import List, Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), '../..'))

from ethereum.data_sources.rpc_client import create_ethereum_rpc_client, EthereumRPCClient
from ethereum.contracts.uniswap_abis import NONFUNGIBLE_POSITION_MANAGER, get_token_symbol

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def decode_position_data(hex_data):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ hex —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ positions()"""
    if not hex_data or hex_data == "0x":
        return None
    
    try:
        # –£–±–∏—Ä–∞–µ–º 0x –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 32-–±–∞–π—Ç–æ–≤—ã–µ —á–∞–Ω–∫–∏ (64 hex —Å–∏–º–≤–æ–ª–∞)
        clean_hex = hex_data[2:]
        chunks = [clean_hex[i:i+64] for i in range(0, len(clean_hex), 64)]
        
        if len(chunks) < 12:
            return None
        
        def decode_int24(hex_chunk):
            """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ signed int24 –∏–∑ 32-–±–∞–π—Ç–æ–≤–æ–≥–æ chunk"""
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –±–∞–π—Ç–∞ (6 hex —Å–∏–º–≤–æ–ª–æ–≤)
            int24_hex = hex_chunk[-6:]
            value = int(int24_hex, 16)
            
            # –ï—Å–ª–∏ —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —ç—Ç–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
            if value >= 2**23:
                value = value - 2**24
            return value
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ —Å–æ–≥–ª–∞—Å–Ω–æ ABI positions()
        return {
            'nonce': int(chunks[0], 16),
            'operator': '0x' + chunks[1][-40:],  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –±–∞–π—Ç
            'token0': '0x' + chunks[2][-40:],
            'token1': '0x' + chunks[3][-40:], 
            'fee': int(chunks[4], 16),
            'tick_lower': decode_int24(chunks[5]),  # –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ signed int24
            'tick_upper': decode_int24(chunks[6]),  # –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ signed int24
            'liquidity': int(chunks[7], 16),
            'fee_growth_inside0_last_x128': int(chunks[8], 16),
            'fee_growth_inside1_last_x128': int(chunks[9], 16),
            'tokens_owed0': int(chunks[10], 16),
            'tokens_owed1': int(chunks[11], 16)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return None

async def test_position_discovery():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    wallet_address = "0x31AAc4021540f61fe20c3dAffF64BA6335396850"
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è {wallet_address}")
    
    rpc_client = create_ethereum_rpc_client()
    
    async with rpc_client:
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
            balance_call = {
                "method": "eth_call",
                "params": [
                    {
                        "to": NONFUNGIBLE_POSITION_MANAGER,
                        "data": f"0x70a08231{wallet_address[2:].zfill(64)}"
                    },
                    "latest"
                ],
                "id": 1
            }
            
            results = await rpc_client.batch_call([balance_call])
            if not (results and "result" in results[0]):
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å balance")
                return
                
            balance = int(results[0]["result"], 16)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {balance} –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ—à–µ–ª—å–∫–µ")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 token IDs
            max_test = min(3, balance)
            token_id_calls = []
            
            for i in range(max_test):
                data = (
                    "0x2f745c59" +  # tokenOfOwnerByIndex selector
                    wallet_address[2:].zfill(64) +  # owner
                    hex(i)[2:].zfill(64)  # index
                )
                
                token_id_calls.append({
                    "method": "eth_call",
                    "params": [
                        {
                            "to": NONFUNGIBLE_POSITION_MANAGER,
                            "data": data
                        },
                        "latest"
                    ],
                    "id": i + 2
                })
            
            token_results = await rpc_client.batch_call(token_id_calls)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º token IDs
            token_ids = []
            for result in token_results:
                if "result" in result:
                    token_ids.append(int(result["result"], 16))
            
            print(f"‚úÖ Token IDs: {token_ids}")
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ token ID
            position_calls = []
            for i, token_id in enumerate(token_ids):
                data = (
                    "0x99fbab88" +  # positions selector
                    hex(token_id)[2:].zfill(64)  # tokenId
                )
                
                position_calls.append({
                    "method": "eth_call",
                    "params": [
                        {
                            "to": NONFUNGIBLE_POSITION_MANAGER,
                            "data": data
                        },
                        "latest"
                    ],
                    "id": i + 10
                })
            
            position_results = await rpc_client.batch_call(position_calls)
            
            # 4. –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π
            print(f"\nüìä –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π:")
            for i, (token_id, result) in enumerate(zip(token_ids, position_results)):
                if "result" in result:
                    position_data = decode_position_data(result["result"])
                    
                    if position_data:
                        token0_sym = get_token_symbol(position_data['token0'])
                        token1_sym = get_token_symbol(position_data['token1'])
                        
                        fee_percent = position_data['fee'] / 10000
                        
                        print(f"\n  Position {i+1} (Token ID: {token_id}):")
                        print(f"    üè¶ –ü–∞—Ä–∞: {token0_sym}/{token1_sym}")
                        print(f"    üí∞ Fee tier: {fee_percent}%") 
                        print(f"    üìà Tick range: {position_data['tick_lower']} to {position_data['tick_upper']}")
                        print(f"    üíß Liquidity: {position_data['liquidity']:,}")
                        print(f"    üíé Token0: {position_data['token0']}")
                        print(f"    üíé Token1: {position_data['token1']}")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ uncollected fees
                        if position_data['tokens_owed0'] > 0 or position_data['tokens_owed1'] > 0:
                            print(f"    üéÅ Unpaid fees: {position_data['tokens_owed0']} | {position_data['tokens_owed1']}")
                    else:
                        print(f"  Position {i+1}: ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å")
                else:
                    print(f"  Position {i+1}: ‚ùå –û—à–∏–±–∫–∞: {result}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_position_discovery())

# ======================================================================
# Phase 3: Pool Data Integration 
# ======================================================================

async def fetch_pool_states(pool_addresses: List[str], rpc_client) -> Dict[str, Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–æ–≤ Uniswap v3 —á–µ—Ä–µ–∑ batch –≤—ã–∑–æ–≤—ã
    
    Args:
        pool_addresses: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø—É–ª–æ–≤ 
        rpc_client: RPC –∫–ª–∏–µ–Ω—Ç
        
    Returns:
        Dict —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∂–¥–æ–≥–æ –ø—É–ª–∞: {pool_address: {sqrtPriceX96, tick, liquidity, fee}}
    """
    try:
        if not pool_addresses:
            return {}
            
        calls = []
        call_id = 1
        
        # –°–æ–∑–¥–∞–µ–º batch –≤—ã–∑–æ–≤—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–ª–∞
        for pool_addr in pool_addresses:
            # slot0() -> sqrtPriceX96, tick, observationIndex, observationCardinality, ...
            slot0_data = "0x3850c7bd"  # slot0() selector
            calls.append({
                "method": "eth_call",
                "params": [{"to": pool_addr, "data": slot0_data}, "latest"],
                "id": call_id
            })
            call_id += 1
            
            # liquidity() -> uint128 liquidity
            liquidity_data = "0x1a686502"  # liquidity() selector  
            calls.append({
                "method": "eth_call", 
                "params": [{"to": pool_addr, "data": liquidity_data}, "latest"],
                "id": call_id
            })
            call_id += 1
            
            # fee() -> uint24 fee
            fee_data = "0xddca3f43"  # fee() selector
            calls.append({
                "method": "eth_call",
                "params": [{"to": pool_addr, "data": fee_data}, "latest"], 
                "id": call_id
            })
            call_id += 1
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º batch –≤—ã–∑–æ–≤
        results = await rpc_client.batch_call(calls)
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        pool_states = {}
        
        for i, pool_addr in enumerate(pool_addresses):
            try:
                # –ö–∞–∂–¥—ã–π –ø—É–ª –∏–º–µ–µ—Ç 3 –≤—ã–∑–æ–≤–∞: slot0, liquidity, fee
                slot0_result = results[i * 3]
                liquidity_result = results[i * 3 + 1] 
                fee_result = results[i * 3 + 2]
                
                if all("result" in r for r in [slot0_result, liquidity_result, fee_result]):
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º slot0 (sqrtPriceX96, tick, ...)
                    slot0_hex = slot0_result["result"]
                    sqrt_price_x96 = int(slot0_hex[2:66], 16)  # –ü–µ—Ä–≤—ã–µ 32 –±–∞–π—Ç–∞
                    tick = int(slot0_hex[66:130], 16)  # –°–ª–µ–¥—É—é—â–∏–µ 32 –±–∞–π—Ç–∞
                    # –ï—Å–ª–∏ tick –±–æ–ª—å—à–µ 2^31, —ç—Ç–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
                    if tick >= 2**31:
                        tick = tick - 2**32
                    
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º liquidity
                    liquidity = int(liquidity_result["result"], 16)
                    
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º fee 
                    fee = int(fee_result["result"], 16)
                    
                    pool_states[pool_addr] = {
                        "sqrtPriceX96": sqrt_price_x96,
                        "tick": tick,
                        "liquidity": liquidity,
                        "fee": fee
                    }
                    
                    print(f"‚úÖ Pool {pool_addr[:8]}...: tick={tick}, liquidity={liquidity:,}, fee={fee}")
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–ª–∞ {pool_addr}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—É–ª–∞ {pool_addr}: {e}")
                
        return pool_states
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–æ–≤: {e}")
        return {}

async def get_pool_address_from_tokens(token0: str, token1: str, fee: int, rpc_client) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –ø—É–ª–∞ —á–µ—Ä–µ–∑ UniswapV3Factory.getPool()
    
    Args:
        token0: –ê–¥—Ä–µ—Å –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        token1: –ê–¥—Ä–µ—Å –≤—Ç–æ—Ä–æ–≥–æ —Ç–æ–∫–µ–Ω–∞  
        fee: Fee tier (500, 3000, 10000)
        rpc_client: RPC –∫–ª–∏–µ–Ω—Ç
        
    Returns:
        –ê–¥—Ä–µ—Å –ø—É–ª–∞ –∏–ª–∏ None
    """
    try:
        from ethereum.contracts.uniswap_abis import UNISWAP_V3_FACTORY
        
        # getPool(address,address,uint24) selector 
        selector = "0x1698ee82"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã (token0 < token1)
        if token0.lower() > token1.lower():
            token0, token1 = token1, token0
            
        data = (
            selector +
            token0[2:].zfill(64) +  # token0
            token1[2:].zfill(64) +  # token1  
            hex(fee)[2:].zfill(64)  # fee
        )
        
        call = {
            "method": "eth_call",
            "params": [{"to": UNISWAP_V3_FACTORY, "data": data}, "latest"],
            "id": 1
        }
        
        results = await rpc_client.batch_call([call])
        
        if results and "result" in results[0] and results[0]["result"] != "0x" + "0" * 64:
            pool_address = "0x" + results[0]["result"][-40:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –±–∞–π—Ç–æ–≤
            return pool_address
            
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø—É–ª–∞: {e}")
        return None

async def fetch_token_prices_coingecko_ethereum(token_addresses: List[str], client) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã Ethereum —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ CoinGecko API
    
    Args:
        token_addresses: –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ Ethereum
        client: HTTP –∫–ª–∏–µ–Ω—Ç
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å {token_address: price_usd}
    """
    try:
        import httpx
        from decimal import Decimal
        
        if not token_addresses:
            return {}
            
        # CoinGecko Pro API –¥–ª—è Ethereum —Ç–æ–∫–µ–Ω–æ–≤
        url = "https://pro-api.coingecko.com/api/v3/simple/token_price/ethereum"
        params = {
            "contract_addresses": ",".join(token_addresses),
            "vs_currencies": "usd"
        }
        
        # API –∫–ª—é—á –µ—Å–ª–∏ –µ—Å—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        headers = {}
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –∫–ª—é—á
        COINGECKO_API_KEY = "CG-9MrJcucBMMx5HKnXeVBD8oSb"  # –¢–æ—Ç –∂–µ –∫–ª—é—á —á—Ç–æ –≤ pool_analyzer.py
        
        if COINGECKO_API_KEY:
            headers["x-cg-pro-api-key"] = COINGECKO_API_KEY
            
        response = await client.get(url, params=params, headers=headers)
        response.raise_for_status()
        response_data = response.json()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç: {"address": {"usd": price}}
        prices = {}
        for address, price_data in response_data.items():
            if "usd" in price_data:
                prices[address.lower()] = Decimal(str(price_data["usd"]))
                
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è {len(prices)} Ethereum —Ç–æ–∫–µ–Ω–æ–≤")
        return prices
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω Ethereum —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return {}

# Ethereum —Ç–æ–∫–µ–Ω—ã –¥–ª—è CoinGecko (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ)
ETHEREUM_TOKEN_COINGECKO_IDS = {
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2": "wrapped-ethereum",  # WETH
    "0x6B175474E89094C44Da98b954EedeAC495271d0F": "dai",               # DAI  
    "0xA0b86a33E6441621DA8C04F53cFe4B6DC2b94c9E": "usd-coin",          # USDC
    "0xdAC17F958D2ee523a2206206994597C13D831ec7": "tether",             # USDT
    "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599": "wrapped-bitcoin",    # WBTC
    "0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984": "uniswap",           # UNI
    "0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0": "polygon",           # MATIC
    "0x514910771AF9Ca656af840dff83E8264EcF986CA": "chainlink",          # LINK
}

async def test_pool_states():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–æ–≤"""
    try:
        from ethereum.data_sources.rpc_client import create_ethereum_rpc_client
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—É–ª–æ–≤ 
        pool_addresses = [
            "0x8ad599c3A0ff1De082011EFDDc58f1908eb6e6D8",  # USDC/WETH 0.3%
            "0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640",  # USDC/WETH 0.05%  
        ]
        
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–æ–≤...")
        
        rpc_client = create_ethereum_rpc_client()
        async with rpc_client:
            pool_states = await fetch_pool_states(pool_addresses, rpc_client)
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {len(pool_states)} –ø—É–ª–æ–≤:")
            for pool_addr, state in pool_states.items():
                print(f"\n  üè¶ Pool: {pool_addr}")
                print(f"    üìà Tick: {state['tick']}")
                print(f"    üíß Liquidity: {state['liquidity']:,}")
                print(f"    üí∞ Fee: {state['fee']} ({state['fee']/10000}%)")
                print(f"    üìä SqrtPriceX96: {state['sqrtPriceX96']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–æ–≤: {e}")

# if __name__ == "__main__":
#     import asyncio
#     asyncio.run(test_pool_states())

# ======================================================================
# Phase 4: Analytics & Math üßÆ
# ======================================================================

async def get_token_decimals(token_address: str, rpc_client) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals –¥–ª—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ ERC20 decimals() –≤—ã–∑–æ–≤
    
    Args:
        token_address: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
        rpc_client: RPC –∫–ª–∏–µ–Ω—Ç
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 18)
    """
    try:
        # decimals() selector = 0x313ce567
        decimals_data = "0x313ce567"
        
        call = {
            "method": "eth_call",
            "params": [
                {"to": token_address, "data": decimals_data},
                "latest"
            ],
            "id": 1
        }
        
        results = await rpc_client.batch_call([call])
        
        if results and "result" in results[0] and results[0]["result"] != "0x":
            decimals = int(results[0]["result"], 16)
            return decimals
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 18 decimals –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
            return 18
            
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å decimals –¥–ª—è {token_address}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 18: {e}")
        return 18

async def calculate_position_value_usd(position_data: Dict[str, Any], pool_state: Dict[str, Any], token_prices: Dict[str, Any], rpc_client=None) -> Dict[str, Any]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ USD —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—á–µ—Ç–æ–º decimals
    
    Args:
        position_data: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ positions() call
        pool_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞ –∏–∑ slot0() –∏ liquidity()
        token_prices: –¶–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤ USD
        rpc_client: RPC –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è decimals (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        Dict —Å amount0, amount1, value_usd, is_in_range
    """
    try:
        from ethereum.math.tick_math import calculate_amounts_from_liquidity
        from decimal import Decimal
        
        if not position_data or position_data.get('liquidity', 0) == 0:
            return {
                'amount0': 0,
                'amount1': 0, 
                'value_usd': 0,
                'in_range': False,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'in_range' –∞ –Ω–µ 'is_in_range'
                'status': 'inactive'
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        liquidity = position_data['liquidity']
        tick_lower = position_data['tick_lower']
        tick_upper = position_data['tick_upper']
        token0 = position_data['token0'].lower()
        token1 = position_data['token1'].lower()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞
        sqrt_price_x96 = pool_state['sqrtPriceX96']
        current_tick = pool_state['tick']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        is_in_range = tick_lower <= current_tick <= tick_upper
        
        # –ü–æ–ª—É—á–∞–µ–º decimals —Ç–æ–∫–µ–Ω–æ–≤
        if rpc_client:
            try:
                decimals0 = await get_token_decimals(position_data['token0'], rpc_client)
                decimals1 = await get_token_decimals(position_data['token1'], rpc_client)
            except:
                # Fallback: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ decimals –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                decimals0 = 18 if token0 != "0xa0b86a33e6441621da8c04f53cfe4b6dc2b94c9e" else 6  # USDC has 6 decimals
                decimals1 = 18
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ decimals –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            decimals0 = 18 if token0 != "0xa0b86a33e6441621da8c04f53cfe4b6dc2b94c9e" else 6  # USDC has 6 decimals  
            decimals1 = 18
        
        print(f"üí° Token decimals: token0={decimals0}, token1={decimals1}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º amounts —Ç–æ–∫–µ–Ω–æ–≤ (–≤ wei)
        amounts = calculate_amounts_from_liquidity(
            liquidity=liquidity,
            sqrt_price_x96_current=sqrt_price_x96,
            tick_lower=tick_lower,
            tick_upper=tick_upper
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ human-readable amounts —Å —É—á–µ—Ç–æ–º decimals
        amount0_raw = float(amounts['amount0'])
        amount1_raw = float(amounts['amount1'])
        
        amount0 = amount0_raw / (10 ** decimals0)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ wei
        amount1 = amount1_raw / (10 ** decimals1)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ wei
        
        print(f"üíß Raw amounts: token0={amount0_raw:.0f}, token1={amount1_raw:.0f}")
        print(f"üíß Human amounts: token0={amount0:.8f}, token1={amount1:.2f}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
        price0 = float(token_prices.get(token0.lower(), 0))
        price1 = float(token_prices.get(token1.lower(), 0))
        
        print(f"üí∞ Token prices: {token0[:8]}... = ${price0}, {token1[:8]}... = ${price1}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USD
        value0_usd = amount0 * price0
        value1_usd = amount1 * price1
        total_value_usd = value0_usd + value1_usd
        
        print(f"üíé USD values: token0=${value0_usd:.2f}, token1=${value1_usd:.2f}, total=${total_value_usd:.2f}")
        
        return {
            'amount0': amount0,
            'amount1': amount1,
            'value0_usd': value0_usd,
            'value1_usd': value1_usd,
            'value_usd': total_value_usd,
            'in_range': is_in_range,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'in_range' –∞ –Ω–µ 'is_in_range'
            'status': 'active' if is_in_range else 'out_of_range',
            'current_tick': current_tick,
            'tick_range': f"{tick_lower} to {tick_upper}",
            'decimals0': decimals0,
            'decimals1': decimals1
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return {
            'amount0': 0,
            'amount1': 0,
            'value_usd': 0,
            'in_range': False,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'in_range' –∞ –Ω–µ 'is_in_range'
            'status': 'error',
            'error': str(e)
        }

async def check_position_in_range(position_data: Dict[str, Any], pool_state: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ü–µ–Ω
    
    Args:
        position_data: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ 
        pool_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞
        
    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–∑–∏—Ü–∏–∏
    """
    try:
        current_tick = pool_state['tick']
        tick_lower = position_data['tick_lower']
        tick_upper = position_data['tick_upper']
        liquidity = position_data.get('liquidity', 0)
        
        is_in_range = tick_lower <= current_tick <= tick_upper
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è full range –ø–æ–∑–∏—Ü–∏–π (–ø–æ—á—Ç–∏ MIN_TICK to MAX_TICK)
        is_full_range = abs(tick_lower - (-887272)) <= 100 and abs(tick_upper - 887272) <= 100
        if is_full_range:
            is_in_range = True  # Full range –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ in range
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≥—Ä–∞–Ω–∏—Ü
        distance_to_lower = current_tick - tick_lower
        distance_to_upper = tick_upper - current_tick
        
        if is_in_range:
            status = "üü¢ IN RANGE"
            distance_info = f"–î–æ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã: {distance_to_lower}, –¥–æ –≤–µ—Ä—Ö–Ω–µ–π: {distance_to_upper}"
        elif current_tick < tick_lower:
            status = "üî¥ BELOW RANGE"
            distance_info = f"–ù–∏–∂–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–∞ {abs(distance_to_lower)} ticks"
        else:
            status = "üî¥ ABOVE RANGE"  
            distance_info = f"–í—ã—à–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–∞ {distance_to_upper} ticks"
            
        return {
            'in_range': is_in_range,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'in_range' –∞ –Ω–µ 'is_in_range'
            'status': status,
            'current_tick': current_tick,
            'tick_lower': tick_lower,
            'tick_upper': tick_upper,
            'distance_info': distance_info,
            'is_active': liquidity > 0 and is_in_range
        }
        
    except Exception as e:
        return {
            'in_range': False,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'in_range' –∞ –Ω–µ 'is_in_range'
            'status': "‚ùå ERROR",
            'error': str(e)
        }

async def calculate_uncollected_fees(position_data: Dict[str, Any], token_prices: Dict[str, Any], rpc_client=None) -> Dict[str, Any]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—á–µ—Ç–æ–º decimals
    
    Args:
        position_data: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        token_prices: –¶–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤ USD
        rpc_client: RPC –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è decimals (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∏—Å—Å–∏—è—Ö
    """
    try:
        tokens_owed0 = position_data.get('tokens_owed0', 0)
        tokens_owed1 = position_data.get('tokens_owed1', 0)
        
        token0 = position_data['token0'].lower()
        token1 = position_data['token1'].lower()
        
        # –ü–æ–ª—É—á–∞–µ–º decimals —Ç–æ–∫–µ–Ω–æ–≤
        if rpc_client:
            try:
                decimals0 = await get_token_decimals(position_data['token0'], rpc_client)
                decimals1 = await get_token_decimals(position_data['token1'], rpc_client)
            except:
                decimals0 = 18 if token0 != "0xa0b86a33e6441621da8c04f53cfe4b6dc2b94c9e" else 6
                decimals1 = 18
        else:
            decimals0 = 18 if token0 != "0xa0b86a33e6441621da8c04f53cfe4b6dc2b94c9e" else 6
            decimals1 = 18
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
        price0 = float(token_prices.get(token0, 0))
        price1 = float(token_prices.get(token1, 0))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º fees –≤ human-readable —Ñ–æ—Ä–º–∞—Ç
        fee0_amount = tokens_owed0 / (10 ** decimals0)
        fee1_amount = tokens_owed1 / (10 ** decimals1)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏–π –≤ USD
        fee0_usd = fee0_amount * price0
        fee1_usd = fee1_amount * price1
        
        total_fees_usd = fee0_usd + fee1_usd
        
        has_fees = tokens_owed0 > 0 or tokens_owed1 > 0
        
        return {
            'tokens_owed0': tokens_owed0,
            'tokens_owed1': tokens_owed1,
            'fee0_amount': fee0_amount,
            'fee1_amount': fee1_amount,
            'fee0_usd': fee0_usd,
            'fee1_usd': fee1_usd,
            'total_fees_usd': total_fees_usd,
            'has_uncollected_fees': has_fees,
            'fee_info': f"Token0: {fee0_amount:.8f}, Token1: {fee1_amount:.2f}" if has_fees else "No uncollected fees"
        }
        
    except Exception as e:
        return {
            'tokens_owed0': 0,
            'tokens_owed1': 0,
            'total_fees_usd': 0,
            'has_uncollected_fees': False,
            'error': str(e)
        }

async def get_pool_address_from_position(position_data: Dict[str, Any], rpc_client) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –ø—É–ª–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ UniswapV3Factory
    
    Args:
        position_data: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å token0, token1, fee
        rpc_client: RPC –∫–ª–∏–µ–Ω—Ç
        
    Returns:
        –ê–¥—Ä–µ—Å –ø—É–ª–∞ –∏–ª–∏ None
    """
    try:
        token0 = position_data['token0']
        token1 = position_data['token1']
        fee = position_data['fee']
        
        return await get_pool_address_from_tokens(token0, token1, fee, rpc_client)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø—É–ª–∞: {e}")
        return None

async def analyze_position_complete(position_data: Dict[str, Any], rpc_client, token_prices: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏ - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        position_data: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        rpc_client: RPC –∫–ª–∏–µ–Ω—Ç
        token_prices: –¶–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤
        
    Returns:
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø—É–ª–∞
        pool_address = await get_pool_address_from_position(position_data, rpc_client)
        
        if not pool_address:
            return {'error': 'Could not find pool address'}
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞
        pool_states = await fetch_pool_states([pool_address], rpc_client)
        
        if not pool_states or pool_address not in pool_states:
            return {'error': 'Could not fetch pool state'}
            
        pool_state = pool_states[pool_address]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏–∑—ã
        value_analysis = await calculate_position_value_usd(position_data, pool_state, token_prices, rpc_client)
        range_analysis = await check_position_in_range(position_data, pool_state)
        fees_analysis = await calculate_uncollected_fees(position_data, token_prices, rpc_client)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Ç–æ–∫–µ–Ω–æ–≤
        token0_symbol = get_token_symbol(position_data.get('token0', ''))
        token1_symbol = get_token_symbol(position_data.get('token1', ''))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –≤ value_analysis
        if isinstance(value_analysis, dict):
            value_analysis['token0_symbol'] = token0_symbol
            value_analysis['token1_symbol'] = token1_symbol
            value_analysis['token0_amount_formatted'] = value_analysis.get('amount0', 0)
            value_analysis['token1_amount_formatted'] = value_analysis.get('amount1', 0)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return {
            'pool_address': pool_address,
            'pool_state': pool_state,
            'value_analysis': value_analysis,
            'range_analysis': range_analysis,
            'fees_analysis': fees_analysis,
            'position_data': position_data,
            'token0_symbol': token0_symbol,
            'token1_symbol': token1_symbol
        }
        
    except Exception as e:
        return {'error': f'Analysis failed: {str(e)}'}

async def test_phase4_analytics():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π Phase 4"""
    try:
        from ethereum.data_sources.rpc_client import create_ethereum_rpc_client
        
        print('üßÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º Phase 4: Analytics & Math')
        print('=' * 60)
        
        # –í–æ–∑—å–º–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ –Ω–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        test_position = {
            'token0': '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',  # WETH
            'token1': '0xcb1592591996765ec0efc1f92599a19767ee5ffa',  # BIO
            'fee': 3000,  # 0.3%
            'liquidity': 62289561593523376994406,
            'tick_lower': 104280,
            'tick_upper': 108180,
            'tokens_owed0': 0,
            'tokens_owed1': 0
        }
        
        # –ü—Ä–∏–º–µ—Ä —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤
        token_prices = {
            '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2': 3500.0,  # WETH
            '0xcb1592591996765ec0efc1f92599a19767ee5ffa': 0.070623  # BIO
        }
        
        print('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é WETH/BIO...')
        
        rpc_client = create_ethereum_rpc_client()
        async with rpc_client:
            analysis = await analyze_position_complete(test_position, rpc_client, token_prices)
            
            if 'error' in analysis:
                print(f'‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis["error"]}')
            else:
                print('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!')
                print(f'üìç Pool address: {analysis["pool_address"]}')
                print(f'üí∞ Total value: ${analysis["value_analysis"]["value_usd"]:.2f}')
                print(f'üìà Status: {analysis["range_analysis"]["status"]}')
                print(f'üéÅ Fees: ${analysis["fees_analysis"]["total_fees_usd"]:.2f}')
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}')
        import traceback
        traceback.print_exc()

# if __name__ == "__main__":
#     import asyncio
#     asyncio.run(test_phase4_analytics())

# ======================================================================
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
# ======================================================================

async def get_user_positions_filtered(wallet_address: str, min_value_usd: float = 1000.0, rpc_client=None) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    
    Args:
        wallet_address: –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        min_value_usd: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ USD –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é $1000)
        rpc_client: RPC –∫–ª–∏–µ–Ω—Ç (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π)
        
    Returns:
        Dict —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    if rpc_client is None:
        async with create_ethereum_rpc_client() as rpc_client:
            return await _get_positions_with_client(wallet_address, min_value_usd, rpc_client)
    else:
        return await _get_positions_with_client(wallet_address, min_value_usd, rpc_client)


async def _get_positions_with_client(wallet_address: str, min_value_usd: float, rpc_client) -> Dict[str, Any]:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º RPC –∫–ª–∏–µ–Ω—Ç–æ–º"""
    try:
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞: {wallet_address}")
        print(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç: ${min_value_usd}")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ batch_call
        balance_call = [{
            "method": "eth_call",
            "params": [{
                "to": NONFUNGIBLE_POSITION_MANAGER,
                "data": "0x70a08231" + wallet_address[2:].zfill(64)  # balanceOf
            }, "latest"],
            "id": 1
        }]
        
        balance_results = await rpc_client.batch_call(balance_call)
        
        if not balance_results or "result" not in balance_results[0]:
            return {"error": "Failed to get balance", "positions": [], "total_positions": 0}
            
        balance = int(balance_results[0]["result"], 16)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {balance} –ø–æ–∑–∏—Ü–∏–π NFT")
        
        if balance == 0:
            return {"positions": [], "total_positions": 0, "filtered_positions": 0, "total_value_usd": 0}
        
        # 2. –ü–æ–ª—É—á–∞–µ–º token IDs —á–µ—Ä–µ–∑ batch calls
        token_calls = []
        for i in range(balance):
            data = (
                "0x2f745c59" +  # tokenOfOwnerByIndex selector
                wallet_address[2:].zfill(64) +  # owner address
                hex(i)[2:].zfill(64)  # index
            )
            token_calls.append({
                "method": "eth_call",
                "params": [{"to": NONFUNGIBLE_POSITION_MANAGER, "data": data}, "latest"],
                "id": i
            })
        
        token_results = await rpc_client.batch_call(token_calls)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º token IDs
        token_ids = []
        for result in token_results:
            if "result" in result:
                token_ids.append(int(result["result"], 16))
        
        print(f"‚úÖ Token IDs: {token_ids}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π
        position_calls = []
        for i, token_id in enumerate(token_ids):
            data = (
                "0x99fbab88" +  # positions selector
                hex(token_id)[2:].zfill(64)  # tokenId
            )
            position_calls.append({
                "method": "eth_call",
                "params": [{"to": NONFUNGIBLE_POSITION_MANAGER, "data": data}, "latest"],
                "id": i + 10
            })
        
        position_results = await rpc_client.batch_call(position_calls)
        
        # 4. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ CoinGecko
        token_prices = await fetch_token_prices_coingecko_ethereum()
        print(f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤: {len(token_prices)}")
        
        # 5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
        positions = []
        total_value_usd = 0
        filtered_out_count = 0
        
        for i, (token_id, result) in enumerate(zip(token_ids, position_results)):
            if "result" in result:
                position_data = decode_position_data(result["result"])
                
                if position_data:
                    print(f"\nüìç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é {i+1} (Token ID: {token_id})...")
                    
                    # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏
                    analysis = await analyze_position_complete(position_data, rpc_client, token_prices)
                    
                    if 'error' not in analysis:
                        position_value = analysis.get("value_analysis", {}).get("value_usd", 0)
                        
                        if position_value >= min_value_usd:
                            # –î–æ–±–∞–≤–ª—è–µ–º token_id –∫ –∞–Ω–∞–ª–∏–∑—É
                            analysis["token_id"] = token_id
                            positions.append(analysis)
                            total_value_usd += position_value
                            print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –≤ –æ—Ç—á–µ—Ç: ${position_value:.2f}")
                        else:
                            filtered_out_count += 1
                            print(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∞ (${position_value:.2f} < ${min_value_usd})")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∏—Ü–∏–∏ {token_id}: {analysis.get('error')}")
        
        return {
            "positions": positions,
            "total_positions": balance,
            "filtered_positions": len(positions),
            "filtered_out": filtered_out_count,
            "total_value_usd": total_value_usd,
            "min_value_filter": min_value_usd,
            "wallet_address": wallet_address
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return {"error": str(e), "positions": [], "total_positions": 0}


async def fetch_token_prices_coingecko_ethereum() -> Dict[str, float]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ Ethereum —á–µ—Ä–µ–∑ CoinGecko API
    
    Returns:
        Dict —Å —Ü–µ–Ω–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤ {token_address_lowercase: price_usd}
    """
    import aiohttp
    import os
    
    # –ü–æ–ª—É—á–∞–µ–º API key –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    COINGECKO_API_KEY = "CG-9MrJcucBMMx5HKnXeVBD8oSb"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã Ethereum –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    token_addresses = [
        "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",  # WETH
        "0xcb1592591996765ec0efc1f92599a19767ee5ffa",  # BIO (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å)
        "0x81f8f0bb1cb2a06649e51913a151f0e7ef6fa321",  # VITA (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å)
        "0xa0b73e1ff0b80914ab6fe0444e65848c4c34450b",  # CRON
        "0x6b175474e89094c44da98b954eedeac495271d0f",  # DAI
        "0xa0b86a33e6e114011c36e3c3b8c67c63b8d0fcf9",  # USDC
        "0xdac17f958d2ee523a2206206994597c13d831ec7",  # USDT
    ]
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è API
        addresses_str = ",".join(token_addresses)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è Pro API
        url = f"https://pro-api.coingecko.com/api/v3/simple/token_price/ethereum?contract_addresses={addresses_str}&vs_currencies=usd"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'x-cg-pro-api-key': COINGECKO_API_KEY
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    prices = {}
                    for address, price_data in data.items():
                        if isinstance(price_data, dict) and 'usd' in price_data:
                            prices[address.lower()] = float(price_data['usd'])
                    
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–Ω—ã –¥–ª—è {len(prices)} —Ç–æ–∫–µ–Ω–æ–≤")
                    return prices
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ CoinGecko API: {response.status}")
                    return {}
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
        return {}


if __name__ == "__main__":
    async def main():
        # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
        test_wallet = "0x31AAc4021540f61fe20c3dAffF64BA6335396850"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ $1000
        result = await get_user_positions_filtered(test_wallet, min_value_usd=1000.0)
        
        if "error" not in result:
            print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
            print(f"üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {result['total_positions']}")
            print(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ –≤ –æ—Ç—á–µ—Ç: {result['filtered_positions']}")
            print(f"‚ö†Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {result['filtered_out']}")
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${result['total_value_usd']:.2f}")
            
            for i, pos in enumerate(result['positions'], 1):
                print(f"\n–ü–æ–∑–∏—Ü–∏—è {i} (Token ID: {pos['token_id']}):")
                print(f"  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${pos['value_analysis']['value_usd']:.2f}")
                print(f"  üìà –°—Ç–∞—Ç—É—Å: {pos['range_analysis']['status']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    import asyncio
    asyncio.run(main())