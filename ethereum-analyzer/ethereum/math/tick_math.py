"""
–¢–æ—á–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è Uniswap v3 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π X96 —Ñ–æ—Ä–º–∞—Ç–∞
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ byterover
"""

import math
from decimal import Decimal, getcontext
from typing import Dict, Union

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è Decimal –æ–ø–µ—Ä–∞—Ü–∏–π
getcontext().prec = 78

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Uniswap v3 (X96 —Ñ–æ—Ä–º–∞—Ç)
Q96 = Decimal(2**96)
Q128 = Decimal(2**128)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
MIN_TICK = -887272
MAX_TICK = 887272
MIN_SQRT_RATIO = Decimal(4295128739)
MAX_SQRT_RATIO = Decimal(1461446703485210103287273052203988822378723970342)

# –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
SQRT_1_0001 = Decimal('1.0001').sqrt()


def tick_to_sqrt_price_x96(tick: int) -> int:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç tick –≤ sqrtPriceX96
    
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç X96 (–Ω–µ X64) –¥–ª—è Uniswap v3
    –§–æ—Ä–º—É–ª–∞: sqrt(1.0001^tick) * 2^96
    
    Args:
        tick: Tick value
        
    Returns:
        sqrtPriceX96 –∫–∞–∫ uint160
    """
    if not (MIN_TICK <= tick <= MAX_TICK):
        raise ValueError(f"Tick {tick} out of bounds [{MIN_TICK}, {MAX_TICK}]")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        sqrt_price = SQRT_1_0001 ** Decimal(tick)
        sqrt_price_x96 = sqrt_price * Q96
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int, –ø—Ä–æ–≤–µ—Ä—è—è –≥—Ä–∞–Ω–∏—Ü—ã uint160
        result = int(sqrt_price_x96.to_integral_value(rounding='ROUND_HALF_UP'))
        
        if not (MIN_SQRT_RATIO <= result <= MAX_SQRT_RATIO):
            raise ValueError(f"Calculated sqrtPriceX96 {result} out of bounds")
            
        return result
        
    except Exception as e:
        raise ValueError(f"Error calculating sqrtPriceX96 for tick {tick}: {e}")


def sqrt_price_x96_to_price(
    sqrt_price_x96: int, 
    decimals0: int, 
    decimals1: int
) -> Decimal:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç sqrtPriceX96 –≤ —á–∏—Ç–∞–µ–º—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞1 –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö —Ç–æ–∫–µ–Ω–∞0
    
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ decimal places –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    
    Args:
        sqrt_price_x96: sqrtPriceX96 value
        decimals0: Decimal places —Ç–æ–∫–µ–Ω–∞0
        decimals1: Decimal places —Ç–æ–∫–µ–Ω–∞1
        
    Returns:
        –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞1 –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö —Ç–æ–∫–µ–Ω–∞0
    """
    try:
        sqrt_price_x96_decimal = Decimal(sqrt_price_x96)
        
        # price = (sqrtPriceX96 / 2^96)^2
        price_ratio = (sqrt_price_x96_decimal / Q96) ** 2
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è decimal places
        # –¶–µ–Ω–∞ = (amount1 / 10^decimals1) / (amount0 / 10^decimals0)
        decimal_adjustment = Decimal(10) ** (decimals0 - decimals1)
        adjusted_price = price_ratio * decimal_adjustment
        
        return adjusted_price
        
    except Exception as e:
        raise ValueError(f"Error converting sqrtPriceX96 {sqrt_price_x96}: {e}")


def calculate_amounts_from_liquidity(
    liquidity: int,
    sqrt_price_x96_current: int,
    tick_lower: int,
    tick_upper: int
) -> Dict[str, Decimal]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ token0 –∏ token1 –∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
    
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è Uniswap v3 X96
    
    Args:
        liquidity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (uint128)
        sqrt_price_x96_current: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø—É–ª–∞
        tick_lower: –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–∏
        tick_upper: –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–∏
        
    Returns:
        Dict —Å amount0 –∏ amount1
    """
    if tick_lower >= tick_upper:
        return {"amount0": Decimal(0), "amount1": Decimal(0)}
    
    if liquidity == 0:
        return {"amount0": Decimal(0), "amount1": Decimal(0)}
    
    try:
        L = Decimal(liquidity)
        
        # –ü–æ–ª—É—á–∞–µ–º sqrtPrice –¥–ª—è –≥—Ä–∞–Ω–∏—Ü
        sqrt_price_a = Decimal(tick_to_sqrt_price_x96(tick_lower))  # sqrtPrice –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
        sqrt_price_b = Decimal(tick_to_sqrt_price_x96(tick_upper))  # sqrtPrice –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
        sqrt_price_current = Decimal(sqrt_price_x96_current)
        
        amount0 = Decimal(0)
        amount1 = Decimal(0)
        
        if sqrt_price_current <= sqrt_price_a:
            # –¶–µ–Ω–∞ –Ω–∏–∂–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ -> —Ç–æ–ª—å–∫–æ token0
            if sqrt_price_a > 0 and sqrt_price_b > 0:
                amount0 = L * (sqrt_price_b - sqrt_price_a) / (sqrt_price_a * sqrt_price_b) * Q96
        elif sqrt_price_current >= sqrt_price_b:
            # –¶–µ–Ω–∞ –≤—ã—à–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ -> —Ç–æ–ª—å–∫–æ token1  
            amount1 = L * (sqrt_price_b - sqrt_price_a) / Q96
        else:
            # –¶–µ–Ω–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ -> –æ–±–∞ —Ç–æ–∫–µ–Ω–∞
            if sqrt_price_current > 0 and sqrt_price_b > 0:
                amount0 = L * (sqrt_price_b - sqrt_price_current) / (sqrt_price_current * sqrt_price_b) * Q96
            amount1 = L * (sqrt_price_current - sqrt_price_a) / Q96
        
        # Ensure non-negative
        amount0 = max(Decimal(0), amount0)
        amount1 = max(Decimal(0), amount1)
        
        return {
            "amount0": amount0,
            "amount1": amount1
        }
        
    except Exception as e:
        print(f"Error calculating amounts from liquidity: {e}")
        return {"amount0": Decimal(0), "amount1": Decimal(0)}


def get_price_from_tick(tick: int, decimals0: int = 18, decimals1: int = 18) -> Decimal:
    """
    –ü—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ tick —Å —É—á–µ—Ç–æ–º decimals
    
    Args:
        tick: Tick value
        decimals0: Decimal places token0
        decimals1: Decimal places token1
        
    Returns:
        –¶–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞1 –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö —Ç–æ–∫–µ–Ω–∞0
    """
    try:
        sqrt_price_x96 = tick_to_sqrt_price_x96(tick)
        return sqrt_price_x96_to_price(sqrt_price_x96, decimals0, decimals1)
    except Exception as e:
        raise ValueError(f"Error getting price from tick {tick}: {e}")


def calculate_price_range(tick_lower: int, tick_upper: int, decimals0: int = 18, decimals1: int = 18) -> Dict[str, Decimal]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
    
    Args:
        tick_lower: –ù–∏–∂–Ω–∏–π tick
        tick_upper: –í–µ—Ä—Ö–Ω–∏–π tick  
        decimals0: Decimal places token0
        decimals1: Decimal places token1
        
    Returns:
        Dict —Å price_lower –∏ price_upper
    """
    try:
        price_lower = get_price_from_tick(tick_lower, decimals0, decimals1)
        price_upper = get_price_from_tick(tick_upper, decimals0, decimals1)
        
        return {
            "price_lower": price_lower,
            "price_upper": price_upper,
            "range_width": price_upper - price_lower
        }
        
    except Exception as e:
        raise ValueError(f"Error calculating price range: {e}")


def is_position_in_range(current_tick: int, tick_lower: int, tick_upper: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ (in-range)
    
    Args:
        current_tick: –¢–µ–∫—É—â–∏–π tick –ø—É–ª–∞
        tick_lower: –ù–∏–∂–Ω–∏–π tick –ø–æ–∑–∏—Ü–∏–∏
        tick_upper: –í–µ—Ä—Ö–Ω–∏–π tick –ø–æ–∑–∏—Ü–∏–∏
        
    Returns:
        True –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è in-range
    """
    return tick_lower <= current_tick <= tick_upper


# –•–µ–ª–ø–µ—Ä—ã –¥–ª—è debug –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
def validate_tick(tick: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å tick"""
    return MIN_TICK <= tick <= MAX_TICK


def validate_sqrt_price_x96(sqrt_price_x96: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å sqrtPriceX96"""
    return MIN_SQRT_RATIO <= sqrt_price_x96 <= MAX_SQRT_RATIO


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
USDC_DECIMALS = 6
WETH_DECIMALS = 18
DAI_DECIMALS = 18

def test_calculations():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ Uniswap v3...")
    
    # –¢–µ—Å—Ç 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è tick –≤ sqrtPriceX96
    test_tick = 0  # tick = 0 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–µ 1:1
    sqrt_price = tick_to_sqrt_price_x96(test_tick)
    print(f"Tick 0 -> sqrtPriceX96: {sqrt_price}")
    
    # –¢–µ—Å—Ç 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ü–µ–Ω—É
    price = sqrt_price_x96_to_price(sqrt_price, 18, 18)
    print(f"sqrtPriceX96 -> price: {price}")
    
    # –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç amounts
    liquidity = 1000000000000000000  # 1e18
    amounts = calculate_amounts_from_liquidity(liquidity, sqrt_price, -1000, 1000)
    print(f"Amounts from liquidity: {amounts}")
    
    print("‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")


if __name__ == "__main__":
    test_calculations() 