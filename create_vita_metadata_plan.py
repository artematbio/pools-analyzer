#!/usr/bin/env python3

import json
from datetime import datetime

def create_metadata_plan():
    """–°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è VITA —Ç–æ–∫–µ–Ω–∞ –Ω–∞ Solana"""
    
    print("üìã –ü–õ–ê–ù –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ú–ï–¢–ê–î–ê–ù–ù–´–• VITA –ù–ê SOLANA")
    print("============================================")
    print()
    
    # –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö VITA —Å Ethereum
    vita_metadata = {
        "name": "VitaDAO",
        "symbol": "VITA", 
        "description": "VitaDAO token for decentralized longevity research funding",
        "image": "https://static.alchemyapi.io/images/assets/19214.png",
        "external_url": "https://vitadao.org",
        "properties": {
            "category": "fungible",
            "creators": [
                {
                    "address": "vita3LfgKErA37DWA7W8RBks3c7Rym2hPFgizNRshBi",
                    "share": 100
                }
            ]
        },
        "attributes": [
            {
                "trait_type": "Type",
                "value": "Governance Token"
            },
            {
                "trait_type": "Blockchain",
                "value": "Solana"
            },
            {
                "trait_type": "Use Case", 
                "value": "Longevity Research"
            }
        ]
    }
    
    # Metaplex Metadata format
    metaplex_metadata = {
        "name": "VitaDAO",
        "symbol": "VITA",
        "uri": "https://your-domain.com/vita-metadata.json",  # –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON
        "sellerFeeBasisPoints": 0,
        "creators": None,
        "collection": None,
        "uses": None
    }
    
    print("1Ô∏è‚É£ JSON –ú–ï–¢–ê–î–ê–ù–ù–´–ï (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ IPFS/Arweave):")
    print("=" * 50)
    print(json.dumps(vita_metadata, indent=2, ensure_ascii=False))
    print()
    
    print("2Ô∏è‚É£ METAPLEX METADATA FORMAT:")
    print("=" * 50)
    print(json.dumps(metaplex_metadata, indent=2, ensure_ascii=False))
    print()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª—ã
    with open('vita_metadata.json', 'w', encoding='utf-8') as f:
        json.dump(vita_metadata, f, indent=2, ensure_ascii=False)
    
    with open('vita_metaplex_format.json', 'w', encoding='utf-8') as f:
        json.dump(metaplex_metadata, f, indent=2, ensure_ascii=False)
    
    print("3Ô∏è‚É£ –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ü–õ–ê–ù –†–ï–ê–õ–ò–ó–ê–¶–ò–ò:")
    print("=" * 50)
    print()
    print("üîß –®–ê–ì 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    print("   ‚Ä¢ ‚úÖ JSON —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: vita_metadata.json")
    print("   ‚Ä¢ ‚úÖ Metaplex —Ñ–æ—Ä–º–∞—Ç: vita_metaplex_format.json")
    print("   ‚Ä¢ üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON –Ω–∞ IPFS/Arweave")
    print("   ‚Ä¢ üîÑ –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π URI")
    print()
    
    print("üîß –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Metaplex")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @metaplex-foundation/js SDK")
    print("   ‚Ä¢ CreateMetadataV2 instruction")
    print("   ‚Ä¢ –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ mint authority")
    print()
    
    print("üîß –®–ê–ì 3: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã (–±–µ–∑ mint authority)")
    print("   ‚Ä¢ Token Extensions Program")
    print("   ‚Ä¢ Metadata Pointer extension")
    print("   ‚Ä¢ Embedded metadata –≤ mint account")
    print()
    
    # JavaScript –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    js_code = '''
// JAVASCRIPT –ö–û–î –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ú–ï–¢–ê–î–ê–ù–ù–´–•
// =====================================

import { 
  createCreateMetadataAccountV2Instruction,
  PROGRAM_ID as METADATA_PROGRAM_ID,
  createUpdateMetadataAccountV2Instruction
} from '@metaplex-foundation/mpl-token-metadata';
import { PublicKey, Transaction } from '@solana/web3.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const VITA_MINT = new PublicKey('vita3LfgKErA37DWA7W8RBks3c7Rym2hPFgizNRshBi');
const METADATA_URI = 'https://your-ipfs-or-arweave-url/vita-metadata.json';

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
async function createVitaMetadata(connection, payer) {
  try {
    // –í—ã—á–∏—Å–ª—è–µ–º Metadata PDA
    const [metadataPDA] = PublicKey.findProgramAddressSync(
      [
        Buffer.from('metadata'),
        METADATA_PROGRAM_ID.toBuffer(),
        VITA_MINT.toBuffer(),
      ],
      METADATA_PROGRAM_ID
    );

    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Metaplex
    const metadataData = {
      name: 'VitaDAO',
      symbol: 'VITA', 
      uri: METADATA_URI,
      sellerFeeBasisPoints: 0,
      creators: null,
      collection: null,
      uses: null,
    };

    // –°–æ–∑–¥–∞–µ–º instruction
    const createMetadataInstruction = createCreateMetadataAccountV2Instruction(
      {
        metadata: metadataPDA,
        mint: VITA_MINT,
        mintAuthority: payer.publicKey, // –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞!
        payer: payer.publicKey,
        updateAuthority: payer.publicKey,
      },
      {
        createMetadataAccountArgsV2: {
          data: metadataData,
          isMutable: true,
        },
      }
    );

    // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = new Transaction().add(createMetadataInstruction);
    
    const signature = await connection.sendTransaction(transaction, [payer]);
    await connection.confirmTransaction(signature);
    
    console.log('‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('üìù Metadata PDA:', metadataPDA.toString());
    console.log('üîó Signature:', signature);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
// createVitaMetadata(connection, wallet);
'''
    
    print("4Ô∏è‚É£ JAVASCRIPT –ö–û–î:")
    print("=" * 50)
    print(js_code)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JS –∫–æ–¥
    with open('create_vita_metadata.js', 'w', encoding='utf-8') as f:
        f.write(js_code)
    
    print("üíæ –§–ê–ô–õ–´ –°–û–ó–î–ê–ù–´:")
    print("   ‚Ä¢ vita_metadata.json - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è IPFS")
    print("   ‚Ä¢ vita_metaplex_format.json - —Ñ–æ—Ä–º–∞—Ç Metaplex") 
    print("   ‚Ä¢ create_vita_metadata.js - JavaScript –∫–æ–¥")
    print()
    
    print("‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø:")
    print("   ‚Ä¢ –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ mint authority –¥–ª—è —Ç–æ–∫–µ–Ω–∞ VITA")
    print("   ‚Ä¢ JSON —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ IPFS/Arweave")
    print("   ‚Ä¢ URI –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º")
    print("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ devnet")
    print()

if __name__ == "__main__":
    create_metadata_plan()
