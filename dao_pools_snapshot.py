#!/usr/bin/env python3
"""
DAO Pools Snapshot Generator (FIXED)
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞:
1. –ò—â–µ–º –ø—É–ª—ã —á–µ—Ä–µ–∑ GeckoTerminal API  
2. –ò–∑ Supabase –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ù–ê–®–ò –ü–û–ó–ò–¶–ò–ò
3. –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç -> target_lp_value = 1% FDV –¥–ª—è BIO –ø–∞—Ä
"""

import asyncio
import httpx
import csv
import json
import sys
import os
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional, Any
from decimal import Decimal, getcontext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
getcontext().prec = 78

# Supabase handler
try:
    from database_handler import supabase_handler
    SUPABASE_ENABLED = supabase_handler is not None
    if SUPABASE_ENABLED:
        print("‚úÖ Supabase handler –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError:
    print("‚ö†Ô∏è Supabase handler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    supabase_handler = None
    SUPABASE_ENABLED = False

class DAOPoolsSnapshotGenerator:
    def __init__(self):
        self.target_fdv_percentage = 1.0  # 1% –æ—Ç FDV –∫–∞–∫ —Ç–∞—Ä–≥–µ—Ç
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø—É–ª–æ–≤
        self._load_known_pool_addresses()
    
    def _load_known_pool_addresses(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø—É–ª–æ–≤ –∏–∑ tokens_pools_config.json"""
        try:
            with open('tokens_pools_config.json', 'r') as f:
                config = json.load(f)
                
            self.known_pool_addresses = set()
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –ø—É–ª–æ–≤
            for network, pools in config.get('pools', {}).items():
                for pool in pools:
                    address = pool.get('address', '').strip()
                    if address:
                        self.known_pool_addresses.add(address)
                        
            print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.known_pool_addresses)} –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø—É–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            self.known_pool_addresses = set()
    
    def _is_suspicious_token(self, token: str) -> tuple:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        token = token.strip()
        
        # 1. –ö–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏
        if any('\u4e00' <= char <= '\u9fff' for char in token):
            return True, "–∫–∏—Ç–∞–π—Å–∫–∏–µ_—Å–∏–º–≤–æ–ª—ã"
            
        # 2. –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–∫–∞–º —Ç–æ–∫–µ–Ω—ã
        scam_tokens = {
            'SHEGEN', 'GRIFFAIN', 'TrackedBio', 'saint', 'michi', '$michi',
            'JupSOL', 'JUP', 'PNET', 'PEPE', 'DOGE', 'SHIB'
        }
        if token in scam_tokens:
            return True, f"—Å–∫–∞–º_—Ç–æ–∫–µ–Ω_{token}"
            
        # 3. –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        suspicious_patterns = ['track', 'fake', 'test', 'pump', 'dump', 'scam']
        token_lower = token.lower()
        for pattern in suspicious_patterns:
            if pattern in token_lower:
                return True, f"–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π_–ø–∞—Ç—Ç–µ—Ä–Ω_{pattern}"
                
        # 4. –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è (> 15 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(token) > 15:
            return True, "—Å–ª–∏—à–∫–æ–º_–¥–ª–∏–Ω–Ω–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ"
            
        return False, ""
    
    def _is_valid_pool_pair(self, pool_name: str, pool_address: str = '', dex_id: str = '', network: str = '') -> bool:
        """
        –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–£–õ–û–í:
        
        1. –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—ã)
        2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∫–∞–º/–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        3. –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ 
        3.5. –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (URO/RIF)
        4. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–∞—Ä
        """
        if not pool_name or '/' not in pool_name:
            return False
            
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –ø–∞—Ä–µ
        tokens = pool_name.split('/')
        if len(tokens) != 2:
            return False
            
        token1, token2 = [t.strip() for t in tokens]
        
        # 1. –ë–ï–õ–´–ô –°–ü–ò–°–û–ö –†–ê–ó–†–ï–®–ï–ù–ù–´–• –¢–û–ö–ï–ù–û–í
        allowed_tokens = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –±–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
            'WETH', 'SOL', 'BIO', 'USDC', 'USDT', 'ETH', 'WBTC',
            
            # –ù–∞—à–∏ DAO —Ç–æ–∫–µ–Ω—ã (–∏–∑ tokens_pools_config.json)
            'VITA', 'HAIR', 'NEURON', 'ATH', 'GROW', 'CRYO', 'QBIO', 'PSY',
            'SPINE', 'CURES', 'RIF', '$RIF', 'URO', '$URO', 'MYCO',
            
            # –°–≤—è–∑–∞–Ω–Ω—ã–µ/–ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ!)
            'VITA-FAST', 'VITARNA', 'POO'
        }
        
        # 2. –ü–†–û–í–ï–†–ö–ê –ù–ê –°–ö–ê–ú/–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –¢–û–ö–ï–ù–´
        for token in [token1, token2]:
            is_suspicious, reason = self._is_suspicious_token(token)
            if is_suspicious:
                print(f"‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω –ø—É–ª {pool_name}: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω {token} ({reason})")
                return False
                
        # 3. –ü–†–û–í–ï–†–ö–ê –ë–ï–õ–û–ì–û –°–ü–ò–°–ö–ê
        token1_valid = token1 in allowed_tokens
        token2_valid = token2 in allowed_tokens
        
        if not (token1_valid and token2_valid):
            print(f"‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω –ø—É–ª {pool_name}: —Ç–æ–∫–µ–Ω—ã –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ ({token1}: {token1_valid}, {token2}: {token2_valid})")
            return False
            
        # 3.5. –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–û–õ–¨–ö–û –î–õ–Ø –ü–†–û–ë–õ–ï–ú–ù–´–• –¢–û–ö–ï–ù–û–í (URO/RIF)
        # –≠—Ç–∏ —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏–≤–ª–µ–∫–∞—é—Ç –º–Ω–æ–≥–æ —Å–∫–∞–º–µ—Ä–æ–≤, –ø–æ—ç—Ç–æ–º—É –¥–ª—è –Ω–∏—Ö –æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        problematic_tokens = {'RIF', '$RIF', 'URO', '$URO'}
        
        if any(token in problematic_tokens for token in [token1, token2]):
            # –î–ª—è URO/RIF —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            safe_pairs_for_problematic = {'SOL', 'BIO', 'WETH', 'ETH', 'RIF', '$RIF', 'URO', '$URO'}
            
            if not (token1 in safe_pairs_for_problematic and token2 in safe_pairs_for_problematic):
                print(f"‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω –ø—É–ª {pool_name}: –¥–ª—è {token1}/{token2} —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã")
                return False
                
            # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            stablecoins = {'USDT', 'USDC'}
            if any(token in stablecoins for token in [token1, token2]):
                print(f"‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω –ø—É–ª {pool_name}: –ø–∞—Ä—ã —Å–æ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞–º–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã –¥–ª—è {token1}/{token2}")
                return False
                
        # 4. –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–Ø: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ + —Å–µ—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤  
        normalized_pair = tuple(sorted([token1, token2]) + [network])
        if not hasattr(self, '_seen_pairs'):
            self._seen_pairs = set()
            
        if normalized_pair in self._seen_pairs:
            print(f"‚ö†Ô∏è –û—Ç–∫–ª–æ–Ω–µ–Ω –ø—É–ª {pool_name} ({network}): –¥—É–±–ª–∏–∫–∞—Ç –ø–∞—Ä—ã {normalized_pair}")
            return False
            
        self._seen_pairs.add(normalized_pair)
        
        return True
    
    def _standardize_pool_name(self, raw_name: str) -> str:
        """
        –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–ª–∞ –∏–∑ GeckoTerminal API
        
        –ü—Ä–∏–º–µ—Ä—ã:
        "HAIR / WETH 1%" -> "HAIR/WETH"
        "$RIF / SOL" -> "$RIF/SOL"
        "BIO/MYCO" -> "BIO/MYCO" (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
        """
        if not raw_name or raw_name == 'Unknown':
            return raw_name
            
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∏—Å—Å–∏—è—Ö
        name = raw_name.split(' 0.')[0]  # –£–±–∏—Ä–∞–µ–º " 0.3%" –∏ —Ç.–¥.
        name = name.split(' 1%')[0]      # –£–±–∏—Ä–∞–µ–º " 1%"
        name = name.split(' %')[0]       # –£–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: –∑–∞–º–µ–Ω—è–µ–º " / " –Ω–∞ "/"
        name = name.replace(' / ', '/')
        name = name.replace('/ ', '/')
        name = name.replace(' /', '/')
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        parts = name.split('/')
        clean_parts = [part.strip() for part in parts]
        
        standardized = '/'.join(clean_parts)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–Ω—ã–π
        if '/' not in standardized or len(standardized.split('/')) != 2:
            print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É–ª–∞: '{raw_name}' -> '{standardized}'")
            
        return standardized
        
    async def load_pools_from_config(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –ø—É–ª—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ tokens_pools_config.json"""
        try:
            with open('tokens_pools_config.json', 'r') as f:
                config = json.load(f)
            
            all_pools = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—É–ª—ã –∏–∑ –≤—Å–µ—Ö —Å–µ—Ç–µ–π
            for network, pools in config.get('pools', {}).items():
                for pool_config in pools:
                    pool_info = {
                        'pool_name': pool_config['name'],
                        'pool_address': pool_config['address'],
                        'network': network,
                        'protocol': pool_config.get('protocol', 'unknown'),
                        'fee_tier': pool_config.get('fee_tier', 0),
                        'token0': pool_config.get('token0', ''),
                        'token1': pool_config.get('token1', ''),
                        # –≠—Ç–∏ –ø–æ–ª—è –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ API
                        'tvl_usd': 0,
                        'volume_24h_usd': 0,
                        'dex': 'unknown'
                    }
                    all_pools.append(pool_info)
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_pools)} –ø—É–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞")
            return all_pools
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            return []
    
    async def load_dao_tokens_for_calculations(self) -> Dict[str, Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å DAO —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ FDV –∏ –º–µ—Ç—Ä–∏–∫"""
        try:
            with open('tokens_pools_config.json', 'r') as f:
                config = json.load(f)
            
            dao_tokens = {}
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ DAO —Ç–æ–∫–µ–Ω—ã (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ)
            excluded_symbols = {'BIO', 'WETH', 'SOL'}
            
            for network, tokens in config['tokens'].items():
                for token in tokens:
                    symbol = token['symbol']
                    
                    if symbol in excluded_symbols:
                        continue
                    
                    if symbol not in dao_tokens:
                        dao_tokens[symbol] = {
                            'symbol': symbol,
                            'name': token['name'],
                            'coingecko_id': token['coingecko_id'],
                            'addresses': {},
                            'fdv_usd': 0,
                            'price_usd': 0
                        }
                    
                    dao_tokens[symbol]['addresses'][network] = token['address']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º FDV –∏ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ GeckoTerminal API
            await self._fetch_missing_fdv_from_api(dao_tokens)
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dao_tokens)} DAO —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤")
            return dao_tokens
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤: {e}")
            return {}
    


    async def _get_bio_price_from_api(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É BIO —á–µ—Ä–µ–∑ GeckoTerminal API"""
        bio_addresses = {
            'ethereum': '0xcb1592591996765ec0efc1f92599a19767ee5ffa',
            'base': '0x226a2fa2556c48245e57cd1cba4c6c9e67077dd2',
            'solana': 'bioJ9JTqW62MLz7UKHU69gtKhPpGi1BQhccj2kmSvUJ'
        }
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ç–µ–π (–Ω–∞—á–∏–Ω–∞–µ–º —Å Ethereum –∫–∞–∫ —Å–∞–º–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ–π)
        for network, address in bio_addresses.items():
            try:
                async with httpx.AsyncClient() as client:
                    url = f'https://api.geckoterminal.com/api/v2/networks/{network}/tokens/{address}'
                    response = await client.get(url, timeout=10)
                    
                    if response.status_code == 200:
                        data = response.json()
                        attrs = data.get('data', {}).get('attributes', {})
                        
                        price_usd = attrs.get('price_usd')
                        if price_usd and float(price_usd) > 0:
                            price = float(price_usd)
                            print(f"üí∞ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ BIO: ${price:.4f} (–∏–∑ {network})")
                            return price
                            
                    await asyncio.sleep(0.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã BIO –∏–∑ {network}: {e}")
                continue
        
        # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É –∏–∑ env –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç
        fallback_price = float(os.getenv('BIO_PRICE_USD', '0.07'))
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BIO –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: ${fallback_price}")
        return fallback_price

    async def _fetch_missing_fdv_from_api(self, dao_tokens: Dict[str, Dict[str, Any]]):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ FDV —á–µ—Ä–µ–∑ GeckoTerminal API (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–∑ –≤—Å–µ—Ö —Å–µ—Ç–µ–π)"""
        print("üîç –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ FDV —á–µ—Ä–µ–∑ GeckoTerminal API...")
        
        async with httpx.AsyncClient() as client:
            for token_symbol, token_info in dao_tokens.items():
                # –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º FDV –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                best_fdv = 0
                best_price = 0
                best_network = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ç–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π FDV
                for network, address in token_info['addresses'].items():
                    if not address:
                        continue
                        
                    try:
                        network_map = {'ethereum': 'eth', 'base': 'base', 'solana': 'solana'}
                        network_id = network_map.get(network, network)
                        
                        url = f'https://api.geckoterminal.com/api/v2/networks/{network_id}/tokens/{address}'
                        response = await client.get(url, timeout=10)
                        
                        if response.status_code == 200:
                            data = response.json()
                            attrs = data.get('data', {}).get('attributes', {})
                            
                            fdv_usd = attrs.get('fdv_usd')
                            price_usd = attrs.get('price_usd')
                            
                            if fdv_usd and float(fdv_usd) > best_fdv:
                                best_fdv = float(fdv_usd)
                                best_network = network
                                if price_usd:
                                    best_price = float(price_usd)
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        await asyncio.sleep(0.3)
                        
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è {token_symbol} ({network}): {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–µ –¥–∞–Ω–Ω—ã–µ
                if best_fdv > 0:
                    token_info['fdv_usd'] = best_fdv
                    print(f"   ‚úÖ {token_symbol}: FDV ${best_fdv:,.0f} (–∏–∑ {best_network})")
                    
                    if best_price > 0 and token_info.get('price_usd', 0) <= 0:
                        token_info['price_usd'] = best_price
                else:
                    print(f"   ‚ö†Ô∏è {token_symbol}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FDV")
    
    async def load_our_positions_from_supabase(self) -> Dict[str, Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ Supabase lp_position_snapshots"""
        if not SUPABASE_ENABLED or not supabase_handler or not supabase_handler.is_connected():
            print("‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∑–∏—Ü–∏–π")
            return {}
        
        print("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ Supabase...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö)
            week_ago = (datetime.now(timezone.utc) - timedelta(days=7)).isoformat()
            
            result = supabase_handler.client.table('lp_position_snapshots').select('*').gte(
                'created_at', week_ago
            ).order('created_at', desc=True).execute()
            
            if not result.data:
                print("   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏—è—Ö –≤ Supabase")
                return {}
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ pool_id + network, –±–µ—Ä–µ–º –¢–û–õ–¨–ö–û –ü–û–°–õ–ï–î–ù–ò–ï –ø–æ –¥–∞—Ç–µ
            positions_by_pool = {}
            for pos in result.data:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º pool_id (—É–∂–µ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤) –∏ network –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–∏
                pool_address = pos.get('pool_id', '')  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —á–∏—Å—Ç—ã–π –∞–¥—Ä–µ—Å
                network = pos.get('network', 'solana')  # –ü–æ–ª–µ network –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É
                pool_key = f"{pool_address.lower()}_{network}"
                created_at = pos.get('created_at', '')
                
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–ª–∞
                if pool_key not in positions_by_pool or created_at > positions_by_pool[pool_key]['created_at']:
                    positions_by_pool[pool_key] = {
                        'pool_address': pool_address,  # –ß–∏—Å—Ç—ã–π –∞–¥—Ä–µ—Å –∏–∑ pool_id
                        'network': network,  # –ü–æ–ª–µ network
                        'pool_name': pos.get('pool_name', ''),
                        'total_value_usd': float(pos.get('position_value_usd', 0)),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
                        'created_at': created_at
                    }
            
            print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(positions_by_pool)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
            return positions_by_pool
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π –∏–∑ Supabase: {e}")
            return {}
    
    async def get_pool_data_from_geckoterminal(self, pool_info: Dict[str, Any], client: httpx.AsyncClient) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞ –ø–æ –µ–≥–æ –∞–¥—Ä–µ—Å—É –∏–∑ GeckoTerminal API —Å retry –ª–æ–≥–∏–∫–æ–π"""
        network_map = {
            'ethereum': 'eth',
            'base': 'base',
            'solana': 'solana'
        }
        
        network = pool_info['network']
        pool_address = pool_info['pool_address']
        network_id = network_map.get(network, network)
        
        url = f'https://api.geckoterminal.com/api/v2/networks/{network_id}/pools/{pool_address}'
        
        # Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è 429 –æ—à–∏–±–æ–∫
        max_retries = 3
        base_delay = 2.0  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        for attempt in range(max_retries):
            try:
                response = await client.get(url, timeout=20)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π timeout
                
                if response.status_code == 200:
                    data = response.json()
                    pool_attrs = data.get('data', {}).get('attributes', {})
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    reserve_usd = pool_attrs.get('reserve_in_usd', 0)
                    tvl = float(reserve_usd) if reserve_usd else 0
                    
                    volume_24h = 0
                    try:
                        volume_data = pool_attrs.get('volume_usd', {})
                        if volume_data:
                            volume_24h = float(volume_data.get('h24', 0) or 0)
                    except:
                        pass
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞
                    updated_pool = pool_info.copy()
                    updated_pool.update({
                        'tvl_usd': tvl,
                        'volume_24h_usd': volume_24h,
                        'dex': pool_attrs.get('dex_id', 'unknown'),
                        'fee_percent': pool_attrs.get('pool_fee_percent', 0),
                    })
                    
                    print(f"      ‚úÖ {updated_pool['pool_name']} ({network}): TVL ${tvl:,.0f}, Volume ${volume_24h:,.0f}")
                    return updated_pool
                    
                elif response.status_code == 429:
                    # Rate limiting - retry —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                    if attempt < max_retries - 1:
                        delay = base_delay * (2 ** attempt)
                        print(f"      üîÑ {pool_info['pool_name']} ({network}): Rate limit, retry {attempt + 1}/{max_retries} —á–µ—Ä–µ–∑ {delay}s")
                        await asyncio.sleep(delay)
                        continue
                    else:
                        print(f"      ‚ö†Ô∏è {pool_info['pool_name']} ({network}): Rate limit –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å API_ERROR")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–ª —Å –º–µ—Ç–∫–æ–π —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ API –æ—à–∏–±–∫–∏
                        updated_pool = pool_info.copy()
                        updated_pool.update({
                            'tvl_usd': 0,
                            'volume_24h_usd': 0,
                            'dex': 'api_error_429',  # –ú–µ—Ç–∫–∞ —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ API
                            'fee_percent': 0,
                        })
                        return updated_pool
                        
                elif response.status_code == 404:
                    print(f"      ‚ö†Ô∏è {pool_info['pool_name']} ({network}): –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (404) - –ü–†–û–ü–£–°–ö–ê–ï–ú")
                    return None  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É–ª—ã
                    
                else:
                    print(f"      ‚ö†Ô∏è {pool_info['pool_name']} ({network}): API –≤–µ—Ä–Ω—É–ª {response.status_code} - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å API_ERROR")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–ª —Å –º–µ—Ç–∫–æ–π —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ API –æ—à–∏–±–∫–∏
                    updated_pool = pool_info.copy()
                    updated_pool.update({
                        'tvl_usd': 0,
                        'volume_24h_usd': 0,
                        'dex': f'api_error_{response.status_code}',  # –ú–µ—Ç–∫–∞ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
                        'fee_percent': 0,
                    })
                    return updated_pool
                    
            except Exception as e:
                if attempt < max_retries - 1:
                    delay = base_delay * (2 ** attempt)
                    print(f"      üîÑ {pool_info['pool_name']} ({network}): –û—à–∏–±–∫–∞ {e}, retry {attempt + 1}/{max_retries} —á–µ—Ä–µ–∑ {delay}s")
                    await asyncio.sleep(delay)
                    continue
                else:
                    print(f"      ‚ùå {pool_info['pool_name']} ({network}): –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e} - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å API_ERROR")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–ª —Å –º–µ—Ç–∫–æ–π —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏
                    updated_pool = pool_info.copy()
                    updated_pool.update({
                        'tvl_usd': 0,
                        'volume_24h_usd': 0,
                        'dex': 'api_error_exception',  # –ú–µ—Ç–∫–∞ —á—Ç–æ —ç—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                        'fee_percent': 0,
                    })
                    return updated_pool
        
        return None  # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
    
    def calculate_pool_dao_metrics(self, pool_data: Dict[str, Any], dao_token_info: Dict[str, Any], our_positions: Dict[str, Dict[str, Any]]) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—É–ª–∞ –¥–ª—è DAO —Ç–æ–∫–µ–Ω–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω –≤ –ø—É–ª–µ —è–≤–ª—è–µ—Ç—Å—è DAO —Ç–æ–∫–µ–Ω–æ–º
        dao_token_symbol = dao_token_info['symbol']
        pool_name = pool_data['pool_name'].upper()
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—É–ª–∞
        is_dao_in_pool = dao_token_symbol.upper() in pool_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É–ª –ø–∞—Ä–æ–π —Å BIO
        is_bio_pair = (
            'BIO' in pool_name and dao_token_symbol.upper() in pool_name
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DAO —Ç–æ–∫–µ–Ω–∞ –≤ –ø—É–ª–µ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        tvl_usd = pool_data['tvl_usd']
        dao_token_price = dao_token_info.get('price_usd', 0)
        
        if dao_token_price > 0 and is_dao_in_pool:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 50/50 —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –ø—É–ª–µ
            dao_token_value_in_pool = tvl_usd / 2
            dao_token_amount_in_pool = dao_token_value_in_pool / dao_token_price
        else:
            dao_token_value_in_pool = 0
            dao_token_amount_in_pool = 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç FDV
        dao_token_fdv_percentage = 0
        if dao_token_info.get('fdv_usd', 0) > 0:
            dao_token_fdv_percentage = (dao_token_value_in_pool / dao_token_info['fdv_usd']) * 100
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π –≤ —ç—Ç–æ–º –ø—É–ª–µ
        pool_key = f"{pool_data['pool_address'].lower()}_{pool_data['network']}"
        our_position_value = 0
        if pool_key in our_positions:
            our_position_value = our_positions[pool_key]['total_value_usd']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å LP –¥–ª—è BIO –ø–∞—Ä
        target_lp_value_usd = 0
        if is_bio_pair and dao_token_info.get('fdv_usd', 0) > 0:
            target_lp_value_usd = dao_token_info['fdv_usd'] * (self.target_fdv_percentage / 100)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑—Ä—ã–≤ (gap)
        lp_gap_usd = target_lp_value_usd - our_position_value
        
        return {
            'is_bio_pair': is_bio_pair,
            'our_position_value_usd': our_position_value,
            'target_lp_value_usd': target_lp_value_usd,
            'lp_gap_usd': lp_gap_usd
        }
    
    async def generate_snapshot(self) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç –≤—Å–µ—Ö –ø—É–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–Ω–∞–ø—à–æ—Ç–∞ –ø—É–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É BIO
        bio_price = await self._get_bio_price_from_api()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—É–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        all_pools = await self.load_pools_from_config()
        if not all_pools:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—É–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º DAO —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
        dao_tokens = await self.load_dao_tokens_for_calculations()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ Supabase
        our_positions = await self.load_our_positions_from_supabase()
        
        all_pool_snapshots = []
        snapshot_timestamp = datetime.now(timezone.utc)
        
        print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(all_pools)} –ø—É–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞...")
        
        async with httpx.AsyncClient() as client:
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –ø—É–ª—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            for i, pool_info in enumerate(all_pools, 1):
                print(f"\nüìä [{i}/{len(all_pools)}] {pool_info['pool_name']} ({pool_info['network']})")
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞
                updated_pool = await self.get_pool_data_from_geckoterminal(pool_info, client)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (404)
                if updated_pool is None:
                    print(f"      ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {pool_info['pool_name']} ({pool_info['network']}) - –ø—É–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (404)")
                    continue
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π DAO —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
                dao_token_info = self._find_dao_token_for_pool(updated_pool, dao_tokens)
                
                if dao_token_info:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ DAO –¥–ª—è –ø—É–ª–∞
                    dao_metrics = self.calculate_pool_dao_metrics(updated_pool, dao_token_info, our_positions)
                    token_symbol = dao_token_info['symbol']
                    token_fdv_usd = dao_token_info['fdv_usd']
                    token_price_usd = dao_token_info['price_usd']
                else:
                    # –ï—Å–ª–∏ DAO —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    dao_metrics = self._create_basic_pool_metrics(updated_pool, our_positions)
                    token_symbol = self._extract_token_from_pool_name(updated_pool['pool_name'])
                    token_fdv_usd = 0
                    token_price_usd = 0
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å —Å–Ω–∞–ø—à–æ—Ç–∞
                snapshot = {
                    'snapshot_timestamp': snapshot_timestamp.isoformat(),
                    'token_symbol': token_symbol,
                    'token_address': self._get_token_address_for_pool(updated_pool, dao_tokens),
                    'network': updated_pool['network'],
                    'pool_name': updated_pool['pool_name'],
                    'pool_address': updated_pool['pool_address'],
                    'dex': updated_pool['dex'],
                    'fee_percent': updated_pool.get('fee_percent', 0),
                    'tvl_usd': updated_pool['tvl_usd'],
                    'volume_24h_usd': updated_pool['volume_24h_usd'],
                    'token_price_usd': token_price_usd,
                    'token_fdv_usd': token_fdv_usd,
                    'is_bio_pair': dao_metrics['is_bio_pair'],
                    'our_position_value_usd': dao_metrics['our_position_value_usd'],
                    'target_lp_value_usd': dao_metrics['target_lp_value_usd'],
                    'lp_gap_usd': dao_metrics['lp_gap_usd'],
                    'bio_price_usd': bio_price,
                    'target_fdv_percentage': self.target_fdv_percentage
                }
                
                all_pool_snapshots.append(snapshot)
                
                # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                await asyncio.sleep(1.0)  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.2 –¥–æ 1.0 —Å–µ–∫—É–Ω–¥—ã
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ BIO –ø–∞—Ä—ã –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä
        virtual_bio_pairs = self._create_virtual_bio_pairs(dao_tokens, bio_price, all_pool_snapshots)
        all_pool_snapshots.extend(virtual_bio_pairs)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        print(f"\nüìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–Ω–∞–ø—à–æ—Ç—ã –ø–æ —Ç–æ–∫–µ–Ω–∞–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        tokens_data = {}
        for snapshot in all_pool_snapshots:
            token_symbol = snapshot['token_symbol']
            if token_symbol not in tokens_data:
                tokens_data[token_symbol] = {
                    'current_price': snapshot['token_price_usd'],
                    'total_tvl': 0,
                    'snapshots': []
                }
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º TVL (–∏—Å–∫–ª—é—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø—É–ª—ã)
            if snapshot['pool_address'] != '':
                tokens_data[token_symbol]['total_tvl'] += snapshot['tvl_usd']
            
            tokens_data[token_symbol]['snapshots'].append(snapshot)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        for token_symbol, token_data in tokens_data.items():
            current_price = token_data['current_price']
            current_tvl = token_data['total_tvl']
            
            print(f"      üìà {token_symbol}: —Ü–µ–Ω–∞=${current_price:.6f}, TVL=${current_tvl:,.0f}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            price_changes = self._calculate_price_changes(token_symbol, current_price)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è TVL  
            tvl_changes = self._calculate_tvl_changes(token_symbol, current_tvl)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —Å–Ω–∞–ø—à–æ—Ç–∞–º —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            for snapshot in token_data['snapshots']:
                snapshot.update(price_changes)
                snapshot.update(tvl_changes)
        
        print(f"\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(all_pool_snapshots)} —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –ø—É–ª–æ–≤ ({len(all_pool_snapshots) - len(virtual_bio_pairs)} —Ä–µ–∞–ª—å–Ω—ã—Ö + {len(virtual_bio_pairs)} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö)")
        print(f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è {len(tokens_data)} —Ç–æ–∫–µ–Ω–æ–≤")
        return all_pool_snapshots
    
    def _find_dao_token_for_pool(self, pool_info: Dict[str, Any], dao_tokens: Dict[str, Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """–ù–∞–π—Ç–∏ DAO —Ç–æ–∫–µ–Ω –¥–ª—è –ø—É–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        pool_name = pool_info['pool_name'].upper()
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º DAO —Ç–æ–∫–µ–Ω–∞–º –∏ –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø—É–ª–∞
        for token_symbol, token_info in dao_tokens.items():
            if token_symbol.upper() in pool_name:
                return token_info
        
        return None
    
    def _create_basic_pool_metrics(self, pool_info: Dict[str, Any], our_positions: Dict[str, Dict[str, Any]]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø—É–ª–∞ –±–µ–∑ DAO —Ç–æ–∫–µ–Ω–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π –≤ —ç—Ç–æ–º –ø—É–ª–µ
        pool_key = f"{pool_info['pool_address'].lower()}_{pool_info['network']}"
        our_position_value = 0
        if pool_key in our_positions:
            our_position_value = our_positions[pool_key]['total_value_usd']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É–ª –ø–∞—Ä–æ–π —Å BIO
        pool_name = pool_info['pool_name'].upper()
        is_bio_pair = 'BIO' in pool_name
        
        return {
            'is_bio_pair': is_bio_pair,
            'our_position_value_usd': our_position_value,
            'target_lp_value_usd': 0,
            'lp_gap_usd': 0
        }
    
    def _extract_token_from_pool_name(self, pool_name: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—É–ª–∞"""
        if '/' in pool_name:
            tokens = pool_name.split('/')
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω (–Ω–µ BIO/WETH/SOL/USDC)
            for token in tokens:
                token = token.strip()
                if token.upper() not in {'BIO', 'WETH', 'ETH', 'SOL', 'USDC', 'USDT'}:
                    return token
            return tokens[0].strip()
        return pool_name
    
    def _get_token_address_for_pool(self, pool_info: Dict[str, Any], dao_tokens: Dict[str, Dict[str, Any]]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—É–ª–∞"""
        dao_token_info = self._find_dao_token_for_pool(pool_info, dao_tokens)
        if dao_token_info:
            network = pool_info['network']
            return dao_token_info['addresses'].get(network, '')
        return pool_info.get('token0', '')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º token0 –∫–∞–∫ fallback
    
    def _calculate_price_changes(self, token_symbol: str, current_price: float) -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ –∑–∞ 24—á –∏ 7–¥"""
        changes = {
            'price_change_24h_percent': 0.0,
            'price_change_7d_percent': 0.0
        }
        
        try:
            # –¶–µ–Ω–∞ 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            price_24h = supabase_handler.get_historical_token_price(token_symbol, 1)
            if price_24h and price_24h > 0:
                changes['price_change_24h_percent'] = ((current_price - price_24h) / price_24h) * 100
            
            # –¶–µ–Ω–∞ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            price_7d = supabase_handler.get_historical_token_price(token_symbol, 7)
            if price_7d and price_7d > 0:
                changes['price_change_7d_percent'] = ((current_price - price_7d) / price_7d) * 100
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã –¥–ª—è {token_symbol}: {e}")
        
        return changes

    def _calculate_tvl_changes(self, token_symbol: str, current_total_tvl: float) -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ TVL —Ç–æ–∫–µ–Ω–∞ –∑–∞ 7 –¥–Ω–µ–π"""
        changes = {
            'tvl_change_7d_percent': 0.0
        }
        
        try:
            tvl_7d = supabase_handler.get_historical_token_tvl(token_symbol, 7)
            if tvl_7d and tvl_7d > 0:
                changes['tvl_change_7d_percent'] = ((current_total_tvl - tvl_7d) / tvl_7d) * 100
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π TVL –¥–ª—è {token_symbol}: {e}")
        
        return changes
    
    def _create_virtual_bio_pairs(self, dao_tokens: Dict[str, Dict[str, Any]], bio_price: float, existing_snapshots: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö BIO –ø–∞—Ä"""
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ BIO –ø–∞—Ä—ã –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∏ —Å–µ—Ç—è–º
        existing_bio_pairs = set()
        for snapshot in existing_snapshots:
            if snapshot['is_bio_pair']:
                token_symbol = snapshot['token_symbol']
                network = snapshot['network']
                existing_bio_pairs.add((token_symbol, network))
        
        virtual_pairs = []
        snapshot_timestamp = datetime.now(timezone.utc)
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ BIO –ø–∞—Ä—ã...")
        
        for token_symbol, token_info in dao_tokens.items():
            if token_info.get('fdv_usd', 0) <= 0:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã –±–µ–∑ FDV
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ—Ç—å –≥–¥–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
            for network, token_address in token_info['addresses'].items():
                pair_key = (token_symbol, network)
                
                if pair_key not in existing_bio_pairs:
                    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é BIO –ø–∞—Ä—É
                    target_lp_value = token_info['fdv_usd'] * (self.target_fdv_percentage / 100)
                    
                    virtual_pair = {
                        'snapshot_timestamp': snapshot_timestamp.isoformat(),
                        'token_symbol': token_symbol,
                        'token_address': token_address,
                        'network': network,
                        'pool_name': f"BIO/{token_symbol}",
                        'pool_address': '',  # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å - –ø—É–ª –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
                        'dex': 'virtual',
                        'fee_percent': 0,
                        'tvl_usd': 0,  # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É–ª
                        'volume_24h_usd': 0,
                        'token_price_usd': token_info['price_usd'],
                        'token_fdv_usd': token_info['fdv_usd'],
                        'is_bio_pair': True,  # –≠—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è BIO –ø–∞—Ä–∞
                        'our_position_value_usd': 0,  # –£ –Ω–∞—Å –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø—É–ª–µ
                        'target_lp_value_usd': target_lp_value,
                        'lp_gap_usd': target_lp_value,  # –í–µ—Å—å —Ç–∞—Ä–≥–µ—Ç —ç—Ç–æ gap
                        'bio_price_usd': bio_price,
                        'target_fdv_percentage': self.target_fdv_percentage
                    }
                    
                    virtual_pairs.append(virtual_pair)
                    print(f"   ‚ûï –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞: BIO/{token_symbol} ({network}) ‚Üí Target LP: ${target_lp_value:,.0f}")
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(virtual_pairs)} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö BIO –ø–∞—Ä")
        return virtual_pairs
    
    def _get_network_stats(self, snapshots: List[Dict[str, Any]]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Ç—è–º"""
        by_network = {}
        
        for snapshot in snapshots:
            network = snapshot['network']
            if network not in by_network:
                by_network[network] = {
                    'pools': 0,
                    'total_tvl': 0,
                    'bio_pairs': 0,
                    'our_positions': 0,
                    'target_lp': 0,
                    'lp_gap': 0
                }
            
            stats = by_network[network]
            stats['pools'] += 1
            stats['total_tvl'] += snapshot['tvl_usd']
            
            if snapshot['is_bio_pair']:
                stats['bio_pairs'] += 1
                stats['target_lp'] += snapshot['target_lp_value_usd']
                stats['lp_gap'] += snapshot['lp_gap_usd']
            
            if snapshot['our_position_value_usd'] > 0:
                stats['our_positions'] += 1
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        lines = []
        for network, stats in by_network.items():
            lines.append(f"   üìä {network.upper():8}: {stats['pools']:2d} –ø—É–ª–æ–≤, ${stats['total_tvl']:,.0f} TVL, {stats['bio_pairs']} BIO –ø–∞—Ä, {stats['our_positions']} –Ω–∞—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π")
            if stats['bio_pairs'] > 0:
                lines.append(f"      üí∞ Target LP: ${stats['target_lp']:,.0f}, Gap: ${stats['lp_gap']:,.0f}")
        
        return '\n'.join(lines)
    
    async def save_to_csv(self, snapshots: List[Dict[str, Any]]) -> str:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–∞–ø—à–æ—Ç—ã –≤ CSV —Ñ–∞–π–ª"""
        if not snapshots:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ CSV")
            return ""
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'dao_pools_snapshot_{timestamp}.csv'
        
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=snapshots[0].keys())
            writer.writeheader()
            writer.writerows(snapshots)
        
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        return filename
    
    async def save_to_supabase(self, snapshots: List[Dict[str, Any]]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–∞–ø—à–æ—Ç—ã –≤ Supabase"""
        if not SUPABASE_ENABLED or not supabase_handler or not supabase_handler.is_connected():
            print("‚ö†Ô∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False
        
        if not snapshots:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase")
            return False
        
        try:
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(snapshots)} —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –≤ Supabase...")
            
            # UPSERT –ª–æ–≥–∏–∫–∞: –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            today = datetime.now(timezone.utc).strftime('%Y-%m-%d')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            existing_today = supabase_handler.client.table('dao_pool_snapshots').select('id, pool_id').gte('created_at', f'{today}T00:00:00Z').lte('created_at', f'{today}T23:59:59.999Z').execute()
            
            if existing_today.data:
                print(f"   üîÑ –ù–∞–π–¥–µ–Ω–æ {len(existing_today.data)} –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today}) - –æ–±–Ω–æ–≤–ª—è–µ–º")
                
                # –°–æ–∑–¥–∞—ë–º mapping —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ pool_id
                existing_pools = {record['pool_id']: record['id'] for record in existing_today.data}
                
                success_count = 0
                for snapshot in snapshots:
                    snapshot['created_at'] = datetime.now(timezone.utc).isoformat()
                    pool_id = snapshot.get('pool_id')
                    
                    if pool_id in existing_pools:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                        result = supabase_handler.client.table('dao_pool_snapshots').update(snapshot).eq('id', existing_pools[pool_id]).execute()
                        if result.data:
                            success_count += 1
                    else:
                        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (–Ω–æ–≤—ã–π –ø—É–ª)
                        result = supabase_handler.client.table('dao_pool_snapshots').insert(snapshot).execute()
                        if result.data:
                            success_count += 1
                            
            else:
                print(f"   ‚ú® –ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today}) –Ω–µ—Ç - —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ")
                
                # –î–æ–±–∞–≤–ª—è–µ–º created_at –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
                for snapshot in snapshots:
                    snapshot['created_at'] = datetime.now(timezone.utc).isoformat()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á–∞–º–∏ –ø–æ 100
                batch_size = 100
                success_count = 0
                
                for i in range(0, len(snapshots), batch_size):
                    batch = snapshots[i:i + batch_size]
                    result = supabase_handler.client.table('dao_pool_snapshots').insert(batch).execute()
                    
                    if result.data:
                        success_count += len(result.data)
                    else:
                        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞ {i // batch_size + 1}")
            
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count} –∏–∑ {len(snapshots)} –∑–∞–ø–∏—Å–µ–π")
            print(f"   üìà –†–µ–∂–∏–º: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è (UPSERT –ø–æ –¥–Ω—è–º)")
            print(f"   üìä Views –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ {today}")
            return success_count > 0
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase: {e}")
            return False

    async def fetch_token_ohlcv_data(self, pool_address: str, network: str, client: httpx.AsyncClient) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å OHLCV –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω"""
        network_map = {
            'ethereum': 'eth',
            'base': 'base', 
            'solana': 'solana'
        }
        
        network_id = network_map.get(network, network)
        url = f'https://api.geckoterminal.com/api/v2/networks/{network_id}/pools/{pool_address}/ohlcv/day?limit=8'
        
        # Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è rate limits
        max_retries = 3
        base_delay = 2.0
        
        for attempt in range(max_retries):
            try:
                response = await client.get(url, timeout=20)
                
                if response.status_code == 200:
                    data = response.json()
                    ohlcv_list = data.get('data', {}).get('attributes', {}).get('ohlcv_list', [])
                    
                    if len(ohlcv_list) >= 2:  # –ú–∏–Ω–∏–º—É–º 2 –¥–Ω—è –¥–∞–Ω–Ω—ã—Ö
                        return {
                            'current': ohlcv_list[0],  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å [timestamp, open, high, low, close, volume]
                            'day_1': ohlcv_list[1] if len(ohlcv_list) > 1 else None,  # 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
                            'day_7': ohlcv_list[7] if len(ohlcv_list) > 7 else ohlcv_list[-1],  # 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –∏–ª–∏ —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π
                            'count': len(ohlcv_list)
                        }
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ OHLCV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pool_address} ({network}): {len(ohlcv_list)} –¥–Ω–µ–π")
                        return None
                        
                elif response.status_code == 429:  # Rate limit
                    delay = base_delay * (2 ** attempt)  # Exponential backoff
                    if attempt < max_retries - 1:
                        print(f"   üîÑ OHLCV Rate limit –¥–ª—è {pool_address}, retry {attempt + 1}/{max_retries} —á–µ—Ä–µ–∑ {delay}s")
                        await asyncio.sleep(delay)
                        continue
                    else:
                        print(f"   ‚ö†Ô∏è OHLCV Rate limit –¥–ª—è {pool_address} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                        return None
                else:
                    print(f"   ‚ö†Ô∏è OHLCV API error –¥–ª—è {pool_address}: {response.status_code}")
                    return None
                    
            except Exception as e:
                if attempt < max_retries - 1:
                    delay = base_delay * (2 ** attempt)
                    print(f"   üîÑ OHLCV –æ—à–∏–±–∫–∞ –¥–ª—è {pool_address}, retry {attempt + 1}/{max_retries} —á–µ—Ä–µ–∑ {delay}s: {e}")
                    await asyncio.sleep(delay)
                    continue
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OHLCV –¥–ª—è {pool_address}: {e}")
                    return None
        
        return None

    def calculate_price_changes(self, current_price: float, ohlcv_data: Dict[str, Any]) -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ OHLCV –¥–∞–Ω–Ω—ã—Ö"""
        changes = {
            'price_change_24h_percent': None,
            'price_change_7d_percent': None
        }
        
        try:
            # 24h –∏–∑–º–µ–Ω–µ–Ω–∏–µ: current vs 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
            if ohlcv_data.get('day_1'):
                price_24h_ago = float(ohlcv_data['day_1'][4])  # close price
                if price_24h_ago > 0:
                    changes['price_change_24h_percent'] = ((current_price - price_24h_ago) / price_24h_ago) * 100
            
            # 7d –∏–∑–º–µ–Ω–µ–Ω–∏–µ: current vs 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            if ohlcv_data.get('day_7'):
                price_7d_ago = float(ohlcv_data['day_7'][4])  # close price
                if price_7d_ago > 0:
                    changes['price_change_7d_percent'] = ((current_price - price_7d_ago) / price_7d_ago) * 100
            
            return changes
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω: {e}")
            return changes

    async def save_token_price_history(self, token_symbol: str, network: str, current_price: float, 
                                     current_fdv: float, ohlcv_data: Dict[str, Any] = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω —Ç–æ–∫–µ–Ω–∞ –≤ Supabase"""
        if not SUPABASE_ENABLED or not supabase_handler or not supabase_handler.is_connected():
            return False
        
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ OHLCV
            price_changes = self.calculate_price_changes(current_price, ohlcv_data or {})
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã –∏–∑ OHLCV
            price_24h_ago = None
            price_7d_ago = None
            fdv_24h_ago = None
            fdv_7d_ago = None
            
            if ohlcv_data:
                if ohlcv_data.get('day_1'):
                    price_24h_ago = float(ohlcv_data['day_1'][4])  # close price
                    if current_fdv and current_price:
                        fdv_24h_ago = current_fdv * (price_24h_ago / current_price)
                
                if ohlcv_data.get('day_7'):
                    price_7d_ago = float(ohlcv_data['day_7'][4])  # close price  
                    if current_fdv and current_price:
                        fdv_7d_ago = current_fdv * (price_7d_ago / current_price)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º FDV –∏–∑–º–µ–Ω–µ–Ω–∏—è
            fdv_change_24h = None
            fdv_change_7d = None
            
            if fdv_24h_ago and fdv_24h_ago > 0:
                fdv_change_24h = ((current_fdv - fdv_24h_ago) / fdv_24h_ago) * 100
                
            if fdv_7d_ago and fdv_7d_ago > 0:
                fdv_change_7d = ((current_fdv - fdv_7d_ago) / fdv_7d_ago) * 100
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            price_history_data = {
                'token_symbol': token_symbol,
                'network': network,
                'price_current': current_price,
                'fdv_current': current_fdv,
                'price_24h_ago': price_24h_ago,
                'price_7d_ago': price_7d_ago,
                'fdv_24h_ago': fdv_24h_ago,
                'fdv_7d_ago': fdv_7d_ago,
                'price_change_24h_percent': price_changes['price_change_24h_percent'],
                'price_change_7d_percent': price_changes['price_change_7d_percent'],
                'fdv_change_24h_percent': fdv_change_24h,
                'fdv_change_7d_percent': fdv_change_7d,
                'last_updated': datetime.now(timezone.utc).isoformat(),
                'data_source': 'geckoterminal'
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase
            return supabase_handler.save_token_price_history(price_history_data)
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω {token_symbol}: {e}")
            return False

    async def collect_token_price_history(self, all_pool_snapshots: List[Dict[str, Any]], dao_tokens: Dict[str, Dict[str, Any]], client: httpx.AsyncClient):
        """–°–æ–±—Ä–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        print(f"\nüìà –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤...")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—É–ª—ã –ø–æ —Ç–æ–∫–µ–Ω–∞–º –∏ —Å–µ—Ç—è–º
        tokens_by_network = {}
        
        for snapshot in all_pool_snapshots:
            token_symbol = snapshot.get('token_symbol')
            network = snapshot.get('network')
            pool_address = snapshot.get('pool_address')
            
            if not token_symbol or not network or not pool_address:
                continue
                
            # –ò—Å–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
            if token_symbol in ['SOL', 'ETH', 'BIO', 'WETH']:
                continue
            
            key = (token_symbol, network)
            if key not in tokens_by_network:
                tokens_by_network[key] = {
                    'token_symbol': token_symbol,
                    'network': network,
                    'pools': [],
                    'best_pool': None,
                    'max_tvl': 0
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ª—É—á—à–∏–π (–ø–æ TVL)
            pool_info = {
                'address': pool_address,
                'tvl': snapshot.get('tvl_usd', 0),
                'price': snapshot.get('token_price_usd', 0),
                'fdv': snapshot.get('token_fdv_usd', 0)
            }
            
            tokens_by_network[key]['pools'].append(pool_info)
            
            if pool_info['tvl'] > tokens_by_network[key]['max_tvl']:
                tokens_by_network[key]['max_tvl'] = pool_info['tvl']
                tokens_by_network[key]['best_pool'] = pool_info
        
        # –°–æ–±–∏—Ä–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        success_count = 0
        total_count = len(tokens_by_network)
        rate_limit_count = 0  # –°—á–µ—Ç—á–∏–∫ rate limits –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
        
        for i, ((token_symbol, network), token_data) in enumerate(tokens_by_network.items(), 1):
            best_pool = token_data['best_pool']
            
            if not best_pool or best_pool['price'] <= 0:
                print(f"   ‚ö†Ô∏è {token_symbol} ({network}): –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                continue
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—É–ª–∞ –¥–ª—è —Ç–æ—á–Ω–æ–π —Ü–µ–Ω—ã
                pool_address = best_pool['address']
                network_map = {'ethereum': 'eth', 'base': 'base', 'solana': 'solana'}
                network_id = network_map.get(network, network)
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ API –ø—É–ª–∞
                pool_url = f'https://api.geckoterminal.com/api/v2/networks/{network_id}/pools/{pool_address}'
                pool_response = await client.get(pool_url, timeout=20)
                
                current_price = best_pool['price']  # Fallback –∫ —Ü–µ–Ω–µ –∏–∑ snapshot
                original_price = best_pool['price']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π FDV –∏–∑ dao_tokens (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–∑ –≤—Å–µ—Ö —Å–µ—Ç–µ–π)
                current_fdv = dao_tokens.get(token_symbol, {}).get('fdv_usd', 0)
                
                if pool_response.status_code == 200:
                    pool_data = pool_response.json()
                    attrs = pool_data.get('data', {}).get('attributes', {})
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –±–∞–∑–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (CURES –≤ –ø–∞—Ä–µ BIO/CURES)
                    api_price = float(attrs.get('base_token_price_usd', 0))
                    if api_price > 0:
                        current_price = api_price
                        if abs(current_price - original_price) > 0.000001:  # –¶–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                            print(f"   üìä {token_symbol}: –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ ${current_price:.6f} (–±—ã–ª–æ ${original_price:.6f})")
                        else:
                            print(f"   üìä {token_symbol}: –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ ${current_price:.6f} (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
                    else:
                        print(f"   üìä {token_symbol}: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ snapshot ${current_price:.6f}")
                    
                    # FDV –Ω–µ –±–µ—Ä–µ–º –∏–∑ API –ø—É–ª–∞ (–Ω–µ—Ç–æ—á–Ω–æ), –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π
                elif pool_response.status_code == 429:
                    rate_limit_count += 1
                    print(f"   ‚ö†Ô∏è {token_symbol}: Rate limit –¥–ª—è API –ø—É–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ snapshot ${current_price:.6f}")
                else:
                    print(f"   ‚ö†Ô∏è {token_symbol}: API –ø—É–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({pool_response.status_code}), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ snapshot ${current_price:.6f}")
                
                # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—É–ª–∞
                ohlcv_data = await self.fetch_token_ohlcv_data(
                    pool_address, 
                    network, 
                    client
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω —Å –ê–ö–¢–£–ê–õ–¨–ù–û–ô —Ü–µ–Ω–æ–π
                success = await self.save_token_price_history(
                    token_symbol,
                    network,
                    current_price,    # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                    current_fdv,      # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é FDV
                    ohlcv_data
                )
                
                if success:
                    success_count += 1
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö rate limits
                base_delay = 1.0
                if rate_limit_count > 5:  # –ú–Ω–æ–≥–æ rate limits
                    delay = base_delay * 3  # –£—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    print(f"   ‚è≥ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ {delay}s –∏–∑-–∑–∞ rate limits ({rate_limit_count})")
                elif rate_limit_count > 2:  # –£–º–µ—Ä–µ–Ω–Ω—ã–µ rate limits  
                    delay = base_delay * 2  # –£–¥–≤–æ–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                else:
                    delay = base_delay
                
                await asyncio.sleep(delay)
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {token_symbol} ({network}): {e}")
        
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {success_count} –∏–∑ {total_count} —Ç–æ–∫–µ–Ω–æ–≤ (rate limits: {rate_limit_count})")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö DAO POOLS SNAPSHOT GENERATOR")
    print("=" * 50)
    
    try:
        generator = DAOPoolsSnapshotGenerator()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–Ω–∞–ø—à–æ—Ç
        snapshots = await generator.generate_snapshot()
        
        if not snapshots:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—É–ª–∞—Ö")
            return
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ù–ê–ü–®–û–¢–ê:")
        print(f"   üéØ –í—Å–µ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤: {len(snapshots)}")
        print(f"   üí∞ –û–±—â–∏–π TVL: ${sum(s['tvl_usd'] for s in snapshots):,.0f}")
        print(f"   üîó BIO –ø–∞—Ä: {sum(1 for s in snapshots if s['is_bio_pair'])}")
        print(f"   üíº –ù–∞—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π: {sum(1 for s in snapshots if s['our_position_value_usd'] > 0)}")
        print(f"\n{generator._get_network_stats(snapshots)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV (–≤—Å–µ–≥–¥–∞)
        csv_file = await generator.save_to_csv(snapshots)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if SUPABASE_ENABLED:
            await generator.save_to_supabase(snapshots)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ DAO —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            dao_tokens = await generator.load_dao_tokens_for_calculations()
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤
            async with httpx.AsyncClient() as client:
                await generator.collect_token_price_history(snapshots, dao_tokens, client)
        
        print(f"\n‚úÖ –°–ù–ê–ü–®–û–¢ –ó–ê–í–ï–†–®–ï–ù")
        print(f"üìÅ –§–∞–π–ª: {csv_file}")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 