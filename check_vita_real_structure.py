#!/usr/bin/env python3

import requests
import json

def check_vita_mint_structure():
    """–†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã VITA mint account –Ω–∞ Solana"""
    
    print("üîç –†–ï–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ VITA –ù–ê SOLANA")
    print("=============================================")
    print()
    
    vita_mint = "vita3LfgKErA37DWA7W8RBks3c7Rym2hPFgizNRshBi"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π RPC (–±–µ–∑ –∫–ª—é—á–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    public_rpc = "https://api.mainnet-beta.solana.com"
    
    print(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º mint: {vita_mint}")
    print(f"üîó RPC: {public_rpc}")
    print()
    
    # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ mint account
    payload = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "getAccountInfo",
        "params": [
            vita_mint,
            {
                "encoding": "jsonParsed"
            }
        ]
    }
    
    try:
        response = requests.post(public_rpc, json=payload, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if 'result' in data and data['result'] and data['result']['value']:
            account_info = data['result']['value']
            parsed_data = account_info.get('data', {}).get('parsed', {})
            mint_info = parsed_data.get('info', {})
            
            print("‚úÖ MINT ACCOUNT –ù–ê–ô–î–ï–ù!")
            print("=======================")
            print()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ mint
            decimals = mint_info.get('decimals', 'N/A')
            supply = mint_info.get('supply', 'N/A') 
            mint_authority = mint_info.get('mintAuthority', 'N/A')
            freeze_authority = mint_info.get('freezeAuthority', 'N/A')
            
            print(f"üìä Decimals: {decimals}")
            print(f"üè™ Supply: {supply}")
            print(f"üîê Mint Authority: {mint_authority}")
            print(f"‚ùÑÔ∏è Freeze Authority: {freeze_authority}")
            print()
            
            # –ê–Ω–∞–ª–∏–∑ mint authority
            print("üîç –ê–ù–ê–õ–ò–ó MINT AUTHORITY:")
            print("========================")
            
            wormhole_addresses = [
                "wormDTUJ6AWPNvk59vGQbDvGJmqbDTdgWgAqcLBCgUb",  # Token Bridge
                "worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth",  # Core Bridge
            ]
            
            is_wormhole_bridge = mint_authority in wormhole_addresses
            
            if is_wormhole_bridge:
                print("üåâ ‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –≠—Ç–æ Wormhole/Portal bridge —Ç–æ–∫–µ–Ω!")
                print(f"   ‚Ä¢ Mint Authority: {mint_authority}")
                print(f"   ‚Ä¢ –≠—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ Token Bridge Wormhole")
                print()
                
                print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –ú–ï–¢–ê–î–ê–ù–ù–´–ú–ò:")
                print("   ‚Ä¢ Mint Authority –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç Wormhole")
                print("   ‚Ä¢ VitaDAO –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CreateMetadataV2")
                print("   ‚Ä¢ –ù—É–∂–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è")
                print()
                
            elif mint_authority == vita_mint:
                print("ü§î –°–¢–†–ê–ù–ù–û: Mint Authority = —Å–∞–º mint address")
                print("   ‚Ä¢ –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ authority –æ—Ç–æ–∑–≤–∞–Ω")
                print("   ‚Ä¢ –ò–ª–∏ —ç—Ç–æ –æ—Å–æ–±–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
                print()
                
            elif mint_authority is None or mint_authority == 'null':
                print("üö´ Mint Authority –æ—Ç–æ–∑–≤–∞–Ω (null)")
                print("   ‚Ä¢ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Metaplex")
                print("   ‚Ä¢ Supply —Ç–æ–∫–µ–Ω–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω")
                print()
                
            else:
                print(f"üîç –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô Mint Authority: {mint_authority}")
                print("   ‚Ä¢ –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º Wormhole –∞–¥—Ä–µ—Å–æ–º")
                print("   ‚Ä¢ –ù—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
                print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ decimals —Å Ethereum
            print("üîó –°–†–ê–í–ù–ï–ù–ò–ï –° ETHEREUM:")
            print("========================")
            print(f"   ‚Ä¢ Solana decimals: {decimals}")
            print("   ‚Ä¢ Ethereum decimals: 18 (–∏–∑ Alchemy API)")
            
            if str(decimals) == "18":
                print("   ‚úÖ Decimals —Å–æ–≤–ø–∞–¥–∞—é—Ç - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä bridge —Ç–æ–∫–µ–Ω–∞")
            else:
                print("   ‚ùì Decimals –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω")
            print()
            
            # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            print("üìÑ –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê MINT ACCOUNT:")
            print("=================================")
            print(json.dumps(mint_info, indent=2))
            print()
            
        else:
            print("‚ùå MINT ACCOUNT –ù–ï –ù–ê–ô–î–ï–ù!")
            error = data.get('error', {})
            print(f"–û—à–∏–±–∫–∞: {error}")
            print()
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê: {e}")
        print()
    
    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("==============")
    print()
    print("–ï—Å–ª–∏ VITA - —ç—Ç–æ Wormhole bridge —Ç–æ–∫–µ–Ω:")
    print("   ‚ùå –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã")
    print("   ‚úÖ –ù—É–∂–Ω—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è")
    print()
    print("üí° –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–´:")
    print("   1. –í–Ω–µ—à–Ω–∏–π —Ä–µ–µ—Å—Ç—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    print("   2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å dApps –Ω–∞–ø—Ä—è–º—É—é")
    print("   3. –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ Wormhole")
    print("   4. –û–∂–∏–¥–∞–Ω–∏–µ Token Extensions –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    print()

if __name__ == "__main__":
    check_vita_mint_structure()
