#!/usr/bin/env python3

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database_handler import SupabaseHandler
from datetime import datetime, timedelta
from collections import defaultdict

def analyze_duplicates():
    """–ê–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–æ–∑–∏—Ü–∏–π"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í –í lp_position_snapshots")
    print("===========================================")
    
    supabase_handler = SupabaseHandler()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
    three_days_ago = (datetime.now() - timedelta(days=3)).strftime('%Y-%m-%d')
    
    print(f"\nüìÖ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å {three_days_ago}...")
    
    result = supabase_handler.client.table('lp_position_snapshots').select(
        'id, position_mint, network, pool_id, pool_name, position_value_usd, created_at'
    ).gte('created_at', three_days_ago).order('created_at', desc=True).execute()
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(result.data)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º
    unique_positions = defaultdict(list)
    
    for record in result.data:
        position_mint = record.get('position_mint', '')
        network = record.get('network', '')
        value = float(record.get('position_value_usd', 0))
        created_at = record.get('created_at', '')
        
        # –ö–ª—é—á —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        unique_key = f"{position_mint}_{network}"
        
        unique_positions[unique_key].append({
            'id': record['id'],
            'pool_name': record.get('pool_name', 'N/A'),
            'value': value,
            'created_at': created_at
        })
    
    print(f"\nüéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(unique_positions)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates_found = 0
    total_excess_value = 0
    positions_to_delete = []
    
    print("\nüîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í:")
    
    for unique_key, records in unique_positions.items():
        if len(records) > 1:
            duplicates_found += 1
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            records.sort(key=lambda x: x['created_at'], reverse=True)
            
            newest = records[0]
            duplicates = records[1:]
            
            print(f"\n   üö® {newest['pool_name']} ({unique_key})")
            print(f"      –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}")
            print(f"      ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º: ${newest['value']:,.2f} ({newest['created_at']})")
            
            duplicate_value = 0
            for dup in duplicates:
                duplicate_value += dup['value']
                positions_to_delete.append(dup['id'])
                print(f"      ‚ùå –£–¥–∞–ª—è–µ–º: ${dup['value']:,.2f} ({dup['created_at']})")
            
            total_excess_value += duplicate_value
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í:")
    print(f"   ‚Ä¢ –ü–æ–∑–∏—Ü–∏–π —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: {duplicates_found}")
    print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(positions_to_delete)}")
    print(f"   ‚Ä¢ –ò–∑–±—ã—Ç–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_excess_value:,.2f}")
    print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: ${117870735.71 - total_excess_value:,.2f}")
    
    if len(positions_to_delete) > 0:
        print(f"\n‚ùì –í–´–ü–û–õ–ù–ò–¢–¨ –û–ß–ò–°–¢–ö–£ –î–£–ë–õ–ò–ö–ê–¢–û–í?")
        print(f"   –≠—Ç–æ —É–¥–∞–ª–∏—Ç {len(positions_to_delete)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π")
        print(f"   –∏ —É–º–µ–Ω—å—à–∏—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –Ω–∞ ${total_excess_value:,.2f}")
        
        # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω, –Ω–µ —É–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        print(f"\n‚ö†Ô∏è –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –ü–õ–ê–ù –ì–û–¢–û–í, –ù–û –ù–ï –í–´–ü–û–õ–ù–ï–ù")
        print(f"   –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è")
        
        # –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–´–ô –∫–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        try:
            print("\\nüóëÔ∏è –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã...")
            for record_id in positions_to_delete:
                supabase_handler.client.table('lp_position_snapshots').delete().eq('id', record_id).execute()
            
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(positions_to_delete)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        """
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    print(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if duplicates_found > 0:
        print(f"   1. –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã - –Ω—É–∂–Ω–∞ –æ—á–∏—Å—Ç–∫–∞")
        print(f"   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–ø–∏—Å–∏ –ø–æ–∑–∏—Ü–∏–π")
        print(f"   3. –î–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
    else:
        print(f"   ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    return positions_to_delete, total_excess_value

def create_cleanup_script(positions_to_delete):
    """–°–æ–∑–¥–∞–µ—Ç SQL —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
    
    if not positions_to_delete:
        return
    
    script_content = "-- –°–ö–†–ò–ü–¢ –û–ß–ò–°–¢–ö–ò –î–£–ë–õ–ò–ö–ê–¢–û–í lp_position_snapshots\n"
    script_content += f"-- –£–¥–∞–ª—è–µ—Ç {len(positions_to_delete)} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π\n"
    script_content += f"-- –°–æ–∑–¥–∞–Ω: {datetime.now().isoformat()}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º ID –ø–æ –±–∞—Ç—á–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    batch_size = 50
    for i in range(0, len(positions_to_delete), batch_size):
        batch = positions_to_delete[i:i+batch_size]
        ids_str = "', '".join(batch)
        script_content += f"-- Batch {i//batch_size + 1}\n"
        script_content += f"DELETE FROM lp_position_snapshots WHERE id IN ('{ids_str}');\n\n"
    
    with open('cleanup_duplicates.sql', 'w') as f:
        f.write(script_content)
    
    print(f"üíæ SQL —Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: cleanup_duplicates.sql")

if __name__ == "__main__":
    positions_to_delete, total_excess = analyze_duplicates()
    if positions_to_delete:
        create_cleanup_script(positions_to_delete)
