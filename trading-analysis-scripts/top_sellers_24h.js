const fs = require('fs');
const ethers = require('ethers');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const POOL_ADDRESS = '0x08a5a1e2671839dadc25e2e20f9206fd33c88092'; // BIO/WETH pool
const BIO_TOKEN = '0xcb1592591996765ec0efc1f92599a19767ee5ffa';
const WETH_TOKEN = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';
const WETH_PRICE_USD = 3400; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ WETH –¥–ª—è –æ—Ü–µ–Ω–∫–∏

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
const ALCHEMY_KEY = process.env.ALCHEMY_API_KEY || 'Hkg1Oi9c8x3JEiXj2cL62';
const RPC_URL = `https://eth-mainnet.g.alchemy.com/v2/${ALCHEMY_KEY}`;
const provider = new ethers.JsonRpcProvider(RPC_URL);

// ABI –¥–ª—è Swap —Å–æ–±—ã—Ç–∏—è
const SWAP_EVENT_ABI = [
    "event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick)"
];

async function analyzeTopSellers24h() {
    try {
        console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ BIO –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞');
        console.log('========================================================');
        console.log('');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
        const currentBlock = await provider.getBlockNumber();
        
        // 24 —á–∞—Å–∞ = 7200 –±–ª–æ–∫–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        const BLOCKS_24H = 7200;
        const fromBlock24h = currentBlock - BLOCKS_24H;

        console.log(`üìä –ë–ª–æ–∫–∏: ${fromBlock24h} ‚Üí ${currentBlock}`);
        console.log(`üìà –î–∏–∞–ø–∞–∑–æ–Ω: ${BLOCKS_24H} –±–ª–æ–∫–æ–≤ (24 —á–∞—Å–∞)`);
        console.log('');

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –≤ –ø—É–ª–µ
        const poolContract = new ethers.Contract(POOL_ADDRESS, [
            "function token0() view returns (address)",
            "function token1() view returns (address)"
        ], provider);

        const token0 = await poolContract.token0();
        const token1 = await poolContract.token1();
        
        const bioIsToken0 = token0.toLowerCase() === BIO_TOKEN.toLowerCase();
        console.log(`üîç BIO –ø–æ–∑–∏—Ü–∏—è –≤ –ø—É–ª–µ: ${bioIsToken0 ? 'token0' : 'token1'}`);
        console.log('');

        // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ Swap —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        console.log(`üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö Swap —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞...`);

        const filter = {
            address: POOL_ADDRESS,
            topics: [ethers.id("Swap(address,address,int256,int256,uint160,uint128,int24)")],
            fromBlock: fromBlock24h,
            toBlock: "latest"
        };

        const logs = await provider.getLogs(filter);
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${logs.length}`);
        console.log('');

        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const iface = new ethers.Interface(SWAP_EVENT_ABI);

        // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–æ–¥–∞–≤—Ü–∞–º
        const sellerData = {};

        console.log(`üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂ BIO...`);

        for (let i = 0; i < logs.length; i++) {
            try {
                const log = logs[i];
                const decoded = iface.parseLog({
                    topics: log.topics,
                    data: log.data
                });

                const sender = decoded.args.sender;
                const amount0 = decoded.args.amount0;
                const amount1 = decoded.args.amount1;

                // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥–∞–∂—É BIO
                let bioAmount, wethAmount, isBioSale;
                
                if (bioIsToken0) {
                    // BIO = token0
                    bioAmount = Math.abs(Number(ethers.formatEther(amount0)));
                    wethAmount = Math.abs(Number(ethers.formatEther(amount1)));
                    isBioSale = amount0 > 0n; // BIO –í–•–û–î–ò–¢ –≤ –ø—É–ª = –ü–†–û–î–ê–ñ–ê BIO
                } else {
                    // BIO = token1
                    bioAmount = Math.abs(Number(ethers.formatEther(amount1)));
                    wethAmount = Math.abs(Number(ethers.formatEther(amount0)));
                    isBioSale = amount1 > 0n; // BIO –í–•–û–î–ò–¢ –≤ –ø—É–ª = –ü–†–û–î–ê–ñ–ê BIO
                }

                // –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏ BIO
                if (isBioSale) {
                    if (!sellerData[sender]) {
                        sellerData[sender] = {
                            address: sender,
                            totalBioSold: 0,
                            totalWethReceived: 0,
                            transactionCount: 0,
                            transactions: []
                        };
                    }

                    sellerData[sender].totalBioSold += bioAmount;
                    sellerData[sender].totalWethReceived += wethAmount;
                    sellerData[sender].transactionCount += 1;
                    sellerData[sender].transactions.push({
                        txHash: log.transactionHash,
                        blockNumber: log.blockNumber,
                        bioAmount: bioAmount,
                        wethAmount: wethAmount,
                        usdValue: wethAmount * WETH_PRICE_USD
                    });
                }

                // –ü—Ä–æ–≥—Ä–µ—Å—Å
                if (i % 100 === 0 && i > 0) {
                    console.log(`   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i}/${logs.length} —Å–æ–±—ã—Ç–∏–π...`);
                }

            } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞ ${i}: ${error.message}`);
            }
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ USD —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        const sortedSellers = Object.values(sellerData)
            .map(seller => ({
                ...seller,
                totalUsdValue: seller.totalWethReceived * WETH_PRICE_USD
            }))
            .sort((a, b) => b.totalUsdValue - a.totalUsdValue);

        console.log('');
        console.log('üèÜ –¢–û–ü –ö–†–£–ü–ù–ï–ô–®–ò–• –ü–†–û–î–ê–í–¶–û–í BIO (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)');
        console.log('==================================================');
        console.log('');

        if (sortedSellers.length === 0) {
            console.log('‚ùå –ü—Ä–æ–¥–∞–∂ BIO –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20 –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        const topCount = Math.min(20, sortedSellers.length);
        
        for (let i = 0; i < topCount; i++) {
            const seller = sortedSellers[i];
            console.log(`${i + 1}. üí∞ ${seller.address}`);
            console.log(`   üìä –ü—Ä–æ–¥–∞–Ω–æ BIO: ${seller.totalBioSold.toLocaleString()} BIO`);
            console.log(`   üíé –ü–æ–ª—É—á–µ–Ω–æ WETH: ${seller.totalWethReceived.toFixed(6)} WETH`);
            console.log(`   üíµ USD —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${seller.totalUsdValue.toLocaleString()}`);
            console.log(`   üî¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${seller.transactionCount}`);
            console.log(`   üìà –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: ${(seller.totalBioSold / seller.transactionCount).toLocaleString()} BIO`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—É—é –∫—Ä—É–ø–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —ç—Ç–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
            const largestTx = seller.transactions.sort((a, b) => b.usdValue - a.usdValue)[0];
            console.log(`   üéØ –ö—Ä—É–ø–Ω–µ–π—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: $${largestTx.usdValue.toLocaleString()} (${largestTx.bioAmount.toLocaleString()} BIO)`);
            console.log(`      TX: ${largestTx.txHash}`);
            console.log('');
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalSellers = sortedSellers.length;
        const totalBioSold = sortedSellers.reduce((sum, seller) => sum + seller.totalBioSold, 0);
        const totalUsdValue = sortedSellers.reduce((sum, seller) => sum + seller.totalUsdValue, 0);

        console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–î–ê–ñ:');
        console.log(`   ‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: ${totalSellers}`);
        console.log(`   ‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: ${totalBioSold.toLocaleString()} BIO`);
        console.log(`   ‚Ä¢ –û–±—â–∞—è USD —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${totalUsdValue.toLocaleString()}`);
        console.log(`   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞ –Ω–∞ –∞–¥—Ä–µ—Å: ${(totalBioSold / totalSellers).toLocaleString()} BIO`);

        // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
        const top5Volume = sortedSellers.slice(0, 5).reduce((sum, seller) => sum + seller.totalUsdValue, 0);
        const top10Volume = sortedSellers.slice(0, 10).reduce((sum, seller) => sum + seller.totalUsdValue, 0);
        
        console.log('');
        console.log('üéØ –ö–û–ù–¶–ï–ù–¢–†–ê–¶–ò–Ø –ü–†–û–î–ê–ñ:');
        console.log(`   ‚Ä¢ –¢–æ–ø-5 –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: ${((top5Volume / totalUsdValue) * 100).toFixed(1)}% –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞`);
        console.log(`   ‚Ä¢ –¢–æ–ø-10 –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: ${((top10Volume / totalUsdValue) * 100).toFixed(1)}% –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä–µ–º–∞`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ CSV
        const csvLines = ['Address,Total BIO Sold,Total WETH Received,USD Value,Transaction Count,Average Sale Size'];
        
        sortedSellers.forEach(seller => {
            csvLines.push([
                seller.address,
                seller.totalBioSold.toFixed(6),
                seller.totalWethReceived.toFixed(6),
                seller.totalUsdValue.toFixed(2),
                seller.transactionCount,
                (seller.totalBioSold / seller.transactionCount).toFixed(6)
            ].join(','));
        });

        const csvContent = csvLines.join('\n');
        const csvFilename = `top_bio_sellers_24h_${Date.now()}.csv`;
        fs.writeFileSync(csvFilename, csvContent);
        
        console.log('');
        console.log(`üíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${csvFilename}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeTopSellers24h();
