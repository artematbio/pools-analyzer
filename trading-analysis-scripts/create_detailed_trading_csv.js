const fs = require('fs');
const ethers = require('ethers');

// –¢–æ–ø –ø—Ä–æ–¥–∞–≤—Ü—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
const TOP_SELLERS = [
    '0x98C3d3183C4b8A650614ad179A1a98be0a8d6B8E',
    '0xfBd4cdB413E45a52E2C8312f670e9cE67E794C37',
    '0xfbEedCFe378866DaB6abbaFd8B2986F5C1768737',
    '0x6747BcaF9bD5a5F0758Cbe08903490E45DdfACB5',
    '0x5141B82f5fFDa4c6fE1E372978F1C5427640a190',
    '0x66a9893cC07D91D95644AEDD05D03f95e1dBA8Af',
    '0x6E2c0F7C995E1e75b925512B1859eB3E9F9C11C0',
    '0x2905d7e4D048d29954F81b02171DD313F457a4a4',
    '0x3708F5c9533557B1633c7a255Ed385348488AeaE',
    '0x111111125421cA6dc452d289314280a0f8842A65',
    '0x00000000A991C429eE2Ec6df19d40fe0c80088B8',
    '0x8331f9ACcE69b02C281F40a00706f758665ccE77',
    '0xEff6cb8b614999d130E537751Ee99724D01aA167',
    '0x76600115C5Cbe56d82bDe2Af8CAfb3801AEE5EFe',
    '0xE592427A0AEce92De3Edee1F18E0157C05861564',
    '0xDf31A70a21A1931e02033dBBa7DEaCe6c45cfd0f',
    '0x2E1Dee213BA8d7af0934C49a23187BabEACa8764',
    '0x0B570b66cF3b5eAb1FD10c89230cad58aA2FCb59',
    '0x8189AFcC5B73Dc90600FeE92e5267Aff1D192884',
    '0x7C81247aE0A35B03e3f4A704DCD6b101dcA53Abd'
];

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const POOL_ADDRESS = '0x08a5a1e2671839dadc25e2e20f9206fd33c88092';
const BIO_TOKEN = '0xcb1592591996765ec0efc1f92599a19767ee5ffa';
const WETH_TOKEN = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';
const WETH_PRICE_USD = 3400;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
const ALCHEMY_KEY = process.env.ALCHEMY_API_KEY || 'Hkg1Oi9c8x3JEiXj2cL62';
const RPC_URL = `https://eth-mainnet.g.alchemy.com/v2/${ALCHEMY_KEY}`;
const provider = new ethers.JsonRpcProvider(RPC_URL);

// ABI –¥–ª—è Swap —Å–æ–±—ã—Ç–∏—è
const SWAP_EVENT_ABI = [
    "event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick)"
];

async function createDetailedTradingCSV() {
    try {
        console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ CSV –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ —Ç–æ–ø –∞–¥—Ä–µ—Å–æ–≤');
        console.log('=========================================================');
        console.log('');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
        const currentBlock = await provider.getBlockNumber();
        const BLOCKS_24H = 7200;
        const fromBlock24h = currentBlock - BLOCKS_24H;

        console.log(`üìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–±–ª–æ–∫–∏ ${fromBlock24h} ‚Üí ${currentBlock})`);
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${TOP_SELLERS.length} –∞–¥—Ä–µ—Å–æ–≤`);
        console.log('');

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –≤ –ø—É–ª–µ
        const poolContract = new ethers.Contract(POOL_ADDRESS, [
            "function token0() view returns (address)",
            "function token1() view returns (address)"
        ], provider);

        const token0 = await poolContract.token0();
        const bioIsToken0 = token0.toLowerCase() === BIO_TOKEN.toLowerCase();
        console.log(`üíé BIO –ø–æ–∑–∏—Ü–∏—è –≤ –ø—É–ª–µ: ${bioIsToken0 ? 'token0' : 'token1'}`);
        console.log('');

        // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ Swap —Å–æ–±—ã—Ç–∏–π
        console.log(`üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö Swap —Å–æ–±—ã—Ç–∏–π...`);
        const filter = {
            address: POOL_ADDRESS,
            topics: [ethers.id("Swap(address,address,int256,int256,uint160,uint128,int24)")],
            fromBlock: fromBlock24h,
            toBlock: "latest"
        };

        const logs = await provider.getLogs(filter);
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${logs.length}`);
        console.log('');

        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const iface = new ethers.Interface(SWAP_EVENT_ABI);

        // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–¥—Ä–µ—Å–∞–º
        const addressData = {};

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        TOP_SELLERS.forEach(address => {
            addressData[address.toLowerCase()] = {
                address: address,
                totalBioSold: 0,
                totalBioBought: 0,
                totalWethFromSales: 0,
                totalWethFromPurchases: 0,
                salesCount: 0,
                purchasesCount: 0
            };
        });

        console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...`);

        for (let i = 0; i < logs.length; i++) {
            try {
                const log = logs[i];
                const decoded = iface.parseLog({
                    topics: log.topics,
                    data: log.data
                });

                const sender = decoded.args.sender.toLowerCase();
                const amount0 = decoded.args.amount0;
                const amount1 = decoded.args.amount1;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                if (addressData[sender]) {
                    let bioAmount, wethAmount, isBioSale;
                    
                    if (bioIsToken0) {
                        bioAmount = Math.abs(Number(ethers.formatEther(amount0)));
                        wethAmount = Math.abs(Number(ethers.formatEther(amount1)));
                        isBioSale = amount0 > 0n; // BIO –≤—Ö–æ–¥–∏—Ç –≤ –ø—É–ª = –ø—Ä–æ–¥–∞–∂–∞ BIO
                    } else {
                        bioAmount = Math.abs(Number(ethers.formatEther(amount1)));
                        wethAmount = Math.abs(Number(ethers.formatEther(amount0)));
                        isBioSale = amount1 > 0n; // BIO –≤—Ö–æ–¥–∏—Ç –≤ –ø—É–ª = –ø—Ä–æ–¥–∞–∂–∞ BIO
                    }

                    if (isBioSale) {
                        // –ü—Ä–æ–¥–∞–∂–∞ BIO
                        addressData[sender].totalBioSold += bioAmount;
                        addressData[sender].totalWethFromSales += wethAmount;
                        addressData[sender].salesCount++;
                    } else {
                        // –ü–æ–∫—É–ø–∫–∞ BIO
                        addressData[sender].totalBioBought += bioAmount;
                        addressData[sender].totalWethFromPurchases += wethAmount;
                        addressData[sender].purchasesCount++;
                    }
                }

                if (i % 100 === 0 && i > 0) {
                    console.log(`   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i}/${logs.length} —Å–æ–±—ã—Ç–∏–π...`);
                }

            } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞ ${i}: ${error.message}`);
            }
        }

        console.log('');
        console.log('üìã –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ CSV –æ—Ç—á–µ—Ç–∞...');

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CSV
        const csvData = [];

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV
        const headers = [
            'Address',
            'Total_Transactions',
            'Sales_Count',
            'Purchases_Count',
            'BIO_Sold',
            'BIO_Bought',
            'WETH_From_Sales',
            'WETH_To_Purchases', 
            'USD_From_Sales',
            'USD_To_Purchases',
            'Net_BIO_Position',
            'Net_WETH_Position',
            'Net_USD_Position',
            'Trading_Type',
            'Net_Position_Status',
            'Average_Sale_Size_BIO',
            'Average_Purchase_Size_BIO',
            'Sales_USD_per_Transaction',
            'Purchases_USD_per_Transaction'
        ];

        csvData.push(headers.join(','));

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å
        const processedAddresses = Object.values(addressData)
            .filter(data => data.salesCount > 0 || data.purchasesCount > 0)
            .map(data => {
                const usdFromSales = data.totalWethFromSales * WETH_PRICE_USD;
                const usdToPurchases = data.totalWethFromPurchases * WETH_PRICE_USD;
                const netBio = data.totalBioSold - data.totalBioBought;
                const netWeth = data.totalWethFromSales - data.totalWethFromPurchases;
                const netUsd = netWeth * WETH_PRICE_USD;
                const totalTransactions = data.salesCount + data.purchasesCount;

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏
                let tradingType;
                if (data.salesCount > 0 && data.purchasesCount > 0) {
                    tradingType = 'Active_Trader';
                } else if (data.salesCount > 0 && data.purchasesCount === 0) {
                    tradingType = 'Only_Seller';
                } else if (data.salesCount === 0 && data.purchasesCount > 0) {
                    tradingType = 'Only_Buyer';
                } else {
                    tradingType = 'No_Activity';
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∏—Å—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                let netStatus;
                if (netBio > 1000) {
                    netStatus = 'Net_Seller';
                } else if (netBio < -1000) {
                    netStatus = 'Net_Buyer';
                } else {
                    netStatus = 'Balanced';
                }

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–∞–∑–º–µ—Ä—ã
                const avgSaleSize = data.salesCount > 0 ? data.totalBioSold / data.salesCount : 0;
                const avgPurchaseSize = data.purchasesCount > 0 ? data.totalBioBought / data.purchasesCount : 0;
                const salesUsdPerTx = data.salesCount > 0 ? usdFromSales / data.salesCount : 0;
                const purchasesUsdPerTx = data.purchasesCount > 0 ? usdToPurchases / data.purchasesCount : 0;

                return [
                    data.address,
                    totalTransactions,
                    data.salesCount,
                    data.purchasesCount,
                    data.totalBioSold.toFixed(6),
                    data.totalBioBought.toFixed(6),
                    data.totalWethFromSales.toFixed(6),
                    data.totalWethFromPurchases.toFixed(6),
                    usdFromSales.toFixed(2),
                    usdToPurchases.toFixed(2),
                    netBio.toFixed(6),
                    netWeth.toFixed(6),
                    netUsd.toFixed(2),
                    tradingType,
                    netStatus,
                    avgSaleSize.toFixed(6),
                    avgPurchaseSize.toFixed(6),
                    salesUsdPerTx.toFixed(2),
                    purchasesUsdPerTx.toFixed(2)
                ];
            })
            .sort((a, b) => Math.abs(parseFloat(b[12])) - Math.abs(parseFloat(a[12]))); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é —á–∏—Å—Ç–æ–π USD –ø–æ–∑–∏—Ü–∏–∏

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
        processedAddresses.forEach(row => {
            csvData.push(row.join(','));
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV —Ñ–∞–π–ª
        const csvContent = csvData.join('\n');
        const csvFilename = `detailed_trading_analysis_24h_${Date.now()}.csv`;
        fs.writeFileSync(csvFilename, csvContent);

        console.log('');
        console.log('‚úÖ CSV –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üìÅ –§–∞–π–ª: ${csvFilename}`);
        console.log(`üìä –ó–∞–ø–∏—Å–µ–π: ${processedAddresses.length}`);
        console.log('');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const onlySellers = processedAddresses.filter(row => row[13] === 'Only_Seller');
        const onlyBuyers = processedAddresses.filter(row => row[13] === 'Only_Buyer');
        const activeTraders = processedAddresses.filter(row => row[13] === 'Active_Trader');
        const netSellers = processedAddresses.filter(row => row[14] === 'Net_Seller');
        const netBuyers = processedAddresses.filter(row => row[14] === 'Net_Buyer');

        console.log('üìà –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê CSV:');
        console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: ${processedAddresses.length}`);
        console.log(`   ‚Ä¢ –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤—Ü—ã: ${onlySellers.length}`);
        console.log(`   ‚Ä¢ –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏: ${onlyBuyers.length}`);
        console.log(`   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—Ü—ã: ${activeTraders.length}`);
        console.log(`   ‚Ä¢ –ß–∏—Å—Ç—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã: ${netSellers.length}`);
        console.log(`   ‚Ä¢ –ß–∏—Å—Ç—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏: ${netBuyers.length}`);
        console.log('');

        console.log('üìã CSV –ö–û–õ–û–ù–ö–ò:');
        console.log('   1. Address - –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞/–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
        console.log('   2. Total_Transactions - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
        console.log('   3. Sales_Count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂');
        console.log('   4. Purchases_Count - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫');
        console.log('   5. BIO_Sold - –æ–±—â–∏–π –æ–±—ä–µ–º –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ BIO');
        console.log('   6. BIO_Bought - –æ–±—â–∏–π –æ–±—ä–µ–º –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ BIO');
        console.log('   7. WETH_From_Sales - WETH –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç –ø—Ä–æ–¥–∞–∂');
        console.log('   8. WETH_To_Purchases - WETH –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –ø–æ–∫—É–ø–∫–∏');
        console.log('   9. USD_From_Sales - USD —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂');
        console.log('   10. USD_To_Purchases - USD —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫');
        console.log('   11. Net_BIO_Position - —á–∏—Å—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ BIO');
        console.log('   12. Net_WETH_Position - —á–∏—Å—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ WETH');
        console.log('   13. Net_USD_Position - —á–∏—Å—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ USD');
        console.log('   14. Trading_Type - —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–ª–∏ (Only_Seller/Only_Buyer/Active_Trader)');
        console.log('   15. Net_Position_Status - —Å—Ç–∞—Ç—É—Å —á–∏—Å—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ (Net_Seller/Net_Buyer/Balanced)');
        console.log('   16. Average_Sale_Size_BIO - —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–¥–∞–∂–∏');
        console.log('   17. Average_Purchase_Size_BIO - —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∫—É–ø–∫–∏');
        console.log('   18. Sales_USD_per_Transaction - USD –ø—Ä–æ–¥–∞–∂ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
        console.log('   19. Purchases_USD_per_Transaction - USD –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV:', error);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è CSV
createDetailedTradingCSV();
