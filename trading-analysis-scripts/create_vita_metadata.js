
// JAVASCRIPT –ö–û–î –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ú–ï–¢–ê–î–ê–ù–ù–´–•
// =====================================

import { 
  createCreateMetadataAccountV2Instruction,
  PROGRAM_ID as METADATA_PROGRAM_ID,
  createUpdateMetadataAccountV2Instruction
} from '@metaplex-foundation/mpl-token-metadata';
import { PublicKey, Transaction } from '@solana/web3.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const VITA_MINT = new PublicKey('vita3LfgKErA37DWA7W8RBks3c7Rym2hPFgizNRshBi');
const METADATA_URI = 'https://your-ipfs-or-arweave-url/vita-metadata.json';

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
async function createVitaMetadata(connection, payer) {
  try {
    // –í—ã—á–∏—Å–ª—è–µ–º Metadata PDA
    const [metadataPDA] = PublicKey.findProgramAddressSync(
      [
        Buffer.from('metadata'),
        METADATA_PROGRAM_ID.toBuffer(),
        VITA_MINT.toBuffer(),
      ],
      METADATA_PROGRAM_ID
    );

    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Metaplex
    const metadataData = {
      name: 'VitaDAO',
      symbol: 'VITA', 
      uri: METADATA_URI,
      sellerFeeBasisPoints: 0,
      creators: null,
      collection: null,
      uses: null,
    };

    // –°–æ–∑–¥–∞–µ–º instruction
    const createMetadataInstruction = createCreateMetadataAccountV2Instruction(
      {
        metadata: metadataPDA,
        mint: VITA_MINT,
        mintAuthority: payer.publicKey, // –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞!
        payer: payer.publicKey,
        updateAuthority: payer.publicKey,
      },
      {
        createMetadataAccountArgsV2: {
          data: metadataData,
          isMutable: true,
        },
      }
    );

    // –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = new Transaction().add(createMetadataInstruction);
    
    const signature = await connection.sendTransaction(transaction, [payer]);
    await connection.confirmTransaction(signature);
    
    console.log('‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('üìù Metadata PDA:', metadataPDA.toString());
    console.log('üîó Signature:', signature);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
// createVitaMetadata(connection, wallet);
