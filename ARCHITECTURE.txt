# POOLS-ANALYZER MULTICHAIN SYSTEM ARCHITECTURE (EN)

## Contents

1. Overview
2. Architectural layers
3. Data schema (Supabase)
4. End-to-end workflow
5. Critical dependencies
6. Calculations and algorithms
7. Configuration
8. Monitoring and alerting
9. Trading analysis tools (Node.js)

---

## Overview

Pools-Analyzer is a multi-chain system for monitoring liquidity and LP positions across three blockchains:

- Solana: Raydium CLMM pools
- Ethereum: Uniswap V3 pools
- Base: Uniswap V3 pools

### Goal
Provide an always-up-to-date, decision-ready view of the DAO token portfolio, liquidity conditions, investment gaps, and automated reporting.

### Key metrics (examples)
- Total Portfolio Value
- Active networks, number of positions, number of pools monitored
- DAO investment gaps (target vs our current LP)

---

## Architectural layers

### 1) Orchestration layer (scheduler.py)

Orchestrates periodic tasks in a strict order.

- Token-first orchestration (v2):
  1. Tokens: price, market cap, FDV, OHLCV refresh
  2. Positions: all networks
  3. Pools: DAO snapshots and metrics
  4. Reports: Telegram summaries

This guarantees that downstream consumers (positions/pools/views/reports) rely on fresh token metrics.

### 2) Data collection layer

#### 2.1 Solana (`pool_analyzer.py` + `positions.py`)

Data sources:
- Helius RPC: NFT position state
- Raydium json_uri: per-position USD value
- GeckoTerminal / Bitquery: token prices, historical/market data

Flow:
- Load positions from configured wallets
- Enrich with USD values and prices
- Compute position metrics (APR, in-range status)
- Persist to `lp_position_snapshots` (network='solana')

#### 2.2 Ethereum/Base (`ethereum-analyzer/*`)

Data sources:
- Alchemy RPC
- Uniswap V3 contracts (NFT Manager, Pool)
- Optional The Graph subgraphs for pool metadata

Flow:
- Load NFT positions per wallet
- Resolve token0/token1, compute current value, range status, unclaimed fees
- Record pool snapshot data (TVL/volume/price fields where available)
- Persist to `lp_position_snapshots` and `lp_pool_snapshots`

### 3) Reporting layer (`multichain_report_generator.py`)

Data sources for the report:
- `lp_position_snapshots` (all networks)
- `lp_pool_snapshots`
- `dao_pool_snapshots`

Flow:
- Collect last fresh data per network
- Aggregate portfolio summary
- Format and send to Telegram

---

## Data schema (Supabase)

### `lp_position_snapshots`
Stores position snapshots per chain and pool.

Key fields:
- `position_mint`, `network`, `pool_id`, `pool_name`
- `token0_address/symbol/amount`, `token1_address/symbol/amount`
- `position_value_usd`, `fees_usd`, `in_range`
- `current_price`, `fee_tier`, `tick_lower/upper`, `liquidity_share_percent`
- timestamps

### `lp_pool_snapshots`
Stores pool-level snapshots.

Key fields:
- `pool_id`, `pool_address`, `pool_name`, `network`
- `token0/1` meta, `fee_tier`
- `tvl_usd`, `volume_24h_usd`
- optional: `tick`, `sqrtPriceX96`, `current_price`
- timestamps

### `dao_pool_snapshots`
Stores DAO-oriented pool metrics per token/pool.

Key fields:
- `pool_address`, `pool_name`, `network`, `dex`
- `tvl_usd`, `token_symbol`, `token_fdv_usd`, `bio_price_usd`
- `is_bio_pair`
- `our_position_value_usd`, `target_lp_value_usd`, `lp_gap_usd`
- `price_change_24h_percent`, `price_change_7d_percent`, `tvl_change_7d_percent`
- timestamps (`created_at`, `snapshot_timestamp`)

### `bio_dao_lp_support` (VIEW)
A critical view joining `dao_pool_snapshots` with `lp_position_snapshots` for investment gap analysis. In production we recommend a materialized companion (`bio_dao_lp_support_m`) refreshed after DAO snapshots are written.

---

## End-to-end workflow

Every 4 hours (synchronized):
1) Token metrics refresh (price/FDV/MC/OHLCV)
2) Solana positions → `lp_position_snapshots`
3) Ethereum positions → `lp_position_snapshots` + `lp_pool_snapshots`
4) Base positions → `lp_position_snapshots` + `lp_pool_snapshots`
5) DAO pools snapshot → `dao_pool_snapshots`

Twice a day:
- Build and send Telegram report from the latest tables and views

---

## Critical dependencies

- `dao_pools_snapshot.py` depends on the latest `lp_position_snapshots`. DAO metrics, including `our_position_value_usd` and `lp_gap_usd`, must reference the most recent position snapshots per pool.
- Task order: tokens → positions → pools → reports.

---

## Calculations and algorithms

### DAO pool metrics (`dao_pools_snapshot.py`)
- Detect BIO pairs (excluding QBIO) by pool naming and token symbol
- Our position value per pool = last position snapshot value for that pool/network
- Target LP value for BIO pairs = 1% of FDV (if FDV > 0)
- LP gap = target LP value − our position value

### Virtual BIO pairs
For tokens without a real BIO pair, generate a virtual pair to highlight the target LP gap (uses FDV-based target and zero TVL/position as baseline).

---

## Configuration (env)

- Supabase: `SUPABASE_URL`, `SUPABASE_SERVICE_ROLE_KEY`
- RPC endpoints:
  - `ETHEREUM_RPC_URL`, `BASE_RPC_URL` (Alchemy)
  - `HELIUS_RPC_URL` (Solana)
- Telegram: `TELEGRAM_BOT_TOKEN`, `TELEGRAM_CHAT_ID`
- Wallets: Solana and EVM addresses for position collection

---

## Monitoring and alerting

- Health checks (availability of files, Telegram connectivity, Supabase connectivity)
- Position monitoring (out-of-range, proximity alerts)
- Task execution monitoring (status and failure alerts)

---

## Trading analysis tools (Node.js)

- Uniswap V3 analysis scripts (sell pressure, top sellers, net positions, detailed CSV)
- Methodology examples:
  - Swap direction detection by token in/out
  - Trader segmentation (Only_Seller/Only_Buyer/Active/Net_Seller/Net_Buyer/Balanced)
  - Sell Pressure = Sell Volume − Buy Volume (USD)

Dependencies:
- `ethers.js` v6, Alchemy RPC, Node.js with env support
