const fs = require('fs');
const ethers = require('ethers');

// –¢–æ–ø –ø—Ä–æ–¥–∞–≤—Ü—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
const TOP_SELLERS = [
    '0x98C3d3183C4b8A650614ad179A1a98be0a8d6B8E',
    '0xfBd4cdB413E45a52E2C8312f670e9cE67E794C37',
    '0xfbEedCFe378866DaB6abbaFd8B2986F5C1768737',
    '0x6747BcaF9bD5a5F0758Cbe08903490E45DdfACB5',
    '0x5141B82f5fFDa4c6fE1E372978F1C5427640a190',
    '0x66a9893cC07D91D95644AEDD05D03f95e1dBA8Af',
    '0x6E2c0F7C995E1e75b925512B1859eB3E9F9C11C0',
    '0x2905d7e4D048d29954F81b02171DD313F457a4a4',
    '0x3708F5c9533557B1633c7a255Ed385348488AeaE',
    '0x111111125421cA6dc452d289314280a0f8842A65',
    '0x00000000A991C429eE2Ec6df19d40fe0c80088B8',
    '0x8331f9ACcE69b02C281F40a00706f758665ccE77',
    '0xEff6cb8b614999d130E537751Ee99724D01aA167',
    '0x76600115C5Cbe56d82bDe2Af8CAfb3801AEE5EFe',
    '0xE592427A0AEce92De3Edee1F18E0157C05861564',
    '0xDf31A70a21A1931e02033dBBa7DEaCe6c45cfd0f',
    '0x2E1Dee213BA8d7af0934C49a23187BabEACa8764',
    '0x0B570b66cF3b5eAb1FD10c89230cad58aA2FCb59',
    '0x8189AFcC5B73Dc90600FeE92e5267Aff1D192884',
    '0x7C81247aE0A35B03e3f4A704DCD6b101dcA53Abd'
];

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const POOL_ADDRESS = '0x08a5a1e2671839dadc25e2e20f9206fd33c88092';
const BIO_TOKEN = '0xcb1592591996765ec0efc1f92599a19767ee5ffa';
const WETH_TOKEN = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2';
const WETH_PRICE_USD = 3400;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
const ALCHEMY_KEY = process.env.ALCHEMY_API_KEY || 'Hkg1Oi9c8x3JEiXj2cL62';
const RPC_URL = `https://eth-mainnet.g.alchemy.com/v2/${ALCHEMY_KEY}`;
const provider = new ethers.JsonRpcProvider(RPC_URL);

// ABI –¥–ª—è Swap —Å–æ–±—ã—Ç–∏—è
const SWAP_EVENT_ABI = [
    "event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick)"
];

async function analyzeNetPositions() {
    try {
        console.log('üìä –ê–Ω–∞–ª–∏–∑ —á–∏—Å—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Ç–æ–ø –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ BIO');
        console.log('==========================================');
        console.log('');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
        const currentBlock = await provider.getBlockNumber();
        const BLOCKS_24H = 7200;
        const fromBlock24h = currentBlock - BLOCKS_24H;

        console.log(`üìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–±–ª–æ–∫–∏ ${fromBlock24h} ‚Üí ${currentBlock})`);
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${TOP_SELLERS.length} –∞–¥—Ä–µ—Å–æ–≤`);
        console.log('');

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –≤ –ø—É–ª–µ
        const poolContract = new ethers.Contract(POOL_ADDRESS, [
            "function token0() view returns (address)",
            "function token1() view returns (address)"
        ], provider);

        const token0 = await poolContract.token0();
        const bioIsToken0 = token0.toLowerCase() === BIO_TOKEN.toLowerCase();
        console.log(`üíé BIO –ø–æ–∑–∏—Ü–∏—è –≤ –ø—É–ª–µ: ${bioIsToken0 ? 'token0' : 'token1'}`);
        console.log('');

        // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ Swap —Å–æ–±—ã—Ç–∏–π
        console.log(`üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö Swap —Å–æ–±—ã—Ç–∏–π...`);
        const filter = {
            address: POOL_ADDRESS,
            topics: [ethers.id("Swap(address,address,int256,int256,uint160,uint128,int24)")],
            fromBlock: fromBlock24h,
            toBlock: "latest"
        };

        const logs = await provider.getLogs(filter);
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${logs.length}`);
        console.log('');

        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const iface = new ethers.Interface(SWAP_EVENT_ABI);

        // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–¥—Ä–µ—Å–∞–º
        const addressData = {};

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–ø –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        TOP_SELLERS.forEach(address => {
            addressData[address.toLowerCase()] = {
                address: address,
                totalBioSold: 0,
                totalBioBought: 0,
                totalWethFromSales: 0,
                totalWethFromPurchases: 0,
                salesCount: 0,
                purchasesCount: 0,
                transactions: []
            };
        });

        console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...`);

        for (let i = 0; i < logs.length; i++) {
            try {
                const log = logs[i];
                const decoded = iface.parseLog({
                    topics: log.topics,
                    data: log.data
                });

                const sender = decoded.args.sender.toLowerCase();
                const amount0 = decoded.args.amount0;
                const amount1 = decoded.args.amount1;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                if (addressData[sender]) {
                    let bioAmount, wethAmount, isBioSale;
                    
                    if (bioIsToken0) {
                        bioAmount = Math.abs(Number(ethers.formatEther(amount0)));
                        wethAmount = Math.abs(Number(ethers.formatEther(amount1)));
                        isBioSale = amount0 > 0n; // BIO –≤—Ö–æ–¥–∏—Ç –≤ –ø—É–ª = –ø—Ä–æ–¥–∞–∂–∞ BIO
                    } else {
                        bioAmount = Math.abs(Number(ethers.formatEther(amount1)));
                        wethAmount = Math.abs(Number(ethers.formatEther(amount0)));
                        isBioSale = amount1 > 0n; // BIO –≤—Ö–æ–¥–∏—Ç –≤ –ø—É–ª = –ø—Ä–æ–¥–∞–∂–∞ BIO
                    }

                    if (isBioSale) {
                        // –ü—Ä–æ–¥–∞–∂–∞ BIO
                        addressData[sender].totalBioSold += bioAmount;
                        addressData[sender].totalWethFromSales += wethAmount;
                        addressData[sender].salesCount++;
                    } else {
                        // –ü–æ–∫—É–ø–∫–∞ BIO
                        addressData[sender].totalBioBought += bioAmount;
                        addressData[sender].totalWethFromPurchases += wethAmount;
                        addressData[sender].purchasesCount++;
                    }

                    addressData[sender].transactions.push({
                        txHash: log.transactionHash,
                        blockNumber: log.blockNumber,
                        type: isBioSale ? 'SELL' : 'BUY',
                        bioAmount: bioAmount,
                        wethAmount: wethAmount,
                        usdValue: wethAmount * WETH_PRICE_USD
                    });
                }

                if (i % 100 === 0 && i > 0) {
                    console.log(`   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i}/${logs.length} —Å–æ–±—ã—Ç–∏–π...`);
                }

            } catch (error) {
                console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞ ${i}: ${error.message}`);
            }
        }

        console.log('');
        console.log('üéØ –ê–ù–ê–õ–ò–ó –ß–ò–°–¢–´–• –ü–û–ó–ò–¶–ò–ô –¢–û–ü –ü–†–û–î–ê–í–¶–û–í');
        console.log('=====================================');
        console.log('');

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        const activeAddresses = Object.values(addressData)
            .filter(data => data.salesCount > 0 || data.purchasesCount > 0)
            .map(data => ({
                ...data,
                netBio: data.totalBioSold - data.totalBioBought,
                netWeth: data.totalWethFromSales - data.totalWethFromPurchases,
                netUsd: (data.totalWethFromSales - data.totalWethFromPurchases) * WETH_PRICE_USD,
                totalTransactions: data.salesCount + data.purchasesCount
            }))
            .sort((a, b) => Math.abs(b.netUsd) - Math.abs(a.netUsd));

        if (activeAddresses.length === 0) {
            console.log('‚ùå –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–ø –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        for (let i = 0; i < activeAddresses.length; i++) {
            const addr = activeAddresses[i];
            
            console.log(`${i + 1}. üèõÔ∏è ${addr.address}`);
            console.log(`   üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${addr.totalTransactions} (${addr.salesCount} –ø—Ä–æ–¥–∞–∂, ${addr.purchasesCount} –ø–æ–∫—É–ø–æ–∫)`);
            console.log('');
            
            if (addr.salesCount > 0) {
                console.log(`   üìâ –ü–†–û–î–ê–ñ–ò:`);
                console.log(`      ‚Ä¢ BIO –ø—Ä–æ–¥–∞–Ω–æ: ${addr.totalBioSold.toLocaleString()} BIO`);
                console.log(`      ‚Ä¢ WETH –ø–æ–ª—É—á–µ–Ω–æ: ${addr.totalWethFromSales.toFixed(6)} WETH`);
                console.log(`      ‚Ä¢ USD —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${(addr.totalWethFromSales * WETH_PRICE_USD).toLocaleString()}`);
            }
            
            if (addr.purchasesCount > 0) {
                console.log(`   üìà –ü–û–ö–£–ü–ö–ò:`);
                console.log(`      ‚Ä¢ BIO –∫—É–ø–ª–µ–Ω–æ: ${addr.totalBioBought.toLocaleString()} BIO`);
                console.log(`      ‚Ä¢ WETH –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${addr.totalWethFromPurchases.toFixed(6)} WETH`);
                console.log(`      ‚Ä¢ USD —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${(addr.totalWethFromPurchases * WETH_PRICE_USD).toLocaleString()}`);
            }

            console.log('');
            console.log(`   ‚öñÔ∏è –ß–ò–°–¢–ê–Ø –ü–û–ó–ò–¶–ò–Ø:`);
            console.log(`      ‚Ä¢ –ß–∏—Å—Ç—ã–π BIO: ${addr.netBio > 0 ? '+' : ''}${addr.netBio.toLocaleString()} BIO`);
            console.log(`      ‚Ä¢ –ß–∏—Å—Ç—ã–π WETH: ${addr.netWeth > 0 ? '+' : ''}${addr.netWeth.toFixed(6)} WETH`);
            console.log(`      ‚Ä¢ –ß–∏—Å—Ç—ã–π USD: ${addr.netUsd > 0 ? '+' : ''}$${addr.netUsd.toLocaleString()}`);
            
            if (addr.netBio > 0) {
                console.log(`      üî¥ –°—Ç–∞—Ç—É—Å: –ß–ò–°–¢–´–ô –ü–†–û–î–ê–í–ï–¶ (–∏–∑–±—ã—Ç–æ–∫ –ø—Ä–æ–¥–∞–∂)`);
            } else if (addr.netBio < 0) {
                console.log(`      üü¢ –°—Ç–∞—Ç—É—Å: –ß–ò–°–¢–´–ô –ü–û–ö–£–ü–ê–¢–ï–õ–¨ (–∏–∑–±—ã—Ç–æ–∫ –ø–æ–∫—É–ø–æ–∫)`);
            } else {
                console.log(`      üü° –°—Ç–∞—Ç—É—Å: –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –¢–û–†–ì–û–í–õ–Ø`);
            }
            
            console.log('');
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const onlySellers = activeAddresses.filter(addr => addr.purchasesCount === 0);
        const onlyBuyers = activeAddresses.filter(addr => addr.salesCount === 0);
        const traders = activeAddresses.filter(addr => addr.salesCount > 0 && addr.purchasesCount > 0);
        const netSellers = activeAddresses.filter(addr => addr.netBio > 0);
        const netBuyers = activeAddresses.filter(addr => addr.netBio < 0);

        console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: ${activeAddresses.length}`);
        console.log(`   ‚Ä¢ –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–≤—Ü—ã: ${onlySellers.length}`);
        console.log(`   ‚Ä¢ –¢–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏: ${onlyBuyers.length}`);
        console.log(`   ‚Ä¢ –¢–æ—Ä–≥–æ–≤—Ü—ã (–∏ –ø–æ–∫—É–ø–∫–∏, –∏ –ø—Ä–æ–¥–∞–∂–∏): ${traders.length}`);
        console.log(`   ‚Ä¢ –ß–∏—Å—Ç—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã: ${netSellers.length}`);
        console.log(`   ‚Ä¢ –ß–∏—Å—Ç—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏: ${netBuyers.length}`);

        console.log('');
        console.log('üèÜ –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø –ê–î–†–ï–°–û–í:');
        console.log('');

        if (onlySellers.length > 0) {
            console.log('üî¥ –¢–û–õ–¨–ö–û –ü–†–û–î–ê–í–¶–´ (–¥–∞–º–ø—è—Ç –ø–æ–∑–∏—Ü–∏–∏):');
            onlySellers.forEach(addr => {
                console.log(`   ‚Ä¢ ${addr.address}: -$${(addr.netUsd * -1).toLocaleString()}`);
            });
            console.log('');
        }

        if (traders.length > 0) {
            console.log('üîÑ –ê–ö–¢–ò–í–ù–´–ï –¢–û–†–ì–û–í–¶–´:');
            traders.forEach(addr => {
                const status = addr.netBio > 0 ? '—á–∏—Å—Ç—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü' : addr.netBio < 0 ? '—á–∏—Å—Ç—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å' : '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω';
                console.log(`   ‚Ä¢ ${addr.address}: ${addr.netUsd > 0 ? '+' : ''}$${addr.netUsd.toLocaleString()} (${status})`);
            });
            console.log('');
        }

        if (onlyBuyers.length > 0) {
            console.log('üü¢ –¢–û–õ–¨–ö–û –ü–û–ö–£–ü–ê–¢–ï–õ–ò (–Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç):');
            onlyBuyers.forEach(addr => {
                console.log(`   ‚Ä¢ ${addr.address}: +$${addr.netUsd.toLocaleString()}`);
            });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeNetPositions();
